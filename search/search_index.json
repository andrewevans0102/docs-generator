{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"site-files/github/0-ISSUE_TEMPLATE/","text":"Bug, feature request, or proposal: What is the expected behavior? What is the current behavior? What are the steps to reproduce? Providing a StackBlitz reproduction is the best way to share your issue. StackBlitz starter: https://goo.gl/wwnhMV What is the use-case or motivation for changing an existing behavior? Which versions of Angular, Material, OS, TypeScript, browsers are affected? Is there anything else we should know?","title":"0-ISSUE_TEMPLATE"},{"location":"site-files/github/0-ISSUE_TEMPLATE/#bug-feature-request-or-proposal","text":"","title":"Bug, feature request, or proposal:"},{"location":"site-files/github/0-ISSUE_TEMPLATE/#what-is-the-expected-behavior","text":"","title":"What is the expected behavior?"},{"location":"site-files/github/0-ISSUE_TEMPLATE/#what-is-the-current-behavior","text":"","title":"What is the current behavior?"},{"location":"site-files/github/0-ISSUE_TEMPLATE/#what-are-the-steps-to-reproduce","text":"Providing a StackBlitz reproduction is the best way to share your issue. StackBlitz starter: https://goo.gl/wwnhMV","title":"What are the steps to reproduce?"},{"location":"site-files/github/0-ISSUE_TEMPLATE/#what-is-the-use-case-or-motivation-for-changing-an-existing-behavior","text":"","title":"What is the use-case or motivation for changing an existing behavior?"},{"location":"site-files/github/0-ISSUE_TEMPLATE/#which-versions-of-angular-material-os-typescript-browsers-are-affected","text":"","title":"Which versions of Angular, Material, OS, TypeScript, browsers are affected?"},{"location":"site-files/github/0-ISSUE_TEMPLATE/#is-there-anything-else-we-should-know","text":"","title":"Is there anything else we should know?"},{"location":"site-files/github/1-bug/","text":"What is the expected behavior? What is the current behavior? What are the steps to reproduce? Providing a StackBlitz reproduction is the best way to share your issue. StackBlitz starter: https://goo.gl/wwnhMV Which versions of Angular, Material, OS, TypeScript, browsers are affected? Is there anything else we should know?","title":"1-bug"},{"location":"site-files/github/1-bug/#what-is-the-expected-behavior","text":"","title":"What is the expected behavior?"},{"location":"site-files/github/1-bug/#what-is-the-current-behavior","text":"","title":"What is the current behavior?"},{"location":"site-files/github/1-bug/#what-are-the-steps-to-reproduce","text":"Providing a StackBlitz reproduction is the best way to share your issue. StackBlitz starter: https://goo.gl/wwnhMV","title":"What are the steps to reproduce?"},{"location":"site-files/github/1-bug/#which-versions-of-angular-material-os-typescript-browsers-are-affected","text":"","title":"Which versions of Angular, Material, OS, TypeScript, browsers are affected?"},{"location":"site-files/github/1-bug/#is-there-anything-else-we-should-know","text":"","title":"Is there anything else we should know?"},{"location":"site-files/github/2-feature/","text":"Please describe the feature you would like to request. What is the use-case or motivation for this proposal? Is there anything else we should know?","title":"2-feature"},{"location":"site-files/github/2-feature/#please-describe-the-feature-you-would-like-to-request","text":"","title":"Please describe the feature you would like to request."},{"location":"site-files/github/2-feature/#what-is-the-use-case-or-motivation-for-this-proposal","text":"","title":"What is the use-case or motivation for this proposal?"},{"location":"site-files/github/2-feature/#is-there-anything-else-we-should-know","text":"","title":"Is there anything else we should know?"},{"location":"site-files/guides/0-bidirectionality/","text":"Angular Material bi-directionality Setting a text-direction for your application The dir attribute is typically applied to html or body element of a page. However, it can be used on any element, within your Angular app, to apply a text-direction to a smaller subset of the page. All Angular Material components automatically reflect the LTR/RTL direction of their container. Reading the text-direction in your own components @angular/cdk/bidi provides a Directionality injectable that can be used by any component in your application. To consume it, you must import BidiModule from @angular/cdk/bidi . Directionality provides two useful properties: value : the current text direction, either 'ltr' or 'rtl' . change : an Observable that emits whenever the text-direction changes. Note that this only captures changes from dir attributes inside the Angular application context . It will not emit for changes to dir on html and body , as they are assumed to be static. Example @Component({ /* ... */ }) export class MyCustomComponent { private dir: Direction; constructor(directionality: Directionality) { this.dir = directionality.value; directionality.change.subscribe(() = { this.dir = directionality.value; }); } }","title":"0-bidirectionality"},{"location":"site-files/guides/0-bidirectionality/#angular-material-bi-directionality","text":"","title":"Angular Material bi-directionality"},{"location":"site-files/guides/0-bidirectionality/#setting-a-text-direction-for-your-application","text":"The dir attribute is typically applied to html or body element of a page. However, it can be used on any element, within your Angular app, to apply a text-direction to a smaller subset of the page. All Angular Material components automatically reflect the LTR/RTL direction of their container.","title":"Setting a text-direction for your application"},{"location":"site-files/guides/0-bidirectionality/#reading-the-text-direction-in-your-own-components","text":"@angular/cdk/bidi provides a Directionality injectable that can be used by any component in your application. To consume it, you must import BidiModule from @angular/cdk/bidi . Directionality provides two useful properties: value : the current text direction, either 'ltr' or 'rtl' . change : an Observable that emits whenever the text-direction changes. Note that this only captures changes from dir attributes inside the Angular application context . It will not emit for changes to dir on html and body , as they are assumed to be static.","title":"Reading the text-direction in your own components"},{"location":"site-files/guides/0-bidirectionality/#example","text":"@Component({ /* ... */ }) export class MyCustomComponent { private dir: Direction; constructor(directionality: Directionality) { this.dir = directionality.value; directionality.change.subscribe(() = { this.dir = directionality.value; }); } }","title":"Example"},{"location":"site-files/guides/1-customizing-component-styles/","text":"Customizing Angular Material component styles Styling concepts There are 3 questions to keep in mind while customizing the styles of Angular Material components: Are your styles encapsulated? Are your styles more specific than the defaults? Is the component a child of your component, or does it exist elsewhere in the DOM? View encapsulation By default, Angular component styles are scoped to affect the component's view. This means that the styles you write will affect all the elements in your component template. They will not affect elements that are children of other components within your template. You can read more about view encapsulation in the Angular documentation . You may also wish to take a look at The State of CSS in Angular on the Angular blog. Selector specificity Each CSS declaration has a level of specificity based on the type and number of selectors used. More specific styles will take precedence over less specific styles. Angular Material uses the least specific selectors possible for its components in order to make it easy to override them. You can read more about specificity and how it is calculated on the MDN web docs . Component location Some Angular Material components, specifically overlay-based ones like MatDialog, MatSnackbar, etc., do not exist as children of your component. Often they are injected elsewhere in the DOM. This is important to keep in mind, since even using high specificity and shadow-piercing selectors will not target elements that are not direct children of your component. Global styles are recommended for targeting such components. Styling overlay components Overlay-based components have a panelClass property (or similar) that can be used to target the overlay pane. For example, to remove the padding from a dialog: // Add this to your global stylesheet after your theme setup .myapp-no-padding-dialog .mat-dialog-container { padding: 0; } this.dialog.open(MyDialogComponent, {panelClass: 'myapp-no-padding-dialog'}) Since you are adding the styles to your global stylesheet, it is good practice to scope them appropriately. Try prefixing your selector with your app name or \"custom\". Also note that the mat-dialog-container 's padding is added by default via a selector with specificity of 1. The customizing styles have a specificity of 2, so they will always take precedence. Styling other components If your component has view encapsulation turned on (default), your component styles will only affect the top level children in your template. HTML elements belonging to child components cannot be targeted by your component styles unless you do one of the following: Add the overriding style to your global stylesheet. Scope the selectors so that it only affects the specific elements you need it to. Turn view encapsulation off on your component. If you do this, be sure to scope your styles appropriately, or else you may end up incidentally targeting other components elswhere in your application. Use a deprecated shadow-piercing descendant combinator to force styles to apply to all the child elements. Read more about this deprecated solution in the Angular documentation .","title":"1-customizing-component-styles"},{"location":"site-files/guides/1-customizing-component-styles/#customizing-angular-material-component-styles","text":"","title":"Customizing Angular Material component styles"},{"location":"site-files/guides/1-customizing-component-styles/#styling-concepts","text":"There are 3 questions to keep in mind while customizing the styles of Angular Material components: Are your styles encapsulated? Are your styles more specific than the defaults? Is the component a child of your component, or does it exist elsewhere in the DOM?","title":"Styling concepts"},{"location":"site-files/guides/1-customizing-component-styles/#view-encapsulation","text":"By default, Angular component styles are scoped to affect the component's view. This means that the styles you write will affect all the elements in your component template. They will not affect elements that are children of other components within your template. You can read more about view encapsulation in the Angular documentation . You may also wish to take a look at The State of CSS in Angular on the Angular blog.","title":"View encapsulation"},{"location":"site-files/guides/1-customizing-component-styles/#selector-specificity","text":"Each CSS declaration has a level of specificity based on the type and number of selectors used. More specific styles will take precedence over less specific styles. Angular Material uses the least specific selectors possible for its components in order to make it easy to override them. You can read more about specificity and how it is calculated on the MDN web docs .","title":"Selector specificity"},{"location":"site-files/guides/1-customizing-component-styles/#component-location","text":"Some Angular Material components, specifically overlay-based ones like MatDialog, MatSnackbar, etc., do not exist as children of your component. Often they are injected elsewhere in the DOM. This is important to keep in mind, since even using high specificity and shadow-piercing selectors will not target elements that are not direct children of your component. Global styles are recommended for targeting such components.","title":"Component location"},{"location":"site-files/guides/1-customizing-component-styles/#styling-overlay-components","text":"Overlay-based components have a panelClass property (or similar) that can be used to target the overlay pane. For example, to remove the padding from a dialog: // Add this to your global stylesheet after your theme setup .myapp-no-padding-dialog .mat-dialog-container { padding: 0; } this.dialog.open(MyDialogComponent, {panelClass: 'myapp-no-padding-dialog'}) Since you are adding the styles to your global stylesheet, it is good practice to scope them appropriately. Try prefixing your selector with your app name or \"custom\". Also note that the mat-dialog-container 's padding is added by default via a selector with specificity of 1. The customizing styles have a specificity of 2, so they will always take precedence.","title":"Styling overlay components"},{"location":"site-files/guides/1-customizing-component-styles/#styling-other-components","text":"If your component has view encapsulation turned on (default), your component styles will only affect the top level children in your template. HTML elements belonging to child components cannot be targeted by your component styles unless you do one of the following: Add the overriding style to your global stylesheet. Scope the selectors so that it only affects the specific elements you need it to. Turn view encapsulation off on your component. If you do this, be sure to scope your styles appropriately, or else you may end up incidentally targeting other components elswhere in your application. Use a deprecated shadow-piercing descendant combinator to force styles to apply to all the child elements. Read more about this deprecated solution in the Angular documentation .","title":"Styling other components"},{"location":"site-files/guides/2-schematics/","text":"Angular Material comes packaged with Angular CLI schematics to make creating Material applications easier. Install Schematics Schematics are included with both @angular/cdk and @angular/material . Once you install the npm packages, they will be available through the Angular CLI. Using the command below will install Angular Material, the Component Dev Kit (CDK), and Angular Animations in your project. Then it will run the install schematic. ng add @angular/material In case you just want to install the @angular/cdk , there are also schematics for the Component Dev Kit ng add @angular/cdk The Angular Material ng add schematic helps you setup an Angular CLI project that uses Material. Running ng add will: Ensure project dependencies are placed in package.json Enable the BrowserAnimationsModule your app module Add either a prebuilt theme or a custom theme Add Roboto fonts to your index.html Add the Material Icon font to your index.html Add global styles to Remove margins from body Set height: 100% on html and body Make Roboto the default font of your app Install and import hammerjs for gesture support in your project Component schematics In addition to the install schematic, Angular Material comes with multiple schematics that can be used to easily generate Material Design components: Name Description address-form Component with a form group that uses Material Design form controls to prompt for a shipping address navigation Creates a component with a responsive Material Design sidenav and a toolbar for showing the app name dashboard Component with multiple Material Design cards and menus which are aligned in a grid layout table Generates a component with a Material Design data table that supports sorting and pagination tree Component that interactively visualizes a nested folder structure by using the mat-tree component Additionally the Angular CDK also comes with a collection of component schematics: Name Description drag-drop Component that uses the @angular/cdk/drag-drop directives for creating an interactive to-do list Address form schematic Running the address-form schematic generates a new Angular component that can be used to get started with a Material Design form group consisting of: Material Design form fields Material Design radio controls Material Design buttons ng generate @angular/material:address-form component-name Navigation schematic The navigation schematic will create a new component that includes a toolbar with the app name and a responsive side nav based on Material breakpoints. ng generate @angular/material:nav component-name Table schematic The table schematic will create a component that renders an Angular Material table which has been pre-configured with a datasource for sorting and pagination. ng generate @angular/material:table component-name Dashboard schematic The dashboard schematic will create a new component that contains a dynamic grid list of Material Design cards. ng generate @angular/material:dashboard component-name Tree schematic The tree schematic can be used to quickly generate an Angular component that uses the Angular Material mat-tree component to visualize a nested folder structure. ng generate @angular/material:tree component-name Drag and Drop schematic The drag-drop schematic is provided by the @angular/cdk and can be used to generate a component that uses the CDK drag and drop directives. ng generate @angular/cdk:drag-drop component-name","title":"2-schematics"},{"location":"site-files/guides/2-schematics/#install-schematics","text":"Schematics are included with both @angular/cdk and @angular/material . Once you install the npm packages, they will be available through the Angular CLI. Using the command below will install Angular Material, the Component Dev Kit (CDK), and Angular Animations in your project. Then it will run the install schematic. ng add @angular/material In case you just want to install the @angular/cdk , there are also schematics for the Component Dev Kit ng add @angular/cdk The Angular Material ng add schematic helps you setup an Angular CLI project that uses Material. Running ng add will: Ensure project dependencies are placed in package.json Enable the BrowserAnimationsModule your app module Add either a prebuilt theme or a custom theme Add Roboto fonts to your index.html Add the Material Icon font to your index.html Add global styles to Remove margins from body Set height: 100% on html and body Make Roboto the default font of your app Install and import hammerjs for gesture support in your project","title":"Install Schematics"},{"location":"site-files/guides/2-schematics/#component-schematics","text":"In addition to the install schematic, Angular Material comes with multiple schematics that can be used to easily generate Material Design components: Name Description address-form Component with a form group that uses Material Design form controls to prompt for a shipping address navigation Creates a component with a responsive Material Design sidenav and a toolbar for showing the app name dashboard Component with multiple Material Design cards and menus which are aligned in a grid layout table Generates a component with a Material Design data table that supports sorting and pagination tree Component that interactively visualizes a nested folder structure by using the mat-tree component Additionally the Angular CDK also comes with a collection of component schematics: Name Description drag-drop Component that uses the @angular/cdk/drag-drop directives for creating an interactive to-do list","title":"Component schematics"},{"location":"site-files/guides/2-schematics/#address-form-schematic","text":"Running the address-form schematic generates a new Angular component that can be used to get started with a Material Design form group consisting of: Material Design form fields Material Design radio controls Material Design buttons ng generate @angular/material:address-form component-name","title":"Address form schematic"},{"location":"site-files/guides/2-schematics/#navigation-schematic","text":"The navigation schematic will create a new component that includes a toolbar with the app name and a responsive side nav based on Material breakpoints. ng generate @angular/material:nav component-name","title":"Navigation schematic"},{"location":"site-files/guides/2-schematics/#table-schematic","text":"The table schematic will create a component that renders an Angular Material table which has been pre-configured with a datasource for sorting and pagination. ng generate @angular/material:table component-name","title":"Table schematic"},{"location":"site-files/guides/2-schematics/#dashboard-schematic","text":"The dashboard schematic will create a new component that contains a dynamic grid list of Material Design cards. ng generate @angular/material:dashboard component-name","title":"Dashboard schematic"},{"location":"site-files/guides/2-schematics/#tree-schematic","text":"The tree schematic can be used to quickly generate an Angular component that uses the Angular Material mat-tree component to visualize a nested folder structure. ng generate @angular/material:tree component-name","title":"Tree schematic"},{"location":"site-files/guides/2-schematics/#drag-and-drop-schematic","text":"The drag-drop schematic is provided by the @angular/cdk and can be used to generate a component that uses the CDK drag and drop directives. ng generate @angular/cdk:drag-drop component-name","title":"Drag and Drop schematic"},{"location":"site-files/guides/3-theming-your-components/","text":"Theming your custom component with Angular Material's theming system In order to style your own components with Angular Material's tooling, the component's styles must be defined with Sass. 1. Define all color and typography styles in a \"theme file\" for the component First, create a Sass mixin that accepts an Angular Material theme and outputs the color-specific styles for the component. An Angular Material theme definition is a Sass map. For example, if building a custom carousel component: // Import library functions for theme creation. @import '~@angular/material/theming'; // Define a mixin that accepts a theme and outputs the theme-specific styles. @mixin candy-carousel-theme($theme) { // Extract the palettes you need from the theme definition. $primary: map-get($theme, primary); $accent: map-get($theme, accent); // Define any styles affected by the theme. .candy-carousel { // Use mat-color to extract individual colors from a palette. background-color: mat-color($primary); border-color: mat-color($accent, A400); } } Second, create another Sass mixin that accepts an Angular Material typography definition and outputs typographic styles. For example: @mixin candy-carousel-typography($config) { .candy-carousel { font: { family: mat-font-family($config, body-1); size: mat-font-size($config, body-1); weight: mat-font-weight($config, body-1); } } } See the typography guide for more information on typographic customization. 2. Define all remaining styles in a normal component stylesheet. Define all styles unaffected by the theme in a separate file referenced directly in the component's styleUrl . This generally includes everything except for color and typography styles. 3. Include the theme mixin in your application Use the Sass @include keyword to include a component's theme mixin wherever you're already including Angular Material's built-in theme mixins. // Import library functions for theme creation. @import '~@angular/material/theming'; // Include non-theme styles for core. @include mat-core(); // Define your application's custom theme. $primary: mat-palette($mat-indigo); $accent: mat-palette($mat-pink, A200, A100, A400); $theme: mat-light-theme($primary, $accent); // Include theme styles for Angular Material components. @include angular-material-theme($theme); // Include theme styles for your custom components. @include candy-carousel-theme($theme); Note: using the mat-color function to extract colors from a palette You can consume the theming functions and Material Design color palettes from @angular/material/theming . The mat-color Sass function extracts a specific color from a palette. For example: // Import theming functions @import '~@angular/material/theming'; .candy-carousel { // Get the default hue for a palette. color: mat-color($primary); // Get a specific hue for a palette. // See https://material.io/archive/guidelines/style/color.html#color-color-palette for hues. background-color: mat-color($accent, 300); // Get a relative color for a hue ('lighter' or 'darker') outline-color: mat-color($accent, lighter); // Get a contrast color for a hue by adding `-contrast` to any other key. border-color: mat-color($primary, '100-contrast'); }","title":"3-theming-your-components"},{"location":"site-files/guides/3-theming-your-components/#theming-your-custom-component-with-angular-materials-theming-system","text":"In order to style your own components with Angular Material's tooling, the component's styles must be defined with Sass.","title":"Theming your custom component with Angular Material's theming system"},{"location":"site-files/guides/3-theming-your-components/#1-define-all-color-and-typography-styles-in-a-theme-file-for-the-component","text":"First, create a Sass mixin that accepts an Angular Material theme and outputs the color-specific styles for the component. An Angular Material theme definition is a Sass map. For example, if building a custom carousel component: // Import library functions for theme creation. @import '~@angular/material/theming'; // Define a mixin that accepts a theme and outputs the theme-specific styles. @mixin candy-carousel-theme($theme) { // Extract the palettes you need from the theme definition. $primary: map-get($theme, primary); $accent: map-get($theme, accent); // Define any styles affected by the theme. .candy-carousel { // Use mat-color to extract individual colors from a palette. background-color: mat-color($primary); border-color: mat-color($accent, A400); } } Second, create another Sass mixin that accepts an Angular Material typography definition and outputs typographic styles. For example: @mixin candy-carousel-typography($config) { .candy-carousel { font: { family: mat-font-family($config, body-1); size: mat-font-size($config, body-1); weight: mat-font-weight($config, body-1); } } } See the typography guide for more information on typographic customization.","title":"1. Define all color and typography styles in a \"theme file\" for the component"},{"location":"site-files/guides/3-theming-your-components/#2-define-all-remaining-styles-in-a-normal-component-stylesheet","text":"Define all styles unaffected by the theme in a separate file referenced directly in the component's styleUrl . This generally includes everything except for color and typography styles.","title":"2. Define all remaining styles in a normal component stylesheet."},{"location":"site-files/guides/3-theming-your-components/#3-include-the-theme-mixin-in-your-application","text":"Use the Sass @include keyword to include a component's theme mixin wherever you're already including Angular Material's built-in theme mixins. // Import library functions for theme creation. @import '~@angular/material/theming'; // Include non-theme styles for core. @include mat-core(); // Define your application's custom theme. $primary: mat-palette($mat-indigo); $accent: mat-palette($mat-pink, A200, A100, A400); $theme: mat-light-theme($primary, $accent); // Include theme styles for Angular Material components. @include angular-material-theme($theme); // Include theme styles for your custom components. @include candy-carousel-theme($theme);","title":"3. Include the theme mixin in your application"},{"location":"site-files/guides/3-theming-your-components/#note-using-the-mat-color-function-to-extract-colors-from-a-palette","text":"You can consume the theming functions and Material Design color palettes from @angular/material/theming . The mat-color Sass function extracts a specific color from a palette. For example: // Import theming functions @import '~@angular/material/theming'; .candy-carousel { // Get the default hue for a palette. color: mat-color($primary); // Get a specific hue for a palette. // See https://material.io/archive/guidelines/style/color.html#color-color-palette for hues. background-color: mat-color($accent, 300); // Get a relative color for a hue ('lighter' or 'darker') outline-color: mat-color($accent, lighter); // Get a contrast color for a hue by adding `-contrast` to any other key. border-color: mat-color($primary, '100-contrast'); }","title":"Note: using the mat-color function to extract colors from a palette"},{"location":"site-files/guides/4-getting-started/","text":"For help getting started with a new Angular app, check out the Angular CLI . For existing apps, follow these steps to begin using Angular Material. Step 1: Install Angular Material, Angular CDK and Angular Animations You can use either the npm or yarn command-line tool to install packages. Use whichever is appropriate for your project in the examples below. NPM npm install --save @angular/material @angular/cdk @angular/animations Yarn yarn add @angular/material @angular/cdk @angular/animations Alternative 1: Snapshot Build A snapshot build with the latest changes from master is also available. Note that this snapshot build should not be considered stable and may break between releases. NPM npm install --save angular/material2-builds angular/cdk-builds angular/animations-builds Yarn yarn add angular/material2-builds angular/cdk-builds angular/animations-builds Alternative 2: Angular Devkit 6+ Using the Angular CLI ng add command will update your Angular project with the correct dependencies, perform configuration changes and execute initialization code. ng add @angular/material Step 2: Configure animations Once the animations package is installed, import BrowserAnimationsModule into your application to enable animations support. import {BrowserAnimationsModule} from '@angular/platform-browser/animations'; @NgModule({ ... imports: [BrowserAnimationsModule], ... }) export class PizzaPartyAppModule { } Alternatively, you can disable animations by importing NoopAnimationsModule . import {NoopAnimationsModule} from '@angular/platform-browser/animations'; @NgModule({ ... imports: [NoopAnimationsModule], ... }) export class PizzaPartyAppModule { } Step 3: Import the component modules Import the NgModule for each component you want to use: import {MatButtonModule, MatCheckboxModule} from '@angular/material'; @NgModule({ ... imports: [MatButtonModule, MatCheckboxModule], ... }) export class PizzaPartyAppModule { } Alternatively, you can create a separate NgModule that imports and then re-exports all of the Anguar Material components that you will use in your application. By exporting them again, other modules can simply include your CustomMaterialModule wherever Material components are needed, and automatically get all of the exported Material modules. A good place for importing/exporting the application-wide Material modules is the SharedModule . import {MatButtonModule, MatCheckboxModule} from '@angular/material'; @NgModule({ imports: [MatButtonModule, MatCheckboxModule], exports: [MatButtonModule, MatCheckboxModule], }) export class MyOwnCustomMaterialModule { } Whichever approach you use, be sure to import the Angular Material modules after Angular's BrowserModule , as the import order matters for NgModules. Step 4: Include a theme Including a theme is required to apply all of the core and theme styles to your application. To get started with a prebuilt theme, include one of Angular Material's prebuilt themes globally in your application. If you're using the Angular CLI, you can add this to your styles.css : @import ~@angular/material/prebuilt-themes/indigo-pink.css ; If you are not using the Angular CLI, you can include a prebuilt theme via a link element in your index.html . For more information on theming and instructions on how to create a custom theme, see the theming guide . Step 5: Gesture Support Some components ( mat-slide-toggle , mat-slider , matTooltip ) rely on HammerJS for gestures. In order to get the full feature-set of these components, HammerJS must be loaded into the application. You can add HammerJS to your application via npm , a CDN (such as the Google CDN ), or served directly from your app. To install via npm, use the following command: NPM npm install --save hammerjs Yarn yarn add hammerjs After installing, import it on your app's entry point (e.g. src/main.ts ). import 'hammerjs'; Step 6 (Optional): Add Material Icons If you want to use the mat-icon component with the official Material Design Icons , load the icon font in your index.html . link href= https://fonts.googleapis.com/icon?family=Material+Icons rel= stylesheet For more information on using Material Icons, check out the Material Icons Guide . Note that mat-icon supports any font or svg icons; using Material Icons is one of many options. Appendix: Configuring SystemJS If your project is using SystemJS for module loading, you will need to add @angular/material and @angular/cdk to the SystemJS configuration. The @angular/cdk package is organized of multiple entry-points. Each of these entry-points must be registered individually with SystemJS. Here is a example configuration where @angular/material , @angular/cdk/platform and @angular/cdk/a11y are used: System.config({ // Existing configuration options map: { // ... '@angular/material': 'npm:@angular/material/bundles/material.umd.js', // CDK individual packages '@angular/cdk/platform': 'npm:@angular/cdk/bundles/cdk-platform.umd.js', '@angular/cdk/a11y': 'npm:@angular/cdk/bundles/cdk-a11y.umd.js', // ... 'hammerjs': 'npm:hammerjs', }, packages: { //... hammerjs: {main: './hammer.min.js', defaultExtension: 'js'} //... } }); Example Angular Material projects material.angular.io - We build our own documentation with Angular Material!","title":"4-getting-started"},{"location":"site-files/guides/4-getting-started/#step-1-install-angular-material-angular-cdk-and-angular-animations","text":"You can use either the npm or yarn command-line tool to install packages. Use whichever is appropriate for your project in the examples below.","title":"Step 1: Install Angular Material, Angular CDK and Angular Animations"},{"location":"site-files/guides/4-getting-started/#npm","text":"npm install --save @angular/material @angular/cdk @angular/animations","title":"NPM"},{"location":"site-files/guides/4-getting-started/#yarn","text":"yarn add @angular/material @angular/cdk @angular/animations","title":"Yarn"},{"location":"site-files/guides/4-getting-started/#alternative-1-snapshot-build","text":"A snapshot build with the latest changes from master is also available. Note that this snapshot build should not be considered stable and may break between releases.","title":"Alternative 1: Snapshot Build"},{"location":"site-files/guides/4-getting-started/#npm_1","text":"npm install --save angular/material2-builds angular/cdk-builds angular/animations-builds","title":"NPM"},{"location":"site-files/guides/4-getting-started/#yarn_1","text":"yarn add angular/material2-builds angular/cdk-builds angular/animations-builds","title":"Yarn"},{"location":"site-files/guides/4-getting-started/#alternative-2-angular-devkit-6","text":"Using the Angular CLI ng add command will update your Angular project with the correct dependencies, perform configuration changes and execute initialization code. ng add @angular/material","title":"Alternative 2: Angular Devkit 6+"},{"location":"site-files/guides/4-getting-started/#step-2-configure-animations","text":"Once the animations package is installed, import BrowserAnimationsModule into your application to enable animations support. import {BrowserAnimationsModule} from '@angular/platform-browser/animations'; @NgModule({ ... imports: [BrowserAnimationsModule], ... }) export class PizzaPartyAppModule { } Alternatively, you can disable animations by importing NoopAnimationsModule . import {NoopAnimationsModule} from '@angular/platform-browser/animations'; @NgModule({ ... imports: [NoopAnimationsModule], ... }) export class PizzaPartyAppModule { }","title":"Step 2: Configure animations"},{"location":"site-files/guides/4-getting-started/#step-3-import-the-component-modules","text":"Import the NgModule for each component you want to use: import {MatButtonModule, MatCheckboxModule} from '@angular/material'; @NgModule({ ... imports: [MatButtonModule, MatCheckboxModule], ... }) export class PizzaPartyAppModule { } Alternatively, you can create a separate NgModule that imports and then re-exports all of the Anguar Material components that you will use in your application. By exporting them again, other modules can simply include your CustomMaterialModule wherever Material components are needed, and automatically get all of the exported Material modules. A good place for importing/exporting the application-wide Material modules is the SharedModule . import {MatButtonModule, MatCheckboxModule} from '@angular/material'; @NgModule({ imports: [MatButtonModule, MatCheckboxModule], exports: [MatButtonModule, MatCheckboxModule], }) export class MyOwnCustomMaterialModule { } Whichever approach you use, be sure to import the Angular Material modules after Angular's BrowserModule , as the import order matters for NgModules.","title":"Step 3: Import the component modules"},{"location":"site-files/guides/4-getting-started/#step-4-include-a-theme","text":"Including a theme is required to apply all of the core and theme styles to your application. To get started with a prebuilt theme, include one of Angular Material's prebuilt themes globally in your application. If you're using the Angular CLI, you can add this to your styles.css : @import ~@angular/material/prebuilt-themes/indigo-pink.css ; If you are not using the Angular CLI, you can include a prebuilt theme via a link element in your index.html . For more information on theming and instructions on how to create a custom theme, see the theming guide .","title":"Step 4: Include a theme"},{"location":"site-files/guides/4-getting-started/#step-5-gesture-support","text":"Some components ( mat-slide-toggle , mat-slider , matTooltip ) rely on HammerJS for gestures. In order to get the full feature-set of these components, HammerJS must be loaded into the application. You can add HammerJS to your application via npm , a CDN (such as the Google CDN ), or served directly from your app. To install via npm, use the following command:","title":"Step 5: Gesture Support"},{"location":"site-files/guides/4-getting-started/#npm_2","text":"npm install --save hammerjs","title":"NPM"},{"location":"site-files/guides/4-getting-started/#yarn_2","text":"yarn add hammerjs After installing, import it on your app's entry point (e.g. src/main.ts ). import 'hammerjs';","title":"Yarn"},{"location":"site-files/guides/4-getting-started/#step-6-optional-add-material-icons","text":"If you want to use the mat-icon component with the official Material Design Icons , load the icon font in your index.html . link href= https://fonts.googleapis.com/icon?family=Material+Icons rel= stylesheet For more information on using Material Icons, check out the Material Icons Guide . Note that mat-icon supports any font or svg icons; using Material Icons is one of many options.","title":"Step 6 (Optional): Add Material Icons"},{"location":"site-files/guides/4-getting-started/#appendix-configuring-systemjs","text":"If your project is using SystemJS for module loading, you will need to add @angular/material and @angular/cdk to the SystemJS configuration. The @angular/cdk package is organized of multiple entry-points. Each of these entry-points must be registered individually with SystemJS. Here is a example configuration where @angular/material , @angular/cdk/platform and @angular/cdk/a11y are used: System.config({ // Existing configuration options map: { // ... '@angular/material': 'npm:@angular/material/bundles/material.umd.js', // CDK individual packages '@angular/cdk/platform': 'npm:@angular/cdk/bundles/cdk-platform.umd.js', '@angular/cdk/a11y': 'npm:@angular/cdk/bundles/cdk-a11y.umd.js', // ... 'hammerjs': 'npm:hammerjs', }, packages: { //... hammerjs: {main: './hammer.min.js', defaultExtension: 'js'} //... } });","title":"Appendix: Configuring SystemJS"},{"location":"site-files/guides/4-getting-started/#example-angular-material-projects","text":"material.angular.io - We build our own documentation with Angular Material!","title":"Example Angular Material projects"},{"location":"site-files/guides/5-theming/","text":"Theming your Angular Material app What is a theme? A theme is the set of colors that will be applied to the Angular Material components. The library's approach to theming is based on the guidance from the Material Design spec . In Angular Material, a theme is created by composing multiple palettes. In particular, a theme consists of: A primary palette: colors most widely used across all screens and components. An accent palette: colors used for the floating action button and interactive elements. A warn palette: colors used to convey error state. A foreground palette: colors for text and icons. * A background palette: colors used for element backgrounds. In Angular Material, all theme styles are generated statically at build-time so that your app doesn't have to spend cycles generating theme styles on startup. Using a pre-built theme Angular Material comes prepackaged with several pre-built theme css files. These theme files also include all of the styles for core (styles common to all components), so you only have to include a single css file for Angular Material in your app. You can include a theme file directly into your application from @angular/material/prebuilt-themes Available pre-built themes: deeppurple-amber.css indigo-pink.css pink-bluegrey.css purple-green.css If you're using Angular CLI, this is as simple as including one line in your styles.css file: @import '@angular/material/prebuilt-themes/deeppurple-amber.css'; Alternatively, you can just reference the file directly. This would look something like: link href= node_modules/@angular/material/prebuilt-themes/indigo-pink.css rel= stylesheet The actual path will depend on your server setup. You can also concatenate the file with the rest of your application's css. Finally, if your app's content is not placed inside of a mat-sidenav-container element, you need to add the mat-app-background class to your wrapper element (for example the body ). This ensures that the proper theme background is applied to your page. Defining a custom theme When you want more customization than a pre-built theme offers, you can create your own theme file. A custom theme file does two things: 1. Imports the mat-core() Sass mixin. This includes all common styles that are used by multiple components. This should only be included once in your application. If this mixin is included multiple times, your application will end up with multiple copies of these common styles. 2. Defines a theme data structure as the composition of multiple palettes. This object can be created with either the mat-light-theme function or the mat-dark-theme function. The output of this function is then passed to the angular-material-theme mixin, which will output all of the corresponding styles for the theme. A typical theme file will look something like this: @import '~@angular/material/theming'; // Plus imports for other components in your app. // Include the common styles for Angular Material. We include this here so that you only // have to load a single css file for Angular Material in your app. // Be sure that you only ever include this mixin once! @include mat-core(); // Define the palettes for your theme using the Material Design palettes available in palette.scss // (imported above). For each palette, you can optionally specify a default, lighter, and darker // hue. Available color palettes: https://material.io/design/color/ $candy-app-primary: mat-palette($mat-indigo); $candy-app-accent: mat-palette($mat-pink, A200, A100, A400); // The warn palette is optional (defaults to red). $candy-app-warn: mat-palette($mat-red); // Create the theme object (a Sass map containing all of the palettes). $candy-app-theme: mat-light-theme($candy-app-primary, $candy-app-accent, $candy-app-warn); // Include theme styles for core and each component used in your app. // Alternatively, you can import and @include the theme mixins for each component // that you are using. @include angular-material-theme($candy-app-theme); You only need this single Sass file; you do not need to use Sass to style the rest of your app. If you are using the Angular CLI, support for compiling Sass to css is built-in; you only have to add a new entry to the \"styles\" list in angular.json pointing to the theme file (e.g., unicorn-app-theme.scss ). If you're not using the Angular CLI, you can use any existing Sass tooling to build the file (such as gulp-sass or grunt-sass). The simplest approach is to use the node-sass CLI; you simply run: node-sass src/unicorn-app-theme.scss dist/unicorn-app-theme.css and then include the output file in your index.html. Your custom theme file should not be imported into other SCSS files. This will duplicate styles in your CSS output. If you want to consume your theme definition object (e.g., $candy-app-theme ) in other SCSS files, then the definition of the theme object should be broken into its own file, separate from the inclusion of the mat-core and angular-material-theme mixins. The theme file can be concatenated and minified with the rest of the application's css. Note that if you include the generated theme file in the styleUrls of an Angular component, those styles will be subject to that component's view encapsulation . Multiple themes You can create multiple themes for your application by including the angular-material-theme mixin multiple times, where each inclusion is gated by an additional CSS class. Remember to only ever include the @mat-core mixin only once; it should not be included for each theme. Example of defining multiple themes: @import '~@angular/material/theming'; // Plus imports for other components in your app. // Include the common styles for Angular Material. We include this here so that you only // have to load a single css file for Angular Material in your app. // **Be sure that you only ever include this mixin once!** @include mat-core(); // Define the default theme (same as the example above). $candy-app-primary: mat-palette($mat-indigo); $candy-app-accent: mat-palette($mat-pink, A200, A100, A400); $candy-app-theme: mat-light-theme($candy-app-primary, $candy-app-accent); // Include the default theme styles. @include angular-material-theme($candy-app-theme); // Define an alternate dark theme. $dark-primary: mat-palette($mat-blue-grey); $dark-accent: mat-palette($mat-amber, A200, A100, A400); $dark-warn: mat-palette($mat-deep-orange); $dark-theme: mat-dark-theme($dark-primary, $dark-accent, $dark-warn); // Include the alternative theme styles inside of a block with a CSS class. You can make this // CSS class whatever you want. In this example, any component inside of an element with // `.unicorn-dark-theme` will be affected by this alternate dark theme instead of the default theme. .unicorn-dark-theme { @include angular-material-theme($dark-theme); } In the above example, any component inside of a parent with the unicorn-dark-theme class will use the dark theme, while other components will fall back to the default $candy-app-theme . You can include as many themes as you like in this manner. You can also @include the angular-material-theme in separate files and then lazily load them based on an end-user interaction (how to lazily load the CSS assets will vary based on your application). It's important to remember, however, that the mat-core mixin should only ever be included once . Multiple themes and overlay-based components Since certain components (e.g. menu, select, dialog, etc.) are inside of a global overlay container, an additional step is required for those components to be affected by the theme's css class selector ( .unicorn-dark-theme in the example above). To do this, you can add the appropriate class to the global overlay container. For the example above, this would look like: import {OverlayContainer} from '@angular/cdk/overlay'; @NgModule({ // ... }) export class UnicornCandyAppModule { constructor(overlayContainer: OverlayContainer) { overlayContainer.getContainerElement().classList.add('unicorn-dark-theme'); } } Theming only certain components The angular-material-theme mixin will output styles for all components in the library . If you are only using a subset of the components (or if you want to change the theme for specific components), you can include component-specific theme mixins. You also will need to include the mat-core-theme mixin as well, which contains theme-specific styles for common behaviors (such as ripples). ```scss @import '~@angular/material/theming'; // Plus imports for other components in your app. // Include the common styles for Angular Material. We include this here so that you only // have to load a single css file for Angular Material in your app. // Be sure that you only ever include this mixin once! @include mat-core(); // Define the theme. $candy-app-primary: mat-palette($mat-indigo); $candy-app-accent: mat-palette($mat-pink, A200, A100, A400); $candy-app-theme: mat-light-theme($candy-app-primary, $candy-app-accent); // Include the theme styles for only specified components. @include mat-core-theme($candy-app-theme); @include mat-button-theme($candy-app-theme); @include mat-checkbox-theme($candy-app-theme); ``` Theming your own components For more details about theming your own components, see theming-your-components.md .","title":"5-theming"},{"location":"site-files/guides/5-theming/#theming-your-angular-material-app","text":"","title":"Theming your Angular Material app"},{"location":"site-files/guides/5-theming/#what-is-a-theme","text":"A theme is the set of colors that will be applied to the Angular Material components. The library's approach to theming is based on the guidance from the Material Design spec . In Angular Material, a theme is created by composing multiple palettes. In particular, a theme consists of: A primary palette: colors most widely used across all screens and components. An accent palette: colors used for the floating action button and interactive elements. A warn palette: colors used to convey error state. A foreground palette: colors for text and icons. * A background palette: colors used for element backgrounds. In Angular Material, all theme styles are generated statically at build-time so that your app doesn't have to spend cycles generating theme styles on startup.","title":"What is a theme?"},{"location":"site-files/guides/5-theming/#using-a-pre-built-theme","text":"Angular Material comes prepackaged with several pre-built theme css files. These theme files also include all of the styles for core (styles common to all components), so you only have to include a single css file for Angular Material in your app. You can include a theme file directly into your application from @angular/material/prebuilt-themes Available pre-built themes: deeppurple-amber.css indigo-pink.css pink-bluegrey.css purple-green.css If you're using Angular CLI, this is as simple as including one line in your styles.css file: @import '@angular/material/prebuilt-themes/deeppurple-amber.css'; Alternatively, you can just reference the file directly. This would look something like: link href= node_modules/@angular/material/prebuilt-themes/indigo-pink.css rel= stylesheet The actual path will depend on your server setup. You can also concatenate the file with the rest of your application's css. Finally, if your app's content is not placed inside of a mat-sidenav-container element, you need to add the mat-app-background class to your wrapper element (for example the body ). This ensures that the proper theme background is applied to your page.","title":"Using a pre-built theme"},{"location":"site-files/guides/5-theming/#defining-a-custom-theme","text":"When you want more customization than a pre-built theme offers, you can create your own theme file. A custom theme file does two things: 1. Imports the mat-core() Sass mixin. This includes all common styles that are used by multiple components. This should only be included once in your application. If this mixin is included multiple times, your application will end up with multiple copies of these common styles. 2. Defines a theme data structure as the composition of multiple palettes. This object can be created with either the mat-light-theme function or the mat-dark-theme function. The output of this function is then passed to the angular-material-theme mixin, which will output all of the corresponding styles for the theme. A typical theme file will look something like this: @import '~@angular/material/theming'; // Plus imports for other components in your app. // Include the common styles for Angular Material. We include this here so that you only // have to load a single css file for Angular Material in your app. // Be sure that you only ever include this mixin once! @include mat-core(); // Define the palettes for your theme using the Material Design palettes available in palette.scss // (imported above). For each palette, you can optionally specify a default, lighter, and darker // hue. Available color palettes: https://material.io/design/color/ $candy-app-primary: mat-palette($mat-indigo); $candy-app-accent: mat-palette($mat-pink, A200, A100, A400); // The warn palette is optional (defaults to red). $candy-app-warn: mat-palette($mat-red); // Create the theme object (a Sass map containing all of the palettes). $candy-app-theme: mat-light-theme($candy-app-primary, $candy-app-accent, $candy-app-warn); // Include theme styles for core and each component used in your app. // Alternatively, you can import and @include the theme mixins for each component // that you are using. @include angular-material-theme($candy-app-theme); You only need this single Sass file; you do not need to use Sass to style the rest of your app. If you are using the Angular CLI, support for compiling Sass to css is built-in; you only have to add a new entry to the \"styles\" list in angular.json pointing to the theme file (e.g., unicorn-app-theme.scss ). If you're not using the Angular CLI, you can use any existing Sass tooling to build the file (such as gulp-sass or grunt-sass). The simplest approach is to use the node-sass CLI; you simply run: node-sass src/unicorn-app-theme.scss dist/unicorn-app-theme.css and then include the output file in your index.html. Your custom theme file should not be imported into other SCSS files. This will duplicate styles in your CSS output. If you want to consume your theme definition object (e.g., $candy-app-theme ) in other SCSS files, then the definition of the theme object should be broken into its own file, separate from the inclusion of the mat-core and angular-material-theme mixins. The theme file can be concatenated and minified with the rest of the application's css. Note that if you include the generated theme file in the styleUrls of an Angular component, those styles will be subject to that component's view encapsulation .","title":"Defining a custom theme"},{"location":"site-files/guides/5-theming/#multiple-themes","text":"You can create multiple themes for your application by including the angular-material-theme mixin multiple times, where each inclusion is gated by an additional CSS class. Remember to only ever include the @mat-core mixin only once; it should not be included for each theme.","title":"Multiple themes"},{"location":"site-files/guides/5-theming/#example-of-defining-multiple-themes","text":"@import '~@angular/material/theming'; // Plus imports for other components in your app. // Include the common styles for Angular Material. We include this here so that you only // have to load a single css file for Angular Material in your app. // **Be sure that you only ever include this mixin once!** @include mat-core(); // Define the default theme (same as the example above). $candy-app-primary: mat-palette($mat-indigo); $candy-app-accent: mat-palette($mat-pink, A200, A100, A400); $candy-app-theme: mat-light-theme($candy-app-primary, $candy-app-accent); // Include the default theme styles. @include angular-material-theme($candy-app-theme); // Define an alternate dark theme. $dark-primary: mat-palette($mat-blue-grey); $dark-accent: mat-palette($mat-amber, A200, A100, A400); $dark-warn: mat-palette($mat-deep-orange); $dark-theme: mat-dark-theme($dark-primary, $dark-accent, $dark-warn); // Include the alternative theme styles inside of a block with a CSS class. You can make this // CSS class whatever you want. In this example, any component inside of an element with // `.unicorn-dark-theme` will be affected by this alternate dark theme instead of the default theme. .unicorn-dark-theme { @include angular-material-theme($dark-theme); } In the above example, any component inside of a parent with the unicorn-dark-theme class will use the dark theme, while other components will fall back to the default $candy-app-theme . You can include as many themes as you like in this manner. You can also @include the angular-material-theme in separate files and then lazily load them based on an end-user interaction (how to lazily load the CSS assets will vary based on your application). It's important to remember, however, that the mat-core mixin should only ever be included once .","title":"Example of defining multiple themes:"},{"location":"site-files/guides/5-theming/#multiple-themes-and-overlay-based-components","text":"Since certain components (e.g. menu, select, dialog, etc.) are inside of a global overlay container, an additional step is required for those components to be affected by the theme's css class selector ( .unicorn-dark-theme in the example above). To do this, you can add the appropriate class to the global overlay container. For the example above, this would look like: import {OverlayContainer} from '@angular/cdk/overlay'; @NgModule({ // ... }) export class UnicornCandyAppModule { constructor(overlayContainer: OverlayContainer) { overlayContainer.getContainerElement().classList.add('unicorn-dark-theme'); } }","title":"Multiple themes and overlay-based components"},{"location":"site-files/guides/5-theming/#theming-only-certain-components","text":"The angular-material-theme mixin will output styles for all components in the library . If you are only using a subset of the components (or if you want to change the theme for specific components), you can include component-specific theme mixins. You also will need to include the mat-core-theme mixin as well, which contains theme-specific styles for common behaviors (such as ripples). ```scss @import '~@angular/material/theming'; // Plus imports for other components in your app. // Include the common styles for Angular Material. We include this here so that you only // have to load a single css file for Angular Material in your app. // Be sure that you only ever include this mixin once! @include mat-core(); // Define the theme. $candy-app-primary: mat-palette($mat-indigo); $candy-app-accent: mat-palette($mat-pink, A200, A100, A400); $candy-app-theme: mat-light-theme($candy-app-primary, $candy-app-accent); // Include the theme styles for only specified components. @include mat-core-theme($candy-app-theme); @include mat-button-theme($candy-app-theme); @include mat-checkbox-theme($candy-app-theme); ```","title":"Theming only certain components"},{"location":"site-files/guides/5-theming/#theming-your-own-components","text":"For more details about theming your own components, see theming-your-components.md .","title":"Theming your own components"},{"location":"site-files/guides/6-creating-a-custom-stepper-using-the-cdk-stepper/","text":"Creating a custom stepper using the CDK stepper The CDK stepper allows to build a custom stepper which you can completely style yourself without any specific Material Design styling. In this guide, we'll learn how we can build our own custom stepper using the CDK stepper. Here is what we'll build by the end of this guide: Create our custom stepper component Now we are ready to create our custom stepper component. Therefore, we need to create a new Angular component which extends CdkStepper : custom-stepper.component.ts @Component({ selector: app-custom-stepper , templateUrl: ./custom-stepper.component.html , styleUrls: [ ./custom-stepper.component.css ], // This custom stepper provides itself as CdkStepper so that it can be recognized // by other components. providers: [{ provide: CdkStepper, useExisting: CustomStepperComponent }] }) export class CustomStepperComponent extends CdkStepper { onClick(index: number): void { this.selectedIndex = index; } } After we've extended our component class from CdkStepper we can now access different properties from this class like linear , selectedIndex and steps which are defined in the API documentation . This is the HTML template of our custom stepper component: custom-stepper.component.html section class= container header h2 Step {{selectedIndex + 1}}/{{steps.length}} /h2 /header div [style.display]= selected ? 'block' : 'none' !-- Content from the CdkStep is projected here -- ng-container [ngTemplateOutlet]= selected.content /ng-container /div footer class= step-navigation-bar button class= nav-button cdkStepperPrevious larr; /button button class= step *ngFor= let step of steps; let i = index; [ngClass]= {'active': selectedIndex === i} (click)= onClick(i) Step {{i + 1}} /button button class= nav-button cdkStepperNext rarr; /button /footer /section In the app.component.css file we can now style the stepper however we want: custom-stepper.component.css .example-container { border: 1px solid black; padding: 10px; margin: 10px; } .example-step-navigation-bar { display: flex; justify-content: flex-start; margin-top: 10px; } .example-active { color: blue; } .example-step { background: transparent; border: 0; margin: 0 10px; padding: 10px; color: black; } .example-step.example-active { color: blue; border-bottom: 1px solid blue; } .example-nav-button { background: transparent; border: 0; } Using our new custom stepper component Now we are ready to use our new custom stepper component and fill it with steps. Therefore we can, for example, add it to our app.component.html and define some steps: app.component.html app-custom-stepper cdk-step p This is any content of Step 1 /p /cdk-step cdk-step p This is any content of Step 2 /p /cdk-step /app-custom-stepper As you can see in this example, each step needs to be wrapped inside a cdk-step tag. If you want to iterate over your steps and use your own custom component you can do it, for example, this way: app-custom-stepper cdk-step *ngFor= let step of mySteps; let stepIndex = index my-step-component [step]= step /my-step-component /cdk-step /app-custom-stepper Linear mode The above example allows the user to freely navigate between all steps. The CdkStepper additionally provides the linear mode which requires the user to complete previous steps before proceeding. A simple example without using forms could look this way: app.component.html app-custom-stepper linear cdk-step editable= false [completed]= completed input type= text name= a value= Cannot proceed to next step / button (click)= completeStep() Complete step /button /cdk-step cdk-step editable= false input type= text name= b value= b / /cdk-step /app-custom-stepper app.component.ts export class AppComponent { completed = false; completeStep(): void { this.completed = true; } }","title":"6-creating-a-custom-stepper-using-the-cdk-stepper"},{"location":"site-files/guides/6-creating-a-custom-stepper-using-the-cdk-stepper/#creating-a-custom-stepper-using-the-cdk-stepper","text":"The CDK stepper allows to build a custom stepper which you can completely style yourself without any specific Material Design styling. In this guide, we'll learn how we can build our own custom stepper using the CDK stepper. Here is what we'll build by the end of this guide:","title":"Creating a custom stepper using the CDK stepper"},{"location":"site-files/guides/6-creating-a-custom-stepper-using-the-cdk-stepper/#create-our-custom-stepper-component","text":"Now we are ready to create our custom stepper component. Therefore, we need to create a new Angular component which extends CdkStepper : custom-stepper.component.ts @Component({ selector: app-custom-stepper , templateUrl: ./custom-stepper.component.html , styleUrls: [ ./custom-stepper.component.css ], // This custom stepper provides itself as CdkStepper so that it can be recognized // by other components. providers: [{ provide: CdkStepper, useExisting: CustomStepperComponent }] }) export class CustomStepperComponent extends CdkStepper { onClick(index: number): void { this.selectedIndex = index; } } After we've extended our component class from CdkStepper we can now access different properties from this class like linear , selectedIndex and steps which are defined in the API documentation . This is the HTML template of our custom stepper component: custom-stepper.component.html section class= container header h2 Step {{selectedIndex + 1}}/{{steps.length}} /h2 /header div [style.display]= selected ? 'block' : 'none' !-- Content from the CdkStep is projected here -- ng-container [ngTemplateOutlet]= selected.content /ng-container /div footer class= step-navigation-bar button class= nav-button cdkStepperPrevious larr; /button button class= step *ngFor= let step of steps; let i = index; [ngClass]= {'active': selectedIndex === i} (click)= onClick(i) Step {{i + 1}} /button button class= nav-button cdkStepperNext rarr; /button /footer /section In the app.component.css file we can now style the stepper however we want: custom-stepper.component.css .example-container { border: 1px solid black; padding: 10px; margin: 10px; } .example-step-navigation-bar { display: flex; justify-content: flex-start; margin-top: 10px; } .example-active { color: blue; } .example-step { background: transparent; border: 0; margin: 0 10px; padding: 10px; color: black; } .example-step.example-active { color: blue; border-bottom: 1px solid blue; } .example-nav-button { background: transparent; border: 0; }","title":"Create our custom stepper component"},{"location":"site-files/guides/6-creating-a-custom-stepper-using-the-cdk-stepper/#using-our-new-custom-stepper-component","text":"Now we are ready to use our new custom stepper component and fill it with steps. Therefore we can, for example, add it to our app.component.html and define some steps: app.component.html app-custom-stepper cdk-step p This is any content of Step 1 /p /cdk-step cdk-step p This is any content of Step 2 /p /cdk-step /app-custom-stepper As you can see in this example, each step needs to be wrapped inside a cdk-step tag. If you want to iterate over your steps and use your own custom component you can do it, for example, this way: app-custom-stepper cdk-step *ngFor= let step of mySteps; let stepIndex = index my-step-component [step]= step /my-step-component /cdk-step /app-custom-stepper","title":"Using our new custom stepper component"},{"location":"site-files/guides/6-creating-a-custom-stepper-using-the-cdk-stepper/#linear-mode","text":"The above example allows the user to freely navigate between all steps. The CdkStepper additionally provides the linear mode which requires the user to complete previous steps before proceeding. A simple example without using forms could look this way: app.component.html app-custom-stepper linear cdk-step editable= false [completed]= completed input type= text name= a value= Cannot proceed to next step / button (click)= completeStep() Complete step /button /cdk-step cdk-step editable= false input type= text name= b value= b / /cdk-step /app-custom-stepper app.component.ts export class AppComponent { completed = false; completeStep(): void { this.completed = true; } }","title":"Linear mode"},{"location":"site-files/guides/7-typography/","text":"Angular Material typography What is typography? Typography is a way of arranging type to make text legible, readable, and appealing when displayed. Angular Material's typography is based on the guidelines from the Material Design spec and is arranged into typography levels. Each level has a font-size , line-height and font-weight . The available levels are: Name CSS classes Description display-4 .mat-display-4 Large, one-off header, usually at the top of the page (e.g. a hero header). display-3 .mat-display-3 Large, one-off header, usually at the top of the page (e.g. a hero header). display-2 .mat-display-2 Large, one-off header, usually at the top of the page (e.g. a hero header). display-1 .mat-display-1 Large, one-off header, usually at the top of the page (e.g. a hero header). headline .mat-h1 , .mat-headline Section heading corresponding to the h1 tag. title .mat-h2 , .mat-title Section heading corresponding to the h2 tag. subheading-2 .mat-h3 , .mat-subheading-2 Section heading corresponding to the h3 tag. subheading-1 .mat-h4 , .mat-subheading-1 Section heading corresponding to the h4 tag. body-1 .mat-body , .mat-body-1 Base body text. body-2 .mat-body-strong , .mat-body-2 Bolder body text. caption .mat-small , .mat-caption Smaller body and hint text. button None. Used only in components. Buttons and anchors. input None. Used only in components. Form input fields. The typography levels are collected into a typography config which is used to generate the CSS. Usage To get started, you first include the Roboto font with the 300, 400 and 500 weights. You can host it yourself or include it from Google Fonts : link href= https://fonts.googleapis.com/css?family=Roboto:300,400,500 rel= stylesheet Now you can add the appropriate CSS classes to the elements that you want to style: h1 class= mat-display-1 Jackdaws love my big sphinx of quartz. /h1 h2 class= mat-h2 The quick brown fox jumps over the lazy dog. /h2 By default, Angular Material doesn't apply any global CSS. To apply the library's typographic styles more broadly, you can take advantage of the mat-typography CSS class. This class will style all descendant native elements. !-- By default, Angular Material applies no global styles to native elements. -- h1 This header is unstyled /h1 !-- Applying the mat-tyography class adds styles for native elements. -- section class= mat-typography h1 This header will be styled /h1 /section Customization Typography customization is an extension of Angular Material's Sass-based theming. Similar to creating a custom theme, you can create a custom typography configuration . @import '~@angular/material/theming'; // Define a custom typography config that overrides the font-family as well as the // `headlines` and `body-1` levels. $custom-typography: mat-typography-config( $font-family: 'Roboto, monospace', $headline: mat-typography-level(32px, 48px, 700), $body-1: mat-typography-level(16px, 24px, 500) ); As the above example demonstrates, a typography configuration is created by using the mat-typography-config function, which is given both the font-family and the set of typographic levels described earlier. Each typographic level is defined by the mat-typography-level function, which requires a font-size , line-height , and font-weight . Note that the font-family has to be in quotes. Once the custom typography definition is created, it can be consumed to generate styles via different Sass mixins. // Override typography CSS classes (e.g., mat-h1, mat-display-1, mat-typography, etc.). @include mat-base-typography($custom-typography); // Override typography for a specific Angular Material components. @include mat-checkbox-typography($custom-typography); // Override typography for all Angular Material, including mat-base-typography and all components. @include angular-material-typography($custom-typography); If you're using Material's theming, you can also pass in your typography config to the mat-core mixin: // Override the typography in the core CSS. @include mat-core($custom-typography); For more details about the typography functions and default config, see the source . Material typography in your custom CSS Angular Material includes typography utility mixins and functions that you can use to customize your own components: mat-font-size($config, $level) - Gets the font-size , based on the provided config and level. mat-font-family($config) - Gets the font-family , based on the provided config. mat-line-height($config, $level) - Gets the line-height , based on the provided config and level. mat-font-weight($config, $level) - Gets the font-weight , based on the provided config and level. mat-typography-level-to-styles($config, $level) - Mixin that takes in a configuration object and a typography level, and outputs a short-hand CSS font declaration. @import '~@angular/material/theming'; // Create a config with the default typography levels. $config: mat-typography-config(); // Custom header that uses only the Material `font-size` and `font-family`. .unicorn-header { font-size: mat-font-size($config, headline); font-family: mat-font-family($config); } // Custom title that uses all of the typography styles from the `title` level. .unicorn-title { @include mat-typography-level-to-styles($config, title); }","title":"7-typography"},{"location":"site-files/guides/7-typography/#angular-material-typography","text":"","title":"Angular Material typography"},{"location":"site-files/guides/7-typography/#what-is-typography","text":"Typography is a way of arranging type to make text legible, readable, and appealing when displayed. Angular Material's typography is based on the guidelines from the Material Design spec and is arranged into typography levels. Each level has a font-size , line-height and font-weight . The available levels are: Name CSS classes Description display-4 .mat-display-4 Large, one-off header, usually at the top of the page (e.g. a hero header). display-3 .mat-display-3 Large, one-off header, usually at the top of the page (e.g. a hero header). display-2 .mat-display-2 Large, one-off header, usually at the top of the page (e.g. a hero header). display-1 .mat-display-1 Large, one-off header, usually at the top of the page (e.g. a hero header). headline .mat-h1 , .mat-headline Section heading corresponding to the h1 tag. title .mat-h2 , .mat-title Section heading corresponding to the h2 tag. subheading-2 .mat-h3 , .mat-subheading-2 Section heading corresponding to the h3 tag. subheading-1 .mat-h4 , .mat-subheading-1 Section heading corresponding to the h4 tag. body-1 .mat-body , .mat-body-1 Base body text. body-2 .mat-body-strong , .mat-body-2 Bolder body text. caption .mat-small , .mat-caption Smaller body and hint text. button None. Used only in components. Buttons and anchors. input None. Used only in components. Form input fields. The typography levels are collected into a typography config which is used to generate the CSS.","title":"What is typography?"},{"location":"site-files/guides/7-typography/#usage","text":"To get started, you first include the Roboto font with the 300, 400 and 500 weights. You can host it yourself or include it from Google Fonts : link href= https://fonts.googleapis.com/css?family=Roboto:300,400,500 rel= stylesheet Now you can add the appropriate CSS classes to the elements that you want to style: h1 class= mat-display-1 Jackdaws love my big sphinx of quartz. /h1 h2 class= mat-h2 The quick brown fox jumps over the lazy dog. /h2 By default, Angular Material doesn't apply any global CSS. To apply the library's typographic styles more broadly, you can take advantage of the mat-typography CSS class. This class will style all descendant native elements. !-- By default, Angular Material applies no global styles to native elements. -- h1 This header is unstyled /h1 !-- Applying the mat-tyography class adds styles for native elements. -- section class= mat-typography h1 This header will be styled /h1 /section","title":"Usage"},{"location":"site-files/guides/7-typography/#customization","text":"Typography customization is an extension of Angular Material's Sass-based theming. Similar to creating a custom theme, you can create a custom typography configuration . @import '~@angular/material/theming'; // Define a custom typography config that overrides the font-family as well as the // `headlines` and `body-1` levels. $custom-typography: mat-typography-config( $font-family: 'Roboto, monospace', $headline: mat-typography-level(32px, 48px, 700), $body-1: mat-typography-level(16px, 24px, 500) ); As the above example demonstrates, a typography configuration is created by using the mat-typography-config function, which is given both the font-family and the set of typographic levels described earlier. Each typographic level is defined by the mat-typography-level function, which requires a font-size , line-height , and font-weight . Note that the font-family has to be in quotes. Once the custom typography definition is created, it can be consumed to generate styles via different Sass mixins. // Override typography CSS classes (e.g., mat-h1, mat-display-1, mat-typography, etc.). @include mat-base-typography($custom-typography); // Override typography for a specific Angular Material components. @include mat-checkbox-typography($custom-typography); // Override typography for all Angular Material, including mat-base-typography and all components. @include angular-material-typography($custom-typography); If you're using Material's theming, you can also pass in your typography config to the mat-core mixin: // Override the typography in the core CSS. @include mat-core($custom-typography); For more details about the typography functions and default config, see the source .","title":"Customization"},{"location":"site-files/guides/7-typography/#material-typography-in-your-custom-css","text":"Angular Material includes typography utility mixins and functions that you can use to customize your own components: mat-font-size($config, $level) - Gets the font-size , based on the provided config and level. mat-font-family($config) - Gets the font-family , based on the provided config. mat-line-height($config, $level) - Gets the line-height , based on the provided config and level. mat-font-weight($config, $level) - Gets the font-weight , based on the provided config and level. mat-typography-level-to-styles($config, $level) - Mixin that takes in a configuration object and a typography level, and outputs a short-hand CSS font declaration. @import '~@angular/material/theming'; // Create a config with the default typography levels. $config: mat-typography-config(); // Custom header that uses only the Material `font-size` and `font-family`. .unicorn-header { font-size: mat-font-size($config, headline); font-family: mat-font-family($config); } // Custom title that uses all of the typography styles from the `title` level. .unicorn-title { @include mat-typography-level-to-styles($config, title); }","title":"Material typography in your custom CSS"},{"location":"site-files/guides/8-elevation/","text":"Angular Material's elevation classes and mixins allow you to add separation between elements along the z-axis. All material design elements have resting elevations. In addition, some elements may change their elevation in response to user interaction. The Material Design spec explains how to best use elevation. Angular Material provides two ways to control the elevation of elements: predefined CSS classes and mixins. Predefined CSS classes The easiest way to add elevation to an element is to simply add one of the predefined CSS classes mat-elevation-z# where # is the elevation number you want, 0-24. Dynamic elevation can be achieved by switching elevation classes: div [class.mat-elevation-z2]= !isActive [class.mat-elevation-z8]= isActive /div Mixins Elevations can also be added in CSS via the mat-elevation mixin, which takes a number 0-24 indicating the elevation of the element as well as optional arguments for the elevation shadow's color tone and opacity. Since an elevation shadow consists of multiple shadow components of varying opacities, the $opacity argument of the mixin is considered a factor by which to scale these initial values rather than an absolute value. In order to use the mixin, you must import ~@angular/material/theming : @import '~@angular/material/theming'; .my-class-with-default-shadow { // Adds a shadow for elevation level 2 with default color and full opacity: @include mat-elevation(2); } .my-class-with-custom-shadow { // Adds a shadow for elevation level 2 with color #e91e63 and 80% of the default opacity: @include mat-elevation(2, #e91e63, 0.8); } For convenience, you can use the mat-elevation-transition mixin to add a transition when the elevation changes: @import '~@angular/material/theming'; .my-class { @include mat-elevation-transition; @include mat-elevation(2); :active { @include mat-elevation(8); } }","title":"8-elevation"},{"location":"site-files/guides/8-elevation/#predefined-css-classes","text":"The easiest way to add elevation to an element is to simply add one of the predefined CSS classes mat-elevation-z# where # is the elevation number you want, 0-24. Dynamic elevation can be achieved by switching elevation classes: div [class.mat-elevation-z2]= !isActive [class.mat-elevation-z8]= isActive /div","title":"Predefined CSS classes"},{"location":"site-files/guides/8-elevation/#mixins","text":"Elevations can also be added in CSS via the mat-elevation mixin, which takes a number 0-24 indicating the elevation of the element as well as optional arguments for the elevation shadow's color tone and opacity. Since an elevation shadow consists of multiple shadow components of varying opacities, the $opacity argument of the mixin is considered a factor by which to scale these initial values rather than an absolute value. In order to use the mixin, you must import ~@angular/material/theming : @import '~@angular/material/theming'; .my-class-with-default-shadow { // Adds a shadow for elevation level 2 with default color and full opacity: @include mat-elevation(2); } .my-class-with-custom-shadow { // Adds a shadow for elevation level 2 with color #e91e63 and 80% of the default opacity: @include mat-elevation(2, #e91e63, 0.8); } For convenience, you can use the mat-elevation-transition mixin to add a transition when the elevation changes: @import '~@angular/material/theming'; .my-class { @include mat-elevation-transition; @include mat-elevation(2); :active { @include mat-elevation(8); } }","title":"Mixins"},{"location":"site-files/guides/9-creating-a-custom-form-field-control/","text":"Creating a custom form field control It is possible to create custom form field controls that can be used inside mat-form-field . This can be useful if you need to create a component that shares a lot of common behavior with a form field, but adds some additional logic. For example in this guide we'll learn how to create a custom input for inputting US telephone numbers and hook it up to work with mat-form-field . Here is what we'll build by the end of this guide: In order to learn how to build custom form field controls, let's start with a simple input component that we want to work inside the form field. For example, a phone number input that segments the parts of the number into their own inputs. (Note: this is not intended to be a robust component, just a starting point for us to learn.) class MyTel { constructor(public area: string, public exchange: string, public subscriber: string) {} } @Component({ selector: 'example-tel-input', template: ` div [formGroup]= parts input class= area formControlName= area size= 3 span ndash; /span input class= exchange formControlName= exchange size= 3 span ndash; /span input class= subscriber formControlName= subscriber size= 4 /div `, styles: [` div { display: flex; } input { border: none; background: none; padding: 0; outline: none; font: inherit; text-align: center; } `], }) class MyTelInput { parts: FormGroup; @Input() get value(): MyTel | null { let n = this.parts.value; if (n.area.length == 3 n.exchange.length == 3 n.subscriber.length == 4) { return new MyTel(n.area, n.exchange, n.subscriber); } return null; } set value(tel: MyTel | null) { tel = tel || new MyTel('', '', ''); this.parts.setValue({area: tel.area, exchange: tel.exchange, subscriber: tel.subscriber}); } constructor(fb: FormBuilder) { this.parts = fb.group({ 'area': '', 'exchange': '', 'subscriber': '', }); } } Providing our component as a MatFormFieldControl The first step is to provide our new component as an implementation of the MatFormFieldControl interface that the mat-form-field knows how to work with. To do this, we will have our class implement MatFormFieldControl . Since this is a generic interface, we'll need to include a type parameter indicating the type of data our control will work with, in this case MyTel . We then add a provider to our component so that the form field will be able to inject it as a MatFormFieldControl . @Component({ ... providers: [{provide: MatFormFieldControl, useExisting: MyTelInput}], }) class MyTelInput implements MatFormFieldControl MyTel { ... } This sets up our component so it can work with mat-form-field , but now we need to implement the various methods and properties declared by the interface we just implemented. To learn more about the MatFormFieldControl interface, see the form field API documentation . Implementing the methods and properties of MatFormFieldControl value This property allows someone to set or get the value of our control. Its type should be the same type we used for the type parameter when we implemented MatFormFieldControl . Since our component already has a value property, we don't need to do anything for this one. stateChanges Because the mat-form-field uses the OnPush change detection strategy, we need to let it know when something happens in the form field control that may require the form field to run change detection. We do this via the stateChanges property. So far the only thing the form field needs to know about is when the value changes. We'll need to emit on the stateChanges stream when that happens, and as we continue flushing out these properties we'll likely find more places we need to emit. We should also make sure to complete stateChanges when our component is destroyed. stateChanges = new Subject void (); set value(tel: MyTel | null) { ... this.stateChanges.next(); } ngOnDestroy() { this.stateChanges.complete(); } id This property should return the ID of an element in the component's template that we want the mat-form-field to associate all of its labels and hints with. In this case, we'll use the host element and just generate a unique ID for it. static nextId = 0; @HostBinding() id = `example-tel-input-${MyTelInput.nextId++}`; placeholder This property allows us to tell the mat-form-field what to use as a placeholder. In this example, we'll do the same thing as matInput and mat-select and allow the user to specify it via an @Input() . Since the value of the placeholder may change over time, we need to make sure to trigger change detection in the parent form field by emitting on the stateChanges stream when the placeholder changes. @Input() get placeholder() { return this._placeholder; } set placeholder(plh) { this._placeholder = plh; this.stateChanges.next(); } private _placeholder: string; ngControl This property allows the form field control to specify the @angular/forms control that is bound to this component. Since we haven't set up our component to act as a ControlValueAccessor , we'll just set this to null in our component. ngControl: NgControl = null; It is likely you will want to implement ControlValueAccessor so that your component can work with formControl and ngModel . If you do implement ControlValueAccessor you will need to get a reference to the NgControl associated with your control and make it publicly available. The easy way is to add it as a public property to your constructor and let dependency injection handle it: constructor( ..., @Optional() @Self() public ngControl: NgControl, ..., ) { } Note that if your component implements ControlValueAccessor , it may already be set up to provide NG_VALUE_ACCESSOR (in the providers part of the component's decorator, or possibly in a module declaration). If so you may get a cannot instantiate cyclic dependency error. To resolve this, remove the NG_VALUE_ACCESSOR provider and instead set the value accessor directly: @Component({ ..., providers: [ ..., // Remove this. // { // provide: NG_VALUE_ACCESSOR, // useExisting: forwardRef(() = MatFormFieldControl), // multi: true, // }, ], }) class MyTelInput implements MatFormFieldControl MyTel { constructor( ..., @Optional() @Self() public ngControl: NgControl, ..., ) { // Replace the provider from above with this. if (this.ngControl != null) { // Setting the value accessor directly (instead of using // the providers) to avoid running into a circular import. this.ngControl.valueAccessor = this; } } } For additional information about ControlValueAccessor see the API docs . focused This property indicates whether or not the form field control should be considered to be in a focused state. When it is in a focused state, the form field is displayed with a solid color underline. For the purposes of our component, we want to consider it focused if any of the part inputs are focused. We can use the FocusMonitor from @angular/cdk to easily check this. We also need to remember to emit on the stateChanges stream so change detection can happen. focused = false; constructor(fb: FormBuilder, private fm: FocusMonitor, private elRef: ElementRef HTMLElement ) { ... fm.monitor(elRef.nativeElement, true).subscribe(origin = { this.focused = !!origin; this.stateChanges.next(); }); } ngOnDestroy() { ... this.fm.stopMonitoring(this.elRef.nativeElement); } empty This property indicates whether the form field control is empty. For our control, we'll consider it empty if all of the parts are empty. get empty() { let n = this.parts.value; return !n.area !n.exchange !n.subscriber; } shouldLabelFloat This property is used to indicate whether the label should be in the floating position. We'll use the same logic as matInput and float the placeholder when the input is focused or non-empty. Since the placeholder will be overlapping our control when when it's not floating, we should hide the \u2013 characters when it's not floating. @HostBinding('class.floating') get shouldLabelFloat() { return this.focused || !this.empty; } span { opacity: 0; transition: opacity 200ms; } :host.floating span { opacity: 1; } required This property is used to indicate whether the input is required. mat-form-field uses this information to add a required indicator to the placeholder. Again, we'll want to make sure we run change detection if the required state changes. @Input() get required() { return this._required; } set required(req) { this._required = coerceBooleanProperty(req); this.stateChanges.next(); } private _required = false; disabled This property tells the form field when it should be in the disabled state. In addition to reporting the right state to the form field, we need to set the disabled state on the individual inputs that make up our component. @Input() get disabled(): boolean { return this._disabled; } set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); this._disabled ? this.parts.disable() : this.parts.enable(); this.stateChanges.next(); } private _disabled = false; errorState This property indicates whether the associated NgControl is in an error state. Since we're not using an NgControl in this example, we don't need to do anything other than just set it to false . errorState = false; controlType This property allows us to specify a unique string for the type of control in form field. The mat-form-field will add an additional class based on this type that can be used to easily apply special styles to a mat-form-field that contains a specific type of control. In this example we'll use example-tel-input as our control type which will result in the form field adding the class mat-form-field-example-tel-input . controlType = 'example-tel-input'; setDescribedByIds(ids: string[]) This method is used by the mat-form-field to specify the IDs that should be used for the aria-describedby attribute of your component. The method has one parameter, the list of IDs, we just need to apply the given IDs to our host element. @HostBinding('attr.aria-describedby') describedBy = ''; setDescribedByIds(ids: string[]) { this.describedBy = ids.join(' '); } onContainerClick(event: MouseEvent) This method will be called when the form field is clicked on. It allows your component to hook in and handle that click however it wants. The method has one parameter, the MouseEvent for the click. In our case we'll just focus the first input if the user isn't about to click an input anyways. onContainerClick(event: MouseEvent) { if ((event.target as Element).tagName.toLowerCase() != 'input') { this.elRef.nativeElement.querySelector('input').focus(); } } Trying it out Now that we've fully implemented the interface, we're ready to try our component out! All we need to do is place it inside of a mat-form-field mat-form-field example-tel-input /example-tel-input /mat-form-field We also get all of the features that come with mat-form-field such as floating placeholder, prefix, suffix, hints, and errors (if we've given the form field an NgControl and correctly report the error state). mat-form-field example-tel-input placeholder= Phone number required /example-tel-input mat-icon matPrefix phone /mat-icon mat-hint Include area code /mat-hint /mat-form-field","title":"9-creating-a-custom-form-field-control"},{"location":"site-files/guides/9-creating-a-custom-form-field-control/#creating-a-custom-form-field-control","text":"It is possible to create custom form field controls that can be used inside mat-form-field . This can be useful if you need to create a component that shares a lot of common behavior with a form field, but adds some additional logic. For example in this guide we'll learn how to create a custom input for inputting US telephone numbers and hook it up to work with mat-form-field . Here is what we'll build by the end of this guide: In order to learn how to build custom form field controls, let's start with a simple input component that we want to work inside the form field. For example, a phone number input that segments the parts of the number into their own inputs. (Note: this is not intended to be a robust component, just a starting point for us to learn.) class MyTel { constructor(public area: string, public exchange: string, public subscriber: string) {} } @Component({ selector: 'example-tel-input', template: ` div [formGroup]= parts input class= area formControlName= area size= 3 span ndash; /span input class= exchange formControlName= exchange size= 3 span ndash; /span input class= subscriber formControlName= subscriber size= 4 /div `, styles: [` div { display: flex; } input { border: none; background: none; padding: 0; outline: none; font: inherit; text-align: center; } `], }) class MyTelInput { parts: FormGroup; @Input() get value(): MyTel | null { let n = this.parts.value; if (n.area.length == 3 n.exchange.length == 3 n.subscriber.length == 4) { return new MyTel(n.area, n.exchange, n.subscriber); } return null; } set value(tel: MyTel | null) { tel = tel || new MyTel('', '', ''); this.parts.setValue({area: tel.area, exchange: tel.exchange, subscriber: tel.subscriber}); } constructor(fb: FormBuilder) { this.parts = fb.group({ 'area': '', 'exchange': '', 'subscriber': '', }); } }","title":"Creating a custom form field control"},{"location":"site-files/guides/9-creating-a-custom-form-field-control/#providing-our-component-as-a-matformfieldcontrol","text":"The first step is to provide our new component as an implementation of the MatFormFieldControl interface that the mat-form-field knows how to work with. To do this, we will have our class implement MatFormFieldControl . Since this is a generic interface, we'll need to include a type parameter indicating the type of data our control will work with, in this case MyTel . We then add a provider to our component so that the form field will be able to inject it as a MatFormFieldControl . @Component({ ... providers: [{provide: MatFormFieldControl, useExisting: MyTelInput}], }) class MyTelInput implements MatFormFieldControl MyTel { ... } This sets up our component so it can work with mat-form-field , but now we need to implement the various methods and properties declared by the interface we just implemented. To learn more about the MatFormFieldControl interface, see the form field API documentation .","title":"Providing our component as a MatFormFieldControl"},{"location":"site-files/guides/9-creating-a-custom-form-field-control/#implementing-the-methods-and-properties-of-matformfieldcontrol","text":"","title":"Implementing the methods and properties of MatFormFieldControl"},{"location":"site-files/guides/9-creating-a-custom-form-field-control/#value","text":"This property allows someone to set or get the value of our control. Its type should be the same type we used for the type parameter when we implemented MatFormFieldControl . Since our component already has a value property, we don't need to do anything for this one.","title":"value"},{"location":"site-files/guides/9-creating-a-custom-form-field-control/#statechanges","text":"Because the mat-form-field uses the OnPush change detection strategy, we need to let it know when something happens in the form field control that may require the form field to run change detection. We do this via the stateChanges property. So far the only thing the form field needs to know about is when the value changes. We'll need to emit on the stateChanges stream when that happens, and as we continue flushing out these properties we'll likely find more places we need to emit. We should also make sure to complete stateChanges when our component is destroyed. stateChanges = new Subject void (); set value(tel: MyTel | null) { ... this.stateChanges.next(); } ngOnDestroy() { this.stateChanges.complete(); }","title":"stateChanges"},{"location":"site-files/guides/9-creating-a-custom-form-field-control/#id","text":"This property should return the ID of an element in the component's template that we want the mat-form-field to associate all of its labels and hints with. In this case, we'll use the host element and just generate a unique ID for it. static nextId = 0; @HostBinding() id = `example-tel-input-${MyTelInput.nextId++}`;","title":"id"},{"location":"site-files/guides/9-creating-a-custom-form-field-control/#placeholder","text":"This property allows us to tell the mat-form-field what to use as a placeholder. In this example, we'll do the same thing as matInput and mat-select and allow the user to specify it via an @Input() . Since the value of the placeholder may change over time, we need to make sure to trigger change detection in the parent form field by emitting on the stateChanges stream when the placeholder changes. @Input() get placeholder() { return this._placeholder; } set placeholder(plh) { this._placeholder = plh; this.stateChanges.next(); } private _placeholder: string;","title":"placeholder"},{"location":"site-files/guides/9-creating-a-custom-form-field-control/#ngcontrol","text":"This property allows the form field control to specify the @angular/forms control that is bound to this component. Since we haven't set up our component to act as a ControlValueAccessor , we'll just set this to null in our component. ngControl: NgControl = null; It is likely you will want to implement ControlValueAccessor so that your component can work with formControl and ngModel . If you do implement ControlValueAccessor you will need to get a reference to the NgControl associated with your control and make it publicly available. The easy way is to add it as a public property to your constructor and let dependency injection handle it: constructor( ..., @Optional() @Self() public ngControl: NgControl, ..., ) { } Note that if your component implements ControlValueAccessor , it may already be set up to provide NG_VALUE_ACCESSOR (in the providers part of the component's decorator, or possibly in a module declaration). If so you may get a cannot instantiate cyclic dependency error. To resolve this, remove the NG_VALUE_ACCESSOR provider and instead set the value accessor directly: @Component({ ..., providers: [ ..., // Remove this. // { // provide: NG_VALUE_ACCESSOR, // useExisting: forwardRef(() = MatFormFieldControl), // multi: true, // }, ], }) class MyTelInput implements MatFormFieldControl MyTel { constructor( ..., @Optional() @Self() public ngControl: NgControl, ..., ) { // Replace the provider from above with this. if (this.ngControl != null) { // Setting the value accessor directly (instead of using // the providers) to avoid running into a circular import. this.ngControl.valueAccessor = this; } } } For additional information about ControlValueAccessor see the API docs .","title":"ngControl"},{"location":"site-files/guides/9-creating-a-custom-form-field-control/#focused","text":"This property indicates whether or not the form field control should be considered to be in a focused state. When it is in a focused state, the form field is displayed with a solid color underline. For the purposes of our component, we want to consider it focused if any of the part inputs are focused. We can use the FocusMonitor from @angular/cdk to easily check this. We also need to remember to emit on the stateChanges stream so change detection can happen. focused = false; constructor(fb: FormBuilder, private fm: FocusMonitor, private elRef: ElementRef HTMLElement ) { ... fm.monitor(elRef.nativeElement, true).subscribe(origin = { this.focused = !!origin; this.stateChanges.next(); }); } ngOnDestroy() { ... this.fm.stopMonitoring(this.elRef.nativeElement); }","title":"focused"},{"location":"site-files/guides/9-creating-a-custom-form-field-control/#empty","text":"This property indicates whether the form field control is empty. For our control, we'll consider it empty if all of the parts are empty. get empty() { let n = this.parts.value; return !n.area !n.exchange !n.subscriber; }","title":"empty"},{"location":"site-files/guides/9-creating-a-custom-form-field-control/#shouldlabelfloat","text":"This property is used to indicate whether the label should be in the floating position. We'll use the same logic as matInput and float the placeholder when the input is focused or non-empty. Since the placeholder will be overlapping our control when when it's not floating, we should hide the \u2013 characters when it's not floating. @HostBinding('class.floating') get shouldLabelFloat() { return this.focused || !this.empty; } span { opacity: 0; transition: opacity 200ms; } :host.floating span { opacity: 1; }","title":"shouldLabelFloat"},{"location":"site-files/guides/9-creating-a-custom-form-field-control/#required","text":"This property is used to indicate whether the input is required. mat-form-field uses this information to add a required indicator to the placeholder. Again, we'll want to make sure we run change detection if the required state changes. @Input() get required() { return this._required; } set required(req) { this._required = coerceBooleanProperty(req); this.stateChanges.next(); } private _required = false;","title":"required"},{"location":"site-files/guides/9-creating-a-custom-form-field-control/#disabled","text":"This property tells the form field when it should be in the disabled state. In addition to reporting the right state to the form field, we need to set the disabled state on the individual inputs that make up our component. @Input() get disabled(): boolean { return this._disabled; } set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); this._disabled ? this.parts.disable() : this.parts.enable(); this.stateChanges.next(); } private _disabled = false;","title":"disabled"},{"location":"site-files/guides/9-creating-a-custom-form-field-control/#errorstate","text":"This property indicates whether the associated NgControl is in an error state. Since we're not using an NgControl in this example, we don't need to do anything other than just set it to false . errorState = false;","title":"errorState"},{"location":"site-files/guides/9-creating-a-custom-form-field-control/#controltype","text":"This property allows us to specify a unique string for the type of control in form field. The mat-form-field will add an additional class based on this type that can be used to easily apply special styles to a mat-form-field that contains a specific type of control. In this example we'll use example-tel-input as our control type which will result in the form field adding the class mat-form-field-example-tel-input . controlType = 'example-tel-input';","title":"controlType"},{"location":"site-files/guides/9-creating-a-custom-form-field-control/#setdescribedbyidsids-string","text":"This method is used by the mat-form-field to specify the IDs that should be used for the aria-describedby attribute of your component. The method has one parameter, the list of IDs, we just need to apply the given IDs to our host element. @HostBinding('attr.aria-describedby') describedBy = ''; setDescribedByIds(ids: string[]) { this.describedBy = ids.join(' '); }","title":"setDescribedByIds(ids: string[])"},{"location":"site-files/guides/9-creating-a-custom-form-field-control/#oncontainerclickevent-mouseevent","text":"This method will be called when the form field is clicked on. It allows your component to hook in and handle that click however it wants. The method has one parameter, the MouseEvent for the click. In our case we'll just focus the first input if the user isn't about to click an input anyways. onContainerClick(event: MouseEvent) { if ((event.target as Element).tagName.toLowerCase() != 'input') { this.elRef.nativeElement.querySelector('input').focus(); } }","title":"onContainerClick(event: MouseEvent)"},{"location":"site-files/guides/9-creating-a-custom-form-field-control/#trying-it-out","text":"Now that we've fully implemented the interface, we're ready to try our component out! All we need to do is place it inside of a mat-form-field mat-form-field example-tel-input /example-tel-input /mat-form-field We also get all of the features that come with mat-form-field such as floating placeholder, prefix, suffix, hints, and errors (if we've given the form field an NgControl and correctly report the error state). mat-form-field example-tel-input placeholder= Phone number required /example-tel-input mat-icon matPrefix phone /mat-icon mat-hint Include area code /mat-hint /mat-form-field","title":"Trying it out"},{"location":"site-files/project/0-CHANGELOG/","text":"7.3.3 \"cashmere-armor\" (2019-02-20) Bug Fixes theming : fix errors when building theme using CSS variables ( #15140 ) ( 96f6e06 ), closes #15107 bidi: handle uppercase values correctly ( #14773 ) ( 0029cde ) dialog: don't assign aria-label to close button if button has text ( #11093 ) ( 9bf368d ), closes #11084 list: disableRipple on selection list not affecting list options after init ( #14858 ) ( edf4541 ) schematics: do not generate invalid stylesheet files ( #15235 ) ( e7422e4 ), closes #15164 table: add missing rowgroup roles ( #15131 ) ( 2c7bc1c ) 7.3.2 \"jute-box\" (2019-02-11) Bug Fixes autocomplete: set aria-haspopup ( #15079 ) ( 45bd5d4 ) checkbox: unable to click to select if text is marked ( #15062 ) ( 4819c5b ), closes #14967 drag-drop: set class when item or list is disabled ( #14769 ) ( c543cf6 ), closes #14760 drag-drop: standalone draggable drag class not being applied with OnPush change detection ( #14727 ) ( 2f63195 ) icon: add notranslate class ( #14889 ) ( 39fa928 ) menu: prevent removal of mat-elevation class ( #15035 ) ( 8069641 ) slide-toggle: input element should use switch role ( #15073 ) ( 3af7748 ), closes #14949 tree: opposite direction padding not being reset on change ( #14816 ) ( ae4a5ae ) 7.3.1 \"liquidcrystal-sandwich\" (2019-02-04) Bug Fixes button: not updating DOM node name if group name changes ( #14963 ) ( 37732cb ) cdk-stepper: coercing selectedIndex value to a Number ( #14817 ) ( b64c08d ) checkbox: not marked as touched immediately on blur with OnPush change detection ( #15001 ) ( 916c532 ), closes #14980 chips: newly-added chips not being disabled when added to a disable list ( #14976 ) ( c23512a ) examples: fix form-field custom control disabled input ( #14957 ) ( ce3926d ), closes /github.com/angular/angular/blob/e2c98fbe11272295c3827b0e54f859d283cd32bf/packages/forms/src/directives/reactive_errors.ts#L64 list: selection list not picking up indirect descendants ( #15003 ) ( 6a07d0d ), closes #15000 MatPseudoCheckbox: fix checkmark pseudo-element box-sizing ( #14971 ) ( ba6b405 ) overlay: unnecessarily pushing overlay if it is exactly as wide as the viewport ( #14975 ) ( f4b4e61 ), closes #14968 radio: not updating DOM node name if group name changes ( #14950 ) ( 4d5c5d5 ) radio: unable to click to select button if text is marked ( #14967 ) ( 81380d2 ), closes #14753 slider: focus ring showing when ancestor has focus monitoring ( #14960 ) ( 2ec9dff ), closes #14958 table: allow for a caption to be projected ( #14965 ) ( a8a6617 ), closes #14948 table: Clarify unknown table column error ( #14947 ) ( 2782273 ) tree,scrolling: don't require user DataSource to extend DataSource ( #14966 ) ( 0f9926a ) 7.3.0 \"pyrite-pixie\" (2019-01-28) Bug Fixes autocomplete: not updating origin if it changes after init ( #14677 ) ( 4913c36 ) bottom-sheet: allow disableClose to be updated after opened ( #14711 ) ( 3d3179f ), closes #14708 button: focus indication hard to see in high contrast mode ( #13259 ) ( fffbcb1 ) button-toggle: remove references to selected toggle on destroy ( #14627 ) ( 98f0142 ) datepicker: update validation when switching from null to error input ( #14423 ) ( 5aefe60 ) drag-drop: apply translation transform before user transforms ( #14712 ) ( 349675a ), closes #14699 drag-drop: dragging styling not being reset in some cases with OnPush change detection ( #14725 ) ( 1d4bb18 ) drag-drop: incorrectly preserving transform if root element changes ( #14697 ) ( 3656a4e ) drag-drop: restore initial transform when resetting ( #14701 ) ( 005fb46 ) drag-drop: unable to move item into connected container by passing through another container ( #14651 ) ( 0bd93dd ), closes #14645 focus-trap: apply aria-hidden to focus trap tab anchors ( #14644 ) ( f66302d ) icon: clean up cached references in icon registry on destroy ( #14801 ) ( f6b4288 ) list: action list button outline not being reset on firefox ( #14693 ) ( 73d0fb9 ) list: deselect option if value doesn't match up ( #14800 ) ( 551ded5 ), closes #14734 list: disableRipple on list input not taking effect after init ( #14836 ) ( 463ac9e ), closes #14824 menu: not unsubscribing from close stream if trigger is destroyed ( #14107 ) ( 80f510f ) overlay: not sizing flexible overlay correctly when opening downwards on a scrollable page ( #14672 ) ( 40f8b20 ) overlay: reset transform when disposing of position strategy ( #14660 ) ( 86c530e ), closes #14657 overlay: update size if dimensions change in overlay directives ( #14610 ) ( c92d8c9 ), closes #7811 slide-toggle: use default hue for thumb in dark theme ( #14230 ) ( 7d96ed3 ), closes #14192 sort: extra Firefox focus outline not being reset ( #14733 ) ( 027d4f4 ) stepper: ensure step state is not minified ( #14933 ) ( e7b0e40 ) table: not re-rendering when switching to a smaller set of data than the current page ( #14665 ) ( a31a2ff ), closes #12586 #14010 tabs: better handling of animationDuration without units ( #14778 ) ( 6f49813 ), closes #13428 tabs: don't handle keyboard events with modifier keys ( #14234 ) ( 76cb9d0 ) tabs: pagination not working correctly on chrome in rtl mode ( #14690 ) ( 220e6b2 ), closes #14689 tooltip: afterHidden stream not being completed ( #14620 ) ( 0394d59 ) Features dialog: support adding and removing classes via dialogRef ( #14772 ) ( b62f3f3 ), closes #6206 drag-drop: add service for attaching drag drop to arbitrary DOM nodes ( #14437 ) ( 5a18ea6 ) overlay: allow for connected overlay to be positioned relative to a point ( #14616 ) ( 651549f ), closes #5007 ripples: support updating global ripple options at runtime ( #14705 ) ( 4f755cf ), closes #9729 tabs: add automatic scrolling when holding down paginator ( #14632 ) ( e661317 ), closes #6510 tooltip: allow for default position to be configured ( #14872 ) ( 342e6f0 ), closes #14862 7.2.1 \"acrylic-axolotl\" (2019-01-07) Bug Fixes a11y: remove listeners when focus trap anchors are removed ( #14629 ) ( 17bb9c3 ) autocomplete: adding aria-activedescendant while closed if autoActiveFirstOption is enabled ( #14455 ) ( f3065cc ), closes #14453 checkbox: incorrect color for disabled indeterminate checkbox ( #14478 ) ( 0398d53 ), closes #14415 datepicker: native date adapter not preserving time when cloning ( #14691 ) ( 9e3a77b ) dialog: complete injectable streams on destroy ( #14254 ) ( e673608 ) drag-drop: don't disable native drag interactions if dragging is disabled ( #14233 ) ( 9fa3376 ) drag-drop: update root element if selector changes ( #14426 ) ( 14b90db ) form-field: proper arrow color for native select ( #14490 ) ( 3824a05 ) input: unable to reset focused state of readonly input ( #14698 ) ( 98711d7 ) list: add hover and focus indication in high contrast mode ( #14637 ) ( 3c71348 ) menu: hasBackdrop not being updated after first open ( #14561 ) ( 268b0e8 ), closes #14560 menu: scroll position jumping to top after animation is done on scrollable menu ( #14190 ) ( 37a7080 ), closes #11859 #11790 moment-adapter: incorrectly deserializing moment dates and not setting locale on deserialized values ( #14685 ) ( 36db1c0 ) overlay: not updating hasBackdrop after first open ( #14562 ) ( 61d3cf8 ), closes #14561 radio: host element unable to receive focus events ( #14472 ) ( 8c35917 ), closes #13323 #13953 select: announce value changes with arrow keys while closed ( #14540 ) ( 3f9a125 ) select: don't shift arrow if there is no label ( #14607 ) ( 7188719 ), closes #13907 select: form field state not updated if options are reset ( #14720 ) ( 391a9fd ), closes #14709 slider: don't handle keyboard events with modifier keys ( #14675 ) ( 7d2748e ) typography: deprecation warning in latest sass version ( #14673 ) ( 65ecb08 ), closes #14636 expansion-panel: add missing injection token for configuring the default options ( #14384 ) ( a389704 ), closes #14383 7.2.0 \"gold-snowman\" (2018-12-18) Bug Fixes a11y: inconsistent runtime value for ListKeyManager.activeItem ( #14154 ) ( c4b3484 ), closes #14152 autocomplete: update template when changing autocomplete in trigger ( #13814 ) ( 904a5ea ) badge: aria-label not being updated if description changes ( #14393 ) ( ab78183 ) bottom-sheet: bottom-sheet content not being read out by screen readers ( #14534 ) ( 9485aff ), closes #10591 cdk/stepper: exported injection token referring to Material ( #14339 ) ( b584888 ) chips: don't handle separator keys while pressing modifiers ( #14424 ) ( d1cec1f ) drag-drop: account for out of view container and stacking order ( #14257 ) ( c5be8d3 ), closes #14231 drag-drop: error on touch end ( #14392 ) ( 53cecbb ), closes #14390 drag-drop: handle placeholder and preview templates changing after init ( #14541 ) ( bfacbb5 ) drag-drop: prevent text selection while dragging on Safari ( #14405 ) ( 220e388 ), closes #14403 drag-drop: showing touch device tap highlight when using a handle ( #14549 ) ( 8a3d21a ) drag-drop: throw better error when attaching to non-element node ( #14221 ) ( 31f0e6d ) drag-drop: unable to stop dragging after quick double click ( #14506 ) ( fbb2a13 ) drawer: ensure all observables are unsubscribed ( #13378 ) ( f7dcc27 ) form-field: long labels and option values going under select arrow ( #14268 ) ( 166279b ) form-field: native select label floating incorrectly when invalid value is set ( #14263 ) ( 9c65c87 ) form-field: outline gap not being calculated when element starts off invisible ( #13477 ) ( e579181 ), closes #13328 form-field: outline gap not being recalculated on direction changes ( #13478 ) ( b78a750 ) grid-list: allow more units for gutter width and row height ( #14341 ) ( f176119 ) menu: accidentally tapping on sub-menu content that overlaps trigger on touch devices ( #14538 ) ( f2a06ab ) menu: reduce specificity of icon selector ( #14389 ) ( 74e945a ) menu: unable to set icon color dynamically ( #14161 ) ( 48e4f65 ), closes #14151 schematics: drag-drop schematic two consecutive commas ( #14446 ) ( 35fd998 ) schematics: two consecutive commas generated ( #14371 ) ( dd6065c ), closes #14366 sidenav: content margins not updated on viewport changes ( #14089 ) ( b15392d ) snack-bar: announcing same message twice to screen readers ( #13298 ) ( 3fb4b23 ) stepper: ignoring custom falsy value for hasError ( #14337 ) ( 7fac915 ), closes #14333 text-field: add fallback for browsers that don't support requestAnimationFrame ( #14519 ) ( c94812d ) tree: allow tree node to have undefined child or null child ( #14482 ) ( eeda91d ) tree: handle null children in nested tree ( #14547 ) ( 364376e ), closes #10886 #14545 reference symbols for example components rather than providing a string of the component name ( #13992 ) ( d0d97c3 ) workaround for es2015 inheritance not always working ( #13834 ) ( a22a9fa ) Features drag-drop: add class to indicate whether a container can receive an item ( #14532 ) ( c6dc070 ), closes #14439 drag-drop: add released event ( #14513 ) ( 792d536 ), closes #14498 drag-drop: add the ability to constrain dragging to an element ( #14242 ) ( 8432e80 ), closes #14211 drag-drop: allow entire group of drop lists to be disabled ( #14179 ) ( 94e76de ) drag-drop: indicate in dropped event whether item was dropped outside of container ( #14140 ) ( 42de6a2 ), closes #14136 7.1.1 \"fondant-friendship\" (2018-12-03) Bug Fixes a11y: don't handle disallowed modifier keys in typeahead mode ( #14301 ) ( 700f20f ), closes #14274 badge: badge instances not being cleaned up on destroy ( #14265 ) ( da3776f ) checkbox: poor color contrast for disabled checkbox ( #14044 ) ( 9c86b5f ) chips: invert focus overlay on dark theme ( #14204 ) ( 7af8d02 ) drag-drop: add support for dragging svg elements in IE11 ( #14215 ) ( 81db16c ), closes #14214 drag-drop: dragged elements blurry in some browsers ( #14299 ) ( 63174d2 ), closes #14283 drag-drop: only add top-level drop lists to drop group ( #14130 ) ( 4acecd7 ) drag-drop: remove expensive style recalculation ( #14189 ) ( f212345 ) form-field: error when native select has no options ( #14102 ) ( 0ef75ea ), closes #14101 list: don't handle events when modifier key is pressed ( #14313 ) ( 0c7ce7a ) menu: allow alternate roles to be set on menu item ( #14165 ) ( 3f1588f ), closes #14163 ng-add: do not throw if custom builder is used for \"test\" ( #14203 ) ( 498a3d8 ), closes #14176 scrolling: default to vertical CSS class for invalid orientation ( #14145 ) ( dbe27c4 ) scrolling: provide virtual scroll viewport as scrollable ( #14168 ) ( c552504 ) slide-toggle: label not being read out by JAWS ( #14304 ) ( 754414b ), closes #4610 slide-toggle: label not being read out by screen reader on IE ( #14259 ) ( 5264804 ) stepper: showing hover state after tap on touch devices ( #14074 ) ( f3031ad ) tabs: avoid hitting change detection if text content hasn't changed ( #14251 ) ( 9778af2 ), closes #14249 tabs: blurry text in scrolled header on some browsers ( #14303 ) ( f7c8026 ) 7.1.0 \"stone-silhouette\" (2018-11-20) Bug Fixes a11y: aria-live directive announcing the same text multiple times ( #13467 ) ( a150494 ) a11y: avoid overlapping or left over timers in live announcer ( #13602 ) ( d0f4e7b ) a11y: key manager preventing arrow key events with modifier keys ( #13503 ) ( 1ef16ac ), closes #11987 #13496 a11y: wrong order of constructor arguments in provider ( #14078 ) ( 2fcf9e7 ), closes #14077 autocomplete: autofill value changes not being propagated to the form control ( #9887 ) ( 059864d ), closes #9704 autocomplete: not propagating same model value when reset while open ( #13634 ) ( 8d98375 ) bazel: theming bundle not exposed as sass_library ( #14071 ) ( af7a3d4 ) bidi: preserve user dir attribute ( #13859 ) ( d94d176 ), closes #13855 breakpoints: set max-widths for breakpoints to non-integers to handle subpixel queries ( #13828 ) ( 077f68e ) button: ripple color not correct for standard, icon and stroked buttons ( #13235 ) ( b104e75 ), closes #13232 button: stroked button crops applied badges ( #13912 ) ( 4b431fe ), closes #13909 button-toggle: content shifting in IE11 ( #13492 ) ( b3483a6 ) button-toggle: not forwarding focus to underlying control ( #14001 ) ( 81f8fb9 ) button-toggle: remove hover state on touch devices ( #13724 ) ( a320af2 ) button-toggle: svg icon not align inside toggle ( #13839 ) ( 5851c91 ), closes #13726 button-toggle: webkit tap highlight conflicting with ripples ( #13721 ) ( efe53a0 ) cdk-platform: pass {} to @NgModule since passing nothing breaks ( #13792 ) ( 65dd75d ) checkbox: disabled property not being coerced ( #13755 ) ( e5fe34c ), closes #13739 checkbox: no focus indicator in high contrast ( #13255 ) ( caf65e5 ), closes #13227 chips: disabled state not matching specs ( #13272 ) ( 60e0d88 ) chips: invalid ripple color for selected chips ( #13271 ) ( df5d18f ) chips: not updating keyboard controls if direction changes ( #14080 ) ( 1ffa1fc ) chips: remove circular dependency between chip-list and chip-input ( #13994 ) ( 6c741c4 ) datepicker: don't allow clicks on disabled cells in year and multi-year views ( #13448 ) ( c15bad2 ) datepicker: toggle not forwarding focus to underlying button ( #14020 ) ( b1d4b42 ) datepicker: unable to disable ripple on datepicker toggle ( #13997 ) ( 31bffb3 ), closes #13986 dialog,bottom-sheet: enter animation blocking child animations ( #13888 ) ( 235add9 ), closes #13870 drag-drop: avoid disrupting drag sequence if event propagation is stopped ( #13841 ) ( 8b2dc82 ) drag-drop: avoid generating elements with duplicate ids ( #13489 ) ( 68b53f7 ) drag-drop: avoid interference from native drag drop ( #14054 ) ( 26d63ee ) drag-drop: drop list not toggling dragging class inside component with OnPush change detection ( #13703 ) ( 12c15ba ), closes #13680 drag-drop: enable drag interactions when there is a drag handle ( #13780 ) ( 4ee6636 ), closes #13779 drag-drop: error if drag item is destroyed zone has stabilized ( #13978 ) ( 6fe84f3 ) drag-drop: events fired multiple times for short drag sequences on touch devices ( #13135 ) ( dc0b51a ), closes #13125 drag-drop: ignore enter predicate when returning item to its initial container ( #13972 ) ( fa944b7 ) drag-drop: incorrectly laying out items with different height or margins ( #13849 ) ( 89701ef ), closes #13483 drag-drop: multiple parallel drag sequences when dragging nested drag items ( #13820 ) ( 436809c ) drag-drop: not picking up handle that isn't a direct descendant ( #13360 ) ( c38ebb6 ) drag-drop: preserve previous inline transform ( #13529 ) ( cae16b0 ) drag-drop: prevent mouse wheel scrolling while dragging ( #13524 ) ( cd6da93 ), closes #13508 drag-drop: use passive event listeners for start events ( #13526 ) ( 280b0d6 ) expansion-panel: don't handle enter/space if modifier is pressed ( #13790 ) ( 04716b1 ), closes #13783 expansion-panel: emitting events twice on some browsers ( #13600 ) ( fa6e46d ) focus-trap: warn if initial element is not focusable ( #13960 ) ( 27347b5 ), closes #13953 form-field: native select options blending in with dropdown background on a dark theme ( #13201 ) ( 3f1e960 ) form-field: users being able to select the hidden placeholder of disabled input ( #13480 ) ( 8dc367c ), closes #13479 grid-list: unable to assign numeric zero as gutter size ( #13652 ) ( 037a746 ) icon: account for query params when prefixing external references ( #13930 ) ( 4ce5ee0 ), closes #13924 list: add ripples to action list items ( #13799 ) ( 76044e8 ), closes #13795 list: remove disabled selection list hover feedback on mobile ( #13850 ) ( 0589881 ) list: selection list moving focus when an option is destroyed ( #13531 ) ( b5a0b16 ) menu: closing parent overlay when pressing escape ( #13442 ) ( a7df1d0 ) menu: proper focus styling when opened by tap on a touch device ( #13599 ) ( e51de15 ) menu: unable to swap menu panel after first open ( #13819 ) ( 1fb1c55 ), closes #13812 menu: use passive touch listener ( #14041 ) ( 3842c8c ) ng-update: do not fail if @schematics /angular version is outdated ( #13929 ) ( ece6b2d ) ng-update: do not throw if typescript version is outdated ( #13927 ) ( eb59e56 ) overlay: backdrop exit animation not working ( #10145 ) ( 3816079 ) overlay: provide fullscreen overlay container in root ( #14091 ) ( c55b78e ) portal: use portal's ComponentFactoryResolver in portal outlet directive ( #13886 ) ( 99d2512 ), closes #12677 #9712 progress-bar: account for query params when prefixing references ( #13942 ) ( 2290063 ), closes #13930 progress-bar: not taking current path after first initialization ( #13628 ) ( 88c6548 ) radio: don't show hover ripples on touch devices ( #13701 ) ( f230633 ), closes #13675 radio: improved alignment for native validation messages ( #13570 ) ( dd96369 ) scrolling: leaking subscription if same element is registered multiple times ( #13974 ) ( 20f8924 ) select: don't prevent enter and space keys if a modifier is pressed ( #14090 ) ( cb56df9 ) sidenav: opened and closed events emitting twice on IE and Edge ( #13649 ) ( beb4739 ) slide-toggle: don't show hover ripples on touch devices ( #13702 ) ( e8f8d07 ), closes #13675 slide-toggle: no focus indication in high-contrast mode ( #13287 ) ( 264f306 ) slide-toggle: redirect focus to underlying input element ( #13957 ) ( ec4809f ), closes #13953 slide-toggle: showing focus ripple when clicking disabled control ( #14055 ) ( 9b05c3c ), closes #13957 slide-toggle: using incorrect colors when disabled ( #13444 ) ( dd9f267 ) slider: changing value on right click ( #14083 ) ( ed857c9 ) slider: update value on mousedown instead of click ( #13020 ) ( 861642c ) snack-bar: set appropriate role based on passed in politeness ( #13864 ) ( 50f999b ), closes #13493 snackbar: override min-width of snackbar on mobile ( #13880 ) ( 6703605 ) snackbar: set aria role based on if announcement message is provided ( #13993 ) ( 69ffd33 ) stepper: custom icons not centered inside circle ( #12947 ) ( 87e1742 ) stepper: don't handle enter/space when modifier key is pressed ( #13827 ) ( a9e550e ), closes #13790 stepper: emitting the animationDone event twice on some browsers ( #13608 ) ( 3ef933a ), closes #13600 #13587 stepper: fix text contrast ratio of stepper labels ( #14012 ) ( ae5b10f ) stepper: incorrect border color in dark theme for header with label position ( #13791 ) ( bbeb5ef ) stepper: intl provider not being picked up in lazy-loaded modules ( #12934 ) ( 675aa66 ) stepper: selector assuming that there will always be a dir attribute ( #13751 ) ( d5f0f0f ), closes #13741 stroked-button: ripples and focus overlay have incorrect radius ( #13745 ) ( 4cdf5ba ), closes #13738 table: delimit words when filtering ( #13487 ) ( 2a3599e ) tabs: duplicate animation events on some browsers ( #13674 ) ( 28e3d36 ) tabs: mat-align-tabs not working on mat-tab-nav-bar ( #13818 ) ( 8fad5d1 ), closes #13798 tabs: paginated header offset incorrect on IE ( #13223 ) ( d7a8892 ), closes #13217 text-field: autosize textarea not resizing on minRows decrease ( #13437 ) ( cfeab79 ) tooltip: add fallback for touch devices if Hammer isn't loaded ( #13580 ) ( 5d54920 ), closes #13536 virtual-scroll: not removing view from container if it's outside the template cache ( #13916 ) ( 8922100 ), closes #13901 Features bottom-sheet: allow focus restoration to be disabled ( #13153 ) ( 83fc823 ), closes #13150 datepicker: allow custom classes to be applied to individual dates ( #13971 ) ( 4be1b06 ), closes #13943 drag-drop: add directive to connect drop lists automatically ( #13754 ) ( 962dbeb ), closes #13750 drag-drop: add the ability to disable dragging ( #13722 ) ( b02a72e ), closes #13651 drag-utils: add utility function for cloning array items from one array to another ( #13743 ) ( d2d8a1f ), closes #13100 keycodes: add utilities for checking modifier keys ( #13933 ) ( 7899863 ), closes #13790 live-announcer: add ability to clear live element ( #11996 ) ( 4a1c8ed ), closes #11991 ng-add: add preview URLs for theme choices ( #13723 ) ( 4fbbb9d ), closes /github.com/angular/angular-cli/blob/907ce5c94c774147c4b52870b3522aed4e087c76/packages/schematics/angular/ng-new/schema.json#L121 #13708 paginator: allow paginator to be disabled ( #13146 ) ( cb4f5a0 ), closes #13145 stepper: add CdkStepHeader directive and fix CdkStepper error on init ( #10614 ) ( fbbe463 ), closes #10611 tabs: add the ability to customize the animation duration ( #13505 ) ( 0cd7536 ), closes #13428 tabs: make the updatePagination method public ( #13935 ) ( 1e4ee0c ) Performance Improvements focus-monitor: mark event listeners as passive ( #13532 ) ( bfc00a0 ) list: reduce css selector size ( #12571 ) ( e31e011 ) 7.0.4 \"brick-dress\" (2018-11-13) Bug Fixes a11y: aria-live directive announcing the same text multiple times ( #13467 ) ( 7c2a095 ) a11y: avoid overlapping or left over timers in live announcer ( #13602 ) ( a93d3a5 ) a11y: key manager preventing arrow key events with modifier keys ( #13503 ) ( b7ef6af ), closes #11987 #13496 bazel: theming bundle not exposed as sass_library ( #14071 ) ( 71c205e ) bidi: preserve user dir attribute ( #13859 ) ( 86089fe ), closes #13855 button: ripple color not correct for standard, icon and stroked buttons ( #13235 ) ( 62c6d55 ), closes #13232 button-toggle: not forwarding focus to underlying control ( #14001 ) ( b7be573 ) button-toggle: svg icon not align inside toggle ( #13839 ) ( 2814a99 ), closes #13726 checkbox: no focus indicator in high contrast ( #13255 ) ( 13d9d3a ), closes #13227 chips: invalid ripple color for selected chips ( #13271 ) ( 057eee1 ) datepicker: toggle not forwarding focus to underlying button ( #14020 ) ( 723d7f5 ) datepicker: unable to disable ripple on datepicker toggle ( #13997 ) ( 2fb58ab ), closes #13986 drag-drop: avoid disrupting drag sequence if event propagation is stopped ( #13841 ) ( 2902d0b ) drag-drop: avoid generating elements with duplicate ids ( #13489 ) ( 905f0b4 ) drag-drop: avoid interference from native drag drop ( #14054 ) ( 8dcbee2 ) drag-drop: enable drag interactions when there is a drag handle ( #13780 ) ( 0d3b74a ), closes #13779 drag-drop: error if drag item is destroyed zone has stabilized ( #13978 ) ( 40a63cf ) drag-drop: ignore enter predicate when returning item to its initial container ( #13972 ) ( 3fb5522 ) drag-drop: prevent mouse wheel scrolling while dragging ( #13524 ) ( 718d306 ), closes #13508 drag-drop: add directive to connect drop lists automatically ( #13754 ) ( e905127 ), closes #13750 focus-trap: warn if initial element is not focusable ( #13960 ) ( 3026138 ), closes #13953 icon: account for query params when prefixing external references ( #13930 ) ( 90420d6 ), closes #13924 menu: use passive touch listener ( #14041 ) ( f5006d6 ) progress-bar: account for query params when prefixing references ( #13942 ) ( eb82847 ), closes #13930 scrolling: leaking subscription if same element is registered multiple times ( #13974 ) ( 1a7173d ) slide-toggle: redirect focus to underlying input element ( #13957 ) ( 1d4be69 ), closes #13953 slide-toggle: showing focus ripple when clicking disabled control ( #14055 ) ( a2c2caf ), closes #13957 snackbar: set aria role based on if announcement message is provided ( #13993 ) ( 199583b ) stepper: fix text contrast ratio of stepper labels ( #14012 ) ( 01605d0 ) 7.0.3 \"lyrium-longboard\" (2018-11-06) Bug Fixes breakpoints: set max-widths for breakpoints to non-integers to handle subpixel queries ( #13828 ) ( b88b79d ) button: stroked button crops applied badges ( #13912 ) ( 835dc9e ), closes #13909 button-toggle: remove hover state on touch devices ( #13724 ) ( f9d5fb4 ) chips: remove circular dependency between chip-list and chip-input ( #13994 ) ( 3da858d ) dialog,bottom-sheet: enter animation blocking child animations ( #13888 ) ( e5afa48 ), closes #13870 drag-drop: drop list not toggling dragging class inside component with OnPush change detection ( #13703 ) ( 4e50d4a ), closes #13680 drag-drop: incorrectly laying out items with different height or margins ( #13849 ) ( c509591 ), closes #13483 drag-drop: multiple parallel drag sequences when dragging nested drag items ( #13820 ) ( cdc0c8b ) list: add ripples to action list items ( #13799 ) ( b293655 ), closes #13795 list: remove disabled selection list hover feedback on mobile ( #13850 ) ( e975223 ) menu: unable to swap menu panel after first open ( #13819 ) ( cbb76ec ), closes #13812 ng-update: do not fail if @schematics /angular version is outdated ( #13929 ) ( f10f8b9 ) ng-update: do not throw if typescript version is outdated ( #13927 ) ( d44fcf8 ) portal: use portal's ComponentFactoryResolver in portal outlet directive ( #13886 ) ( d2af80b ), closes #12677 #9712 snack-bar: set appropriate role based on passed in politeness ( #13864 ) ( 33d3cb3 ), closes #13493 snackbar: override min-width of snackbar on mobile ( #13880 ) ( 41cb8aa ) stepper: don't handle enter/space when modifier key is pressed ( #13827 ) ( 0bd3890 ), closes #13790 tabs: duplicate animation events on some browsers ( #13674 ) ( 7106681 ) tabs: mat-align-tabs not working on mat-tab-nav-bar ( #13818 ) ( 2289e43 ), closes #13798 virtual-scroll: not removing view from container if it's outside the template cache ( #13916 ) ( 7c202ec ), closes #13901 bazel support for downstream apps ( #13836 ) ( 61dbd26 ) 7.0.2 limestone-linguine (2018-10-26) Bug Fixes build: material not working with ES2015 ( #13709 ) ( e9103a6 ), closes #12760 #13695 button-toggle: webkit tap highlight conflicting with ripples ( #13721 ) ( abd0278 ) cdk-platform: pass {} to @NgModule since passing nothing breaks ( #13792 ) ( 5abb644 ) checkbox: disabled property not being coerced ( #13755 ) ( cee8c65 ), closes #13739 expansion-panel: don't handle enter/space if modifier is pressed ( #13790 ) ( 3e6cc77 ), closes #13783 radio: don't show hover ripples on touch devices ( #13701 ) ( b89c139 ), closes #13675 slide-toggle: don't show hover ripples on touch devices ( #13702 ) ( 9d495f1 ), closes #13675 stepper: incorrect border color in dark theme for header with label position ( #13791 ) ( afa5a28 ) stepper: selector assuming that there will always be a dir attribute ( #13751 ) ( 576118e ), closes #13741 stroked-button: ripples and focus overlay have incorrect radius ( #13745 ) ( 7877404 ), closes #13738 tooltip: add fallback for touch devices if Hammer isn't loaded ( #13580 ) ( 9ae6c84 ), closes #13536 Features drag-utils: add utility function for cloning array items from one array to another ( #13743 ) ( 13395c5 ), closes #13100 ng-add: add preview URLs for theme choices ( #13723 ) ( f1d1fc5 ), closes /github.com/angular/angular-cli/blob/907ce5c94c774147c4b52870b3522aed4e087c76/packages/schematics/angular/ng-new/schema.json#L121 #13708 7.0.1 emerald-egret (2018-10-22) Bug Fixes autocomplete: not propagating same model value when reset while open ( #13634 ) ( 2006144 ) button-toggle: content shifting in IE11 ( #13492 ) ( 7f5cbe3 ) datepicker: don't allow clicks on disabled cells in year and multi-year views ( #13448 ) ( 85741e0 ) drag-drop: not picking up handle that isn't a direct descendant ( #13360 ) ( 0f05d99 ) drag-drop: preserve previous inline transform ( #13529 ) ( 2a8da45 ) drag-drop: use passive event listeners for start events ( #13526 ) ( 5d5fba5 ) expansion-panel: emitting events twice on some browsers ( #13600 ) ( 85a3ae0 ) form-field: native select options blending in with dropdown background on a dark theme ( #13201 ) ( b8a6294 ) grid-list: unable to assign numeric zero as gutter size ( #13652 ) ( 4ffcf74 ) list: selection list moving focus when an option is destroyed ( #13531 ) ( 2c4c5ba ) menu: closing parent overlay when pressing escape ( #13442 ) ( c3ae922 ) menu: proper focus styling when opened by tap on a touch device ( #13599 ) ( c271167 ) progress-bar: not taking current path after first initialization ( #13628 ) ( 8e331a7 ) radio: improved alignment for native validation messages ( #13570 ) ( dbf5164 ) sidenav: opened and closed events emitting twice on IE and Edge ( #13649 ) ( 5295e2f ) slider: update value on mousedown instead of click ( #13020 ) ( c995db7 ) stepper: custom icons not centered inside circle ( #12947 ) ( 45edf64 ) stepper: emitting the animationDone event twice on some browsers ( #13608 ) ( a11ca21 ), closes #13600 #13587 stepper: intl provider not being picked up in lazy-loaded modules ( #12934 ) ( 00ce69b ) table: delimit words when filtering ( #13487 ) ( 1d87b4c ) text-field: autosize textarea not resizing on minRows decrease ( #13437 ) ( 8bae5b4 ) Performance Improvements focus-monitor: mark event listeners as passive ( #13532 ) ( ba0c820 ) 7.0.0 amethyst-ammonite (2018-10-17) Highlights Support for Drag and Drop in @angular/cdk/drag-drop . Support for Virtual Scrolling in @angular/cdk/scrolling . Support for native select element in mat-form-field . Added mat-action-list , a list where each item is a button . Updated component styles throughout the library matching the 2018 Material Design Spec refresh. Added more schematics, with schematics now available for table, drag and drop, tree, address form and more. Added CLI prompts when using ng add to assist in setting up HammerJS support, application theming and animations. 250+ bug/performance fixes Upgrading to 7.0 Using the Angular CLI, you can use the ng update command to automatically migrate to the new APIs in for Material and CDK. ng update @angular/material NOTE: If you are using only the CDK you can automatically migrate using ng update @angular/cdk instead. Breaking Changes ripple: deprecated [matRippleSpeedFactor] and baseSpeedFactor for the ripples have been removed. Use the new animation config instead. overlay: The flexibleDiemsions property on CdkConnectedOverlay has been renamed to flexibleDimensions sidenav: the constructor signature of the MatDrawerContent and MatSidenavContent has changed. elevation: Because mat-elevation usages have been moved out of component stylesheets, users who have not invoked a theme mixin will not see any elevation shadows on Material components. However, users that have created a custom theme which lacks the elevation property will still see the default black shadows. Additionally, users who want to use themed elevations in their custom components can create their own shorthand mixin: @import '~@angular/material/theming'; $myTheme: ... @mixin my-elevation($zValue) { @include mat-theme-elevation($zValue, $myTheme); } and then invoke angular-material-theme with the $myTheme variable. Marked for Deprecation A number of items throughout the library have been deprecated and are expected to be removed in v8. CDK Collections - SelectionModel.onChange has been deprecated, use SelectionModel.changed instead. Scrolling - ScrollDispatchModule has been deprecated, use ScrollingModule instead. Table - CdkTable.setFooterRowDef has been deprecated, use CdkTable.addFooterRowDef and CdkTable.removeFooterRowDef instead. - CdkTable.setHeaderRowDef has been deprecated, use CdkTable.addHeaderRowDef and CdkTable.removeHeaderRowDef instead. Material Dialog - matDialogAnimations.slideDialog has been deprecated, use matDialogAnimations.dialogContainer instead. - MatDialogRef.afterOpen has been deprecated, use MatDialogRef.afterOpened instead. - MatDialogRef.afterClose has been deprecated, use MatDialogRef.afterClosed instead. - MatDialog.afterOpen has been deprecated, use MatDialog.afterOpened instead. Form Field - mat-placeholder has been deprecated, use mat-label instead. - MatPlaceholder has been deprecated, use MatLabel instead. Paginator - $mat-paginator-selector-trigger-min-width has been deprecated, use $mat-paginator-selector-trigger-width instead. Select - matSelectAnimations.fadeInContent has been deprecated and will be removed without replacement. - The setter method for MatSelect.focused has been deprecated, MatSelect.focused will become readonly. Toolbar - $mat-toolbar-height-mobile-portrait has been deprecated and will be removed without replacement. - $mat-toolbar-height-mobile-landscape has been deprecated and will be removed without replacement. NOTE: In addition to the specific deprecations listed above, many component constructor methods contain optional parameters which are expected to become required in v8. Bug Fixes icon: not taking current path after initialization ( #13641 ) ( df9ec7 ) list: action list items clickable area not stretching the full width ( #13099 ) ( f3057fa ) 7.0.0-rc.2 (2018-10-15) Bug Fixes drag-drop: enterPredicate being called with wrong drop container ( #13578 ) ( 60b4a58 ) drag-drop: rename cdkDrop to cdkDropList ( #13619 ) ( 160b688 ) ng-add: do not add theme file if existing theme is set up ( #13468 ) ( d1e59a2 ) schematics: template content exceeds max line length ( #13521 ) ( b0a1daf ) schematics: tree folder icons do not have enough contrast ( #13462 ) ( 4a0eb2b ) virtual-scroll: fix several small bugs ( #13597 ) ( 8cfaeea ) Features schematics: prompt for name when generating component ( #13518 ) ( 9085de7 ) 7.0.0-rc.1 (2018-10-09) Bug Fixes a11y: not being able to escape disabled focus trap using arrow keys ( #13133 ) ( 3c55caa ), closes #13132 autocomplete: closing parent overlay when pressing escape (Esc) ( #13413 ) ( 8dfd2ee ) bottom-sheet: dismiss bottom sheet on destroy ( #13120 ) ( ffa4a06 ) button-toggle: not setting proper border in vertical mode ( #13397 ) ( d58db5d ) button-toggle: remove extra focus indication added by firefox ( #13367 ) ( 3583913 ) checkbox: ripple not hiding after click/touch ( #13295 ) ( afb0352 ), closes #13291 chips: content not centered vertically on IE in some cases ( #13260 ) ( 4f43f5c ) chips: ripple not clipping correctly in safari ( #12244 ) ( eb95e61 ) chips: selectionChange event firing when value has not changed ( #13173 ) ( e8a6ea1 ) datepicker: change overlay position strategy so the calendar is kept on-screen ( #11607 ) ( f44d6db ) drag-drop: avoid interfering with element clicks ( #13152 ) ( 38e7dd2 ) expansion-panel: correct jump in panel sizing during animation ( #12509 ) ( a706c8c ) form-field: blue box inside focused native select on IE ( #13187 ) ( ab44d50 ) form-field: not updating outline when prefix/suffix is added or removed ( #13253 ) ( 0060bd7 ), closes #13251 grid-list: incorrectly laying out tiles for nested list ( #13086 ) ( 3e1cff0 ), closes #13074 icon: handle references for pages with base tag ( #12428 ) ( 9e5fd91 ), closes #9276 list: selection list not marking options as selected correctly when setting value with duplicates ( #13363 ) ( bef9a17 ) menu: incorrectly styling keyboard focus, if trigger is right clicked before opening ( #13136 ) ( 730e6a3 ) ng-add: allow using noop animations ( #13429 ) ( 15a1ab7 ) overlay: incorrectly calculating centered position on a scrolled page with pushing ( #13185 ) ( f5dd24a ), closes #11868 overlay: wait for panel to detach before removing panelClass ( #13199 ) ( 238aef0 ), closes #13189 paginator: icons and labels not centered vertically on IE ( #12495 ) ( fe3f37a ), closes #12491 schematics: @angular /material schematics not working ( #13406 ) ( 3f8ee74 ) schematics: name is required when generating the drag-drop schematic ( #13452 ) ( 4a9bbcb ) schematics: proper error if name is not specified ( #13379 ) ( 4a0b09a ) scrolling: viewport ruler resize event running inside the NgZone ( #12909 ) ( 707a7ee ), closes #12883 select: allow extra content to be projected after label in mat-optgroup ( #13396 ) ( cb5b15e ), closes #11489 select: handle home and end keys on closed select ( #13278 ) ( d6ba25f ) tabs: disabled tab link not preventing router navigation ( #10358 ) ( bf66d57 ), closes #10354 virtual-scroll: don't set both right and left on the content ( #13412 ) ( 6ee9149 ), closes #13231 Features bottom-sheet: add injection token for default options ( #13172 ) ( 3de3851 ), closes #13149 datepicker: add ng-content to datepicker header ( #13236 ) ( 3fc0d36 ), closes #13212 schematics: create drag-drop schematic ( #13368 ) ( 72ccd8b ) 7.0.0-rc.0 (2018-10-02) Bug Fixes autocomplete: dividers in list throwing off keyboard navigation ( #13224 ) ( 0886cef ), closes #13200 button: fix stroked button border color ( #13219 ) ( bfeb540 ) checkbox: clear tabindex from host element ( #13308 ) ( 845388c ) chips: set aria-invalid on chip input ( #13249 ) ( 311d786 ), closes #13205 common: account for async hammer loader when checking whether hammer is defined ( #12933 ) ( d15431b ) drag-drop: emitting incorrect index for horizontal list in rtl ( #13274 ) ( f3bb0c7 ) drag-drop: error on IE when customizing root element ( #13279 ) ( e1071f0 ) drag-drop: unable to return item to initial container within same drag sequence, if not connected to current drag container ( #13247 ) ( 0ac41a0 ), closes #13246 form-field: always use native input value to determine whether control is empty ( #13307 ) ( 10e6502 ), closes #13305 form-field: incorrect arrow color for native select ( #13046 ) ( 10b8353 ) form-field: native date/time input taller than text input ( #13321 ) ( 92a5f0e ), closes #13317 form-field: native select outline not reset on firefox ( #12967 ) ( 38e492f ) grid: fix mat-grid-tile position ( #12980 ) ( 966cf5f ) grid-list: exception thrown when rowHeight is set before first change detection run ( #13112 ) ( e7007a2 ), closes #13102 grid-list: throw error if invalid value is assigned for rowHeight ( #13254 ) ( 210f3f9 ), closes #13252 list: set aria-multiselectable on selection list ( #13325 ) ( 877ef5d ) overlay: connected overlay directive inputs not updating position strategy ( #13066 ) ( 1d8e9af ) paginator: getNumberOfPages off by one ( #10724 ) ( 016ba5c ), closes #10720 #10699 radio: clear tabindex from host element ( #13323 ) ( 5c0a061 ), closes #13311 #13308 schematics: addressForm: fix bad Validators definition and TSLint ( #13285 ) ( 267dd65 ) schematics: dashboard schematic fails parsing declaration in spec ( #13269 ) ( 543cb9f ) schematics: fix typo in table's datasource ( #13283 ) ( 0ccdfc8 ) schematics: nav schematic generates TSLint errors ( #13268 ) ( 8d25fd1 ) schematics: remove unnecessary semicolon in tree component ( #13284 ) ( 8558878 ) schematics: sidenav toolbar should use default background ( #13282 ) ( c454f7b ) schematics: table schematic not expanding full width ( #13234 ) ( 884762f ) schematics: toolbar in nav w/o z-index causes issues with dashboard ( #13270 ) ( d74e38c ) select: give native select a bigger clickable area ( #13228 ) ( 6da7d23 ) slide-toggle: clear tabindex from host element ( #13311 ) ( 119fafd ), closes #13308 snack-bar: button not centered inside snack bar on IE11 ( #13062 ) ( 4e05745 ) snackbar: move elevation style to snackbar theme ( #13273 ) ( 96e670f ) stepper: vertical step header labels not centered on IE ( #13262 ) ( 40fb5cb ) tooltip: custom gesture config not set up ( #12941 ) ( 1852563 ), closes #12940 #12917 tooltip: hiding and reopening for consecutive show calls ( #13326 ) ( b5001f6 ) Features badge: allow badge to be disabled ( #13196 ) ( bfc1286 ), closes #13191 button-toggle: align with 2018 material design spec ( #12443 ) ( fd3eb6a ) overlay: add option to automatically dispose on navigation ( #12592 ) ( d48b1ba ), closes #12544 overlay: add support for swappable position strategies ( #12306 ) ( e0f3ae7 ) schematics: support for cdk ng add ( #13319 ) ( ac3f8c4 ) schematics: support for cdk ng-update . ( #13303 ) ( 1afddfb ) tabs: align with 2018 material design spec ( #12605 ) ( 0c5598c ) tree: support units different than px for indentation ( #12991 ) ( 590d294 ) Performance Improvements virtual-scroll: use auditTime instead of sampleTime ( #13131 ) ( c26dc74 ) update ripple: remove deprecated speed factor option ( #12258 ) ( a6c91bc ) BREAKING CHANGES ripple: deprecated [matRippleSpeedFactor] and baseSpeedFactor for the ripples have been removed. Use the new animation config instead. 7.0.0-beta.2 (2018-09-20) Highlights This release includes a number of changes to bring the components more in line with the 2018 Material Design update. If you are overriding the default styles, you may find that you need to tweak them to look right after these changes. Bug Fixes card: better scaling for avatar image ( #13032 ) ( 19ce1a1 ) checkbox, slide-toggle: no margin if content is projected ( #12973 ) ( 4636a98 ), closes #4720 chips: arrow keys resetting focus to first chip ( #12987 ) ( 959c827 ) dialog: clean up open dialogs on destroy ( #12835 ) ( 4e15ba9 ) expansion: MatExpansionHeader transition animations ( #13088 ) ( 4a96539 ), closes #11990 #11990 #11990 #11990 #11990 #11990 #11990 #11990 form-field: Make labels show while printing ( #12766 ) ( e88271a ) table: incorrect padding and text alignment in rtl ( #12280 ) ( 2b89342 ), closes #12276 Features button: align with 2018 material design spec ( #13083 ) ( 79801e0 ), closes #12537 #13011 card: align with 2018 material design spec ( #12731 ) ( 484dc8b ) checkbox: align with 2018 material design spec ( #12493 ) ( 95acccc ) chips: align with 2018 material design spec ( #12838 ) ( 3cc9c67 ) dialog: align with 2018 material design spec ( #12705 ) ( 00b7233 ) elevation: move elevation rules into theme stylesheets ( #11344 ) ( 9c075f5 ), closes #11343 BREAKING CHANGES dialog: * The matDialogAnimations.slideDialog symbol has been renamed to matDialogAnimations.dialogContainer . * elevation: Because mat-elevation usages have been moved out of component stylesheets, users who have not invoked a theme mixin will not see any elevation shadows on Material components. However, users that have created a custom theme which lacks the elevation property will still see the default black shadows. Additionally, users who want to use themed elevations in their custom components can create their own shorthand mixin: @import '~@angular/material/theming'; $myTheme: ... @mixin my-elevation($zValue) { @include mat-theme-elevation($zValue, $myTheme); } and then invoke angular-material-theme with the $myTheme variable. 7.0.0-beta.1 (2018-09-17) Bug Fixes button-toggle: underlying input not disabled when group is disabled ( #11610 ) ( bd21f21 ), closes #11608 chips: default click action on chip being prevented ( #12856 ) ( ae3ce4a ), closes #9032 datepicker: allow calendar cell selection via the space key ( #13098 ) ( 5c4a334 ) drag-drop: DOM element not being returned to initial container on drop ( #12948 ) ( fb7bf90 ), closes #12944 drag-drop: dragging class not being applied on drop container ( #12921 ) ( ec0de52 ) drag-drop: incorrectly calculating index when sorting horizontally ( #13082 ) ( 664ef4c ), closes #13072 drag-drop: incorrectly calculating pointer position inside element, in some cases ( #13111 ) ( 22cd3ed ), closes #13107 drag-drop: incorrectly picking up transitions on non-transform properties ( #12966 ) ( 951add9 ) drag-drop: not dropping immediately for failed drag after a successful one ( #13097 ) ( 32a0010 ), closes #13091 drag-drop: text selection not disabled on safari if user drags out of the viewport ( #12864 ) ( 8ee5fb6 ) drawer: respect NoopAnimationsModule and @.disabled binding ( #12839 ) ( 23df492 ) expansion: disable all animations when using NoopAnimationsModule ( #12855 ) ( 3e22641 ), closes #10590 form-field: don't set up mutation observer on non-outline appearances ( #12976 ) ( cbfbade ) form-field: remove chevron from native multi-select ( #13009 ) ( b62343a ) grid-list: better handling of negative columns ( #12939 ) ( cfb83a0 ) input: do not focus input element twice ( #12851 ) ( 7d586e4 ), closes #12849 ng-update: do not throw if imports without named bindings are used ( #12866 ) ( #12984 ) ( fe64211 ), closes #11571 overlay: correct misspelled flexibleDiemsions property ( #12927 ) ( 5d1643a ), closes #12925 overlay: infinite loop when used together with zone-patch-rxjs ( #13081 ) ( c2e502c ), closes #12686 platform: wrap MSStream property detection as string to prevent Closure property renaming ( #13117 ) ( aef61eb ), closes #12223 portal: remove dependency on deprecated parentInjector ( #12986 ) ( f39e091 ) progress-bar: buffer background animation stuttering ( #13114 ) ( 2f2e116 ) ripple: ripples not being cleared if touch sequence is canceled ( #12936 ) ( 948e563 ) sidenav: not positioning correctly in rtl ( #12741 ) ( 9d3d95f ) snack-bar: dismiss snack bar on destroy ( #13042 ) ( 50be24b ) tabs: pagination state not updated when tab content changes ( #12911 ) ( a7de64a ), closes #12901 tooltip: not showing up on touch devices ( #12940 ) ( 722dfb3 ), closes #12917 tooltip: text fields not editable if tooltip is applied in safari ( #12959 ) ( 0389d12 ), closes #12953 tree: theming nested notes ( #12938 ) ( e24f24a ) typings: update typings to support more strict typings in RxJS 6.3.2 ( #12979 ) ( 0a25fca ) Features list: add new mat-action-list ( #12415 ) ( 69fa762 ) menu: align with 2018 material design spec ( #12331 ) ( c812268 ) ng-add: add x-prompts to install schematics ( #13058 ) ( a5bc79c ) schematics: compatibility with Angular CLI 6.2.0 ( #13078 ) ( 714c205 ), closes #11438 select: align panel appearance and animation with 2018 material design spec ( #12975 ) ( 18d0fa8 ) stepper: Create MAT_STEPPER_GLOBAL_OPTIONS InjectionToken ( #11457 ) ( 9ab2c90 ) BREAKING CHANGES overlay: The flexibleDiemsions property on CdkConnectedOverlay has been renamed to flexibleDimensions 7.0.0-beta.0 (2018-08-30) Highlights Support for drag and drop in @angular/cdk/drag-drop ! Support for virtual scrolling in @angular/cdk/scrolling ! You can now use a native select element in mat-form-field Updated visuals for 2018 Material Design update (in-progress, not all components are done) Note that schematics for v7 are still in-progress. You can view a beta version of the docs at https://beta-angular-material-io.firebaseapp.com. Bug Fixes autocomplete: remove aria-owns attribute while closed ( #12333 ) ( f0a0ab1 ), closes #12332 autocomplete: reopening closed autocomplete when coming back to tab ( #12372 ) ( c2b488e ), closes #12337 autofill: avoid firing unnecessary event on initial render of input ( #12116 ) ( c2fc3f4 ) badge: apply view encapsulation attributes on badge element ( #12870 ) ( db1d51f ) badge: hide badges with no content ( #12239 ) ( 701a0dd ) bidi: default invalid directionality values to ltr ( #12396 ) ( e644350 ) breakpoints: emit only one event for adjacent breakpoint changes. ( #11007 ) ( 2830a64 ) button: allow for non-colored flat button ( #12550 ) ( 8c08bb1 ) button: allow transition for the button focus overlay for all buttons ( #12552 ) ( a080a79 ) button-toggle: clickable area not stretching when custom width is set ( #12642 ) ( ecf8b0d ), closes #8432 button-toggle: forward tabindex to underlying button ( #12538 ) ( 7dff5f8 ) button-toggle: set aria-disabled based on group disabled state ( #12828 ) ( 5969523 ) card: images in title-group overlapping content ( #12205 ) ( 89d16b2 ), closes #10031 card: incorrectly inverting inset divider in rtl ( #12285 ) ( fba4a93 ) cdk-text-field: prevent keyframes from getting stripped by LibSass ( #12567 ) ( 915590e ) checkbox: prevent error when disabling while focused ( #12327 ) ( c4cacce ), closes #12323 chips: chip list removing focus from first chip when adding through the input ( #12840 ) ( c3b2d4f ) chips: dynamic chip input placeholder changes not being propagated to form field ( #12422 ) ( e007c27 ), closes #11861 chips: focus indication not visible in high contrast mode ( #12431 ) ( bcf4c9f ) chips: focus not being restored correctly on chip removal when inside component with animations ( #12416 ) ( 5fb338b ), closes #12374 chips: focus not restored properly if chip has been removed by click ( #12788 ) ( 3da390e ), closes #12416 chips: form field not appearing as blurred when used without an input ( #12858 ) ( f82a94b ) chips: improved image scaling in avatar ( #12843 ) ( f6e787a ), closes #12660 chips: incorrectly handling disabled state ( #12659 ) ( 65ad6ab ), closes #11089 chips: losing focus if active chip is deleted ( #11910 ) ( e13bfe0 ) chips: support focusing first/last item using home/end ( #11892 ) ( 3723191 ) collections: align SelectionModel to changed naming ( #8286 ) ( 27e88c3 ) datepicker: able to open from readonly input using keyboard control ( #12880 ) ( 548d2b7 ) datepicker: add minDate and maxDate validation in demo-app ( #12531 ) ( 2b29c93 ) datepicker: input not picking up changes if datepicker is assigned after init ( #12546 ) ( 3299628 ) datepicker: multiple dialog open if the user holds down enter key ( #12238 ) ( 8e63656 ) datepicker: screenreaders report editable grid cells ( #12275 ) ( a2dcf21 ) datepicker-toggle: forward tabindex to underlying button ( #12461 ) ( 648eb4a ), closes #12456 expansion: respect parent accordion hideToggle binding ( #12725 ) ( 9c184ea ), closes #6529 expansion-panel: elevation transition not working ( #12860 ) ( ac8ed31 ) expansion-panel: focus lost if focused element is inside closing panel ( #12692 ) ( baf6419 ) expansion-panel: implement keyboard controls ( #12427 ) ( 32e5d72 ) form-field: allow for measuring outline gap when label is not in dom ( #12782 ) ( 21095f5 ) form-field: legacy ripple underline jumps in edge ( #12648 ) ( 70d1be8 ), closes #6351 form-field: outline gap not calculated when appearance is provided through DI ( #12767 ) ( 8e49388 ), closes #12765 form-field: remove outline gap for empty labels ( #12637 ) ( 3d4fc82 ) form-field: reset inputs not being reset on safari ( #12413 ) ( 4884dac ), closes #12408 form-field: unable to distinguish disabled form field in high contrast mode ( #12445 ) ( df2b371 ) form-field: update label gap for outline style ( #12555 ) ( 03527c6 ) grid-list: not picking up indirect descendants ( #12823 ) ( c04d2ae ), closes #12809 input: only monitor focus origin on browser platform ( #11604 ) ( 625f792 ) list: disable hover styling on touch devices ( #12520 ) ( 795c956 ) list: improved image scaling in avatar ( #12660 ) ( 9a59c2a ), closes #8131 live-announcer: avoid triggering a reflow when reading directive content ( #12638 ) ( 040f9db ) live-announcer: duplicate live element when coming in from the server ( #12378 ) ( a10bfa4 ), closes #11940 menu: changed after checked error when toggling quickly between triggers for same submenu ( #12209 ) ( b53b66a ) menu: collapse empty menu panel ( #12211 ) ( b23cecd ) menu: focus indication not visible in high contrast mode ( #12201 ) ( 56bce47 ) menu: menu content data being cleared when lazy-loaded content is reused between nested triggers ( #12476 ) ( 1e1751f ), closes #12467 menu: showing scrollbars on first open in Edge if item width is set ( #12141 ) ( 275de51 ) menu: throw better error when trying to open undefined menu ( #12688 ) ( c90dcfb ), closes #12649 moment-date-adapter: not returning utc date when parsing ( #12029 ) ( d431566 ) ng-add: do not incorrectly insert custom-theme into CSS files ( #12711 ) ( 51da6a6 ) ng-add: inserted dependencies should be sorted ( #12847 ) ( 0760dad ) ng-add: material version could not be determined ( #12751 ) ( a027ae5 ) ng-update: do not throw if imports without named bindings are used ( #12866 ) ( cef2e1e ), closes #11571 ng-update: form-field css name incorrectly updated ( #12768 ) ( 4830be8 ) ng-update: support parenthesized directive metadata ( #12314 ) ( c5b87da ) overlay: avoid same overlay being added to the keyboard event stack multiple times ( #12222 ) ( 45d6ae4 ) overlay: flexible overlay with push not handling scroll offset and position locking ( #11628 ) ( f8b70cd ) overlay: flexible overlay with push not handling scroll offset and position locking ( #12624 ) ( e765d8e ), closes #11365 paginator: inconsistently disabling tooltips between browsers ( #12539 ) ( 73a3d4a ) progress-bar: avoid error on SSR if pathname is undefined ( #12807 ) ( f3af763 ) progress-bar: generate correct url on server ( #12813 ) ( 787f31a ) progress-bar: incorrectly handling current path when using hash location strategy ( #12713 ) ( 5727eac ), closes #12710 progress-bar: query animation not working inside routes with named outlets ( #12350 ) ( b9c0d85 ), closes #12014 #12338 progress-bar: query state animation not working ( #11459 ) ( b40967f ), closes #11453 ripple: don't hide directive host in high contrast ( #12168 ) ( 944caf9 ) ripple: don't launch ripple for fake mouse events ( #11997 ) ( 4639a87 ) schematics: do not allow specifying native view encapsulation ( #12632 ) ( 0a823dd ) schematics: fix object iteration error in dashboard ( #12216 ) ( b589828 ) schematics: generated spec files not working ( #12842 ) ( c09da0b ), closes #12778 schematics: properly detect tsconfig files ( #12434 ) ( 08e6653 ) schematics: properly indent inline files ( #12317 ) ( ed4e082 ) schematics: tree schematic not working ( #12281 ) ( ba134f4 ) select: arrow position/animation for appearance=\"standard\" ( #12045 ) ( 58f3c54 ) select: pointing to non-existent element via aria-labelledby ( #12411 ) ( 3b7f0f1 ), closes #12405 select: skip disabled options when using ctrl + a ( #12553 ) ( 559b95e ), closes #12543 select,autocomplete: unable to set custom id on mat-option ( #11573 ) ( 29d5173 ), closes #11572 selection-list: do not allow toggling disabled options ( #12617 ) ( 4cfdb20 ), closes #12608 selection-list: proper styling not being applied when using mat-list-icon ( #12879 ) ( 7bc8670 ) sidenav: content jumping in rtl and blurry text on IE ( #12726 ) ( 4050002 ), closes #10026 sidenav: scrollable instance not exposed when explicitly specifying content element ( #11706 ) ( 441c98e ), closes #11517 #10884 slide-toggle: blended ripples do not match spec ( #12735 ) ( e148414 ) slide-toggle: fix font sizing for slide toggle to match other input methods ( #10688 ) ( 58c1c95 ) slide-toggle: invert the thumb and slide gesture in rtl ( #12284 ) ( 9a191b3 ) slide-toggle: prevent error when disabling while focused ( #12325 ) ( e273a7a ), closes #12323 slide-toggle: remove webkit tap highlight ( #12708 ) ( ba55d04 ) slide-toggle: respect primary palette of theme ( #12698 ) ( dad0ed0 ), closes #11854 slider: thumb label blending in with background in high contrast mode ( #12606 ) ( f1b65b6 ) snack-bar: prevent content from overriding configured aria-live message ( #12294 ) ( 0958cbb ) snackbar: wrap simple snackbar text in span ( #12599 ) ( ef0b84b ) stepper: focus lost if focus is inside stepper while changing step ( #12761 ) ( 8a7ca7f ) stepper: handle removing a step before the current one ( #11813 ) ( 82b35d0 ), closes #11791 stepper: improved alignment for step icons ( #12703 ) ( 37a7056 ), closes #12696 tab-group: focus change event not firing for keyboard navigation ( #12192 ) ( 1b7b8ab ) table: error if row definition is on an ng-container ( #12462 ) ( ef57919 ), closes #12460 table: errors when rendering table with sticky elements on the server ( #12095 ) ( 7e67fe9 ), closes #12094 table: extra elements throwing off table alignment ( #12645 ) ( 3b70d20 ), closes #11165 table: unable to sort large numbers in strings ( #12052 ) ( adda21f ) tabs: animation running after initialization ( #12549 ) ( 4c2f619 ) tabs: changed after checked error when using isActive in view ( #12206 ) ( 499458c ), closes #12197 tabs: content animation in RTL not working (chrome) ( #12215 ) ( c6c68a6 ) tabs: disable focus overlay for touch focus ( #12249 ) ( 1b19b93 ), closes #12247 tabs: enable keyboard wrapping and mark disabled tabs ( #12218 ) ( 7f8fd9f ) tabs: only target direct descendants with mat-stretch-tabs ( #12198 ) ( 592af48 ), closes #12196 tabs: reposition tab body on direction change ( #12229 ) ( 49ec9ca ) tabs: ripple overflow in internet explorer ( #12036 ) ( f35a314 ) tabs: selectedIndex being overwritten if tabs are being added / removed ( #12245 ) ( 569c221 ) tooltip: interfering with native drag drop ( #12200 ) ( 19f64ad ) tooltip: opening after click on android ( #12250 ) ( 2a49532 ), closes #12223 tree: include constructors on MatTree classes to allow es6 builds ( #12556 ) ( 5623c5b ) ensure components work with ES2015 in jit mode. ( #12759 ) ( 2adced1 ), closes /github.com/angular/angular/pull/22356#issuecomment-387756794 #9329 explictly declare types for mixin base classes ( #12876 ) ( 515912b ) Features autocomplete: add updatePosition() method to MatAutocompleteTrigger ( #11495 ) ( 3ce5b1f ) autocomplete: align with 2018 material design ( #12570 ) ( b9651df ) bottom-sheet: align with 2018 material design spec ( #12625 ) ( ceb2051 ) bottom-sheet: allow autofocusing to be disabled ( #12193 ) ( d6ca3ec ) breakpoint-observer: Emit matching state of each query provided ( #12506 ) ( 5a560b2 ) cdk-scrollable: add methods to normalize scrolling in RTL ( #12607 ) ( 028746a ) chips: allow set in separatorKeyCodes ( #12477 ) ( 170665a ) datepicker: align with 2018 material design spec ( #12693 ) ( 32456e3 ) dialog: allow focus restoration to be disabled ( #12519 ) ( d5c5f31 ) drag-drop: new feature! Too many commits to list. expansion: add animation events for expansion panels ( #12412 ) ( f6b1002 ) expansion-panel: align with 2018 material design spec ( #12670 ) ( ccbae0b ) focus-monitor: support monitoring ElementRef ( #12712 ) ( 932211e ) form-field: support native select element ( #12707 ) ( 4e41985 ) ng-add: respect project default inlineStyle, inlineTemplate and spec option value ( #12888 ) ( 8831a7a ), closes #11874 ng-add: respect project default style extension ( #12618 ) ( 5144aa7 ) ng-add: set up gestures in CLI projects ( #12734 ) ( b919a48 ) overlay: add the ability to set a panelClass based on the current connected position ( #12631 ) ( 765990e ) overlay: support setting panelClass on cdkConnectedOverlay ( #12380 ) ( d7c734c ) paginator: allow form field color to be customized ( #12834 ) ( e18a99f ) portal: allow for custom ComponentFactoryResolver to be associated with portal ( #12677 ) ( 136f5dd ), closes #9712 progress-bar: add transitionend output for value animation ( #12409 ) ( 6a1a707 ) progress-bar: align with 2018 material design spec ( #12394 ) ( b2247f8 ) radio: align with 2018 material design spec ( #12299 ) ( dda8122 ) ripple: no longer require additional setup when using MatRipple directive ( #11913 ) ( d796776 ) ripple: support multi-touch ( #12643 ) ( 8fdc2cf ) schematics: new tree schematic ( #11739 ) ( 1540e2f ) select: allow for option sorting logic to be customized ( #11890 ) ( d54a75a ) sidenav: align with 2018 material design spec ( #12569 ) ( 1f88bd7 ) slide-toggle: align with 2018 material design spec ( #12419 ) ( 5f2e077 ) snack-bar: align with 2018 material design spec ( #12634 ) ( 1e754a0 ) tooltip: align with 2018 material design spec ( #12310 ) ( 4e358c3 ) virtual-scroll: new feature! Too many commits to list. Performance Improvements overlay: remove detached overlays from the DOM ( #12414 ) ( 71886f8 ), closes #12341 table: leaking reference through mostRecentCellOutlet ( #12269 ) ( 34a7e38 ), closes #12259 tree: leaking reference through mostRecentTreeNode ( #12334 ) ( 60b9928 ), closes #12269 virtual-scroll: improve scrolling performance ( #12490 ) ( 4a9fe87 ) BREAKING CHANGES sidenav: the constructor signature of the MatDrawerContent and MatSidenavContent has changed. 6.4.7 kryptonite-kombucha (2018-08-29) Bug Fixes autocomplete: reopening closed autocomplete when coming back to tab ( #12372 ) ( 8617423 ), closes #12337 badge: apply view encapsulation attributes on badge element ( #12870 ) ( dc8cf46 ) button-toggle: clickable area not stretching when custom width is set ( #12642 ) ( 70aca02 ), closes #8432 button-toggle: set aria-disabled based on group disabled state ( #12828 ) ( 3f67cc5 ) card: images in title-group overlapping content ( #12205 ) ( 22ae587 ), closes #10031 chips: chip list removing focus from first chip when adding through the input ( #12840 ) ( 0e60fb8 ) chips: focus not being restored correctly on chip removal when inside component with animations ( #12416 ) ( d08d8bc ), closes #12374 chips: focus not restored properly if chip has been removed by click ( #12788 ) ( 59a7f28 ), closes #12416 chips: form field not appearing as blurred when used without an input ( #12858 ) ( be1ba9c ) chips: improved image scaling in avatar ( #12843 ) ( 130806b ), closes #12660 chips: incorrectly handling disabled state ( #12659 ) ( 15e7f74 ), closes #11089 chips: support focusing first/last item using home/end ( #11892 ) ( b735e48 ) collections: align SelectionModel to changed naming ( #8286 ) ( 4b30539 ) datepicker: multiple dialog open if the user holds down enter key ( #12238 ) ( c807d74 ) datepicker: screenreaders report editable grid cells ( #12275 ) ( 3328808 ) datepicker-toggle: forward tabindex to underlying button ( #12461 ) ( 09302b6 ), closes #12456 expansion: respect parent accordion hideToggle binding ( #12725 ) ( 803f73f ), closes #6529 expansion-panel: focus lost if focused element is inside closing panel ( #12692 ) ( 3596e9d ) expansion-panel: implement keyboard controls ( #12427 ) ( 04d5955 ) form-field: allow for measuring outline gap when label is not in dom ( #12782 ) ( 9579212 ) form-field: legacy ripple underline jumps in edge ( #12648 ) ( 34d91c7 ), closes #6351 form-field: outline gap not calculated when appearance is provided through DI ( #12767 ) ( 8b9d283 ), closes #12765 form-field: remove outline gap for empty labels ( #12637 ) ( a326ee0 ) grid-list: not picking up indirect descendants ( #12823 ) ( 4f53e4f ), closes #12809 input: only monitor focus origin on browser platform ( #11604 ) ( a30e909 ) list: improved image scaling in avatar ( #12660 ) ( 70cb0a2 ), closes #8131 live-announcer: avoid triggering a reflow when reading directive content ( #12638 ) ( 92f53ce ) menu: throw better error when trying to open undefined menu ( #12688 ) ( f732059 ), closes #12649 progress-bar: avoid error on SSR if pathname is undefined ( #12807 ) ( bb9cfec ) progress-bar: generate correct url on server ( #12813 ) ( b0555b5 ) progress-bar: incorrectly handling current path when using hash location strategy ( #12713 ) ( da3b5e0 ), closes #12710 ripple: don't launch ripple for fake mouse events ( #11997 ) ( 266a159 ) select: pointing to non-existent element via aria-labelledby ( #12411 ) ( 12c6f81 ), closes #12405 select: skip disabled options when using ctrl + a ( #12553 ) ( 2349166 ), closes #12543 select,autocomplete: unable to set custom id on mat-option ( #11573 ) ( 1f78d8a ), closes #11572 sidenav: content jumping in rtl and blurry text on IE ( #12726 ) ( 81e0542 ), closes #10026 slide-toggle: remove webkit tap highlight ( #12708 ) ( 3ce4e8d ) slider: thumb label blending in with background in high contrast mode ( #12606 ) ( a4a79ea ) stepper: focus lost if focus is inside stepper while changing step ( #12761 ) ( fc537af ) stepper: handle removing a step before the current one ( #11813 ) ( 0fcdae4 ), closes #11791 stepper: improved alignment for step icons ( #12703 ) ( 41d0196 ), closes #12696 table: errors when rendering table with sticky elements on the server ( #12095 ) ( 8956d1d ), closes #12094 table: extra elements throwing off table alignment ( #12645 ) ( 13f1c6e ), closes #11165 tabs: disable focus overlay for touch focus ( #12249 ) ( d3af441 ), closes #12247 tabs: only target direct descendants with mat-stretch-tabs ( #12198 ) ( 6bb0ffe ), closes #12196 tooltip: opening after click on android ( #12250 ) ( a6b8a06 ), closes #12223 ensure all components work with ES2015 in jit mode. ( #12759 ) ( 0c4a1b4 ), closes #12760 , #9329 6.4.6 argon-aftershave (2018-08-20) Bug Fixes cdk-text-field: prevent keyframes from getting stripped by LibSass ( #12567 ) ( 4180e72 ) form-field: update label gap for outline style ( #12555 ) ( ffeb779 ) progress-bar: query state animation not working ( #11459 ) ( 948f655 ), closes #11453 selection-list: do not allow toggling disabled options ( #12617 ) ( 3c1995d ), closes #12608 tabs: changed after checked error when using isActive in view ( #12206 ) ( 75632bd ), closes #12197 6.4.5 mithril-magnet (2018-08-13) Bug Fixes button: allow transition for the button focus overlay for all buttons ( #12552 ) ( 0a56cf7 ) button-toggle: forward tabindex to underlying button ( #12538 ) ( dcae875 ) breakpoint-observer: Emit matching state of each query provided ( #12506 ) ( cb3f760 ) datepicker: input not picking up changes if datepicker is assigned after init ( #12546 ) ( d10a6c4 ) drag-drop: add support for sorting animations ( #12530 ) ( 7d0e69b ) drag-drop: ignore self inside connectedTo ( #12626 ) ( 7e7e873 ) drag-drop: remove circular dependencies ( #12554 ) ( fd70c07 ) list: disable hover styling on touch devices ( #12520 ) ( 6048f6f ) overlay: flexible overlay with push not handling scroll offset and position locking ( #11628 ) ( a192907 ) paginator: inconsistently disabling tooltips between browsers ( #12539 ) ( 35bdd00 ) snackbar: wrap simple snackbar text in span ( #12599 ) ( 11b97e4 ) tabs: animation running after initialization ( #12549 ) ( 2798084 ) tree: include constructors on MatTree classes to allow es6 builds ( #12556 ) ( 5b0eed3 ) 6.4.3 monelite-meeple (2018-08-07) Bug Fixes bidi: default invalid directionality values to ltr ( #12396 ) ( 58361f1 ) checkbox: prevent error when disabling while focused ( #12327 ) ( 0c746c1 ), closes #12323 chips: dynamic chip input placeholder changes not being propagated to form field ( #12422 ) ( 5053532 ), closes #11861 chips: focus indication not visible in high contrast mode ( #12431 ) ( 3652707 ) drag-drop: account for transition-delay when waiting for the animation to finish ( #12466 ) ( 3580fb5 ) form-field: reset inputs not being reset on safari ( #12413 ) ( 952b553 ), closes #12408 form-field: unable to distinguish disabled form field in high contrast mode ( #12445 ) ( 212bd0b ) live-announcer: duplicate live element when coming in from the server ( #12378 ) ( bf9bc0d ), closes #11940 menu: menu content data being cleared when lazy-loaded content is reused between nested triggers ( #12476 ) ( 747231a ), closes #12467 slide-toggle: prevent error when disabling while focused ( #12325 ) ( 80f6929 ), closes #12323 table: error if row definition is on an ng-container ( #12462 ) ( 39d40f3 ), closes #12460 Performance Improvements overlay: remove detached overlays from the DOM ( #12414 ) ( 40d8ae4 ), closes #12341 6.4.2 chalk-window (2018-07-30) Bug Fixes autocomplete: remove aria-owns attribute while closed ( #12333 ) ( 2122b18 ), closes #12332 card: incorrectly inverting inset divider in rtl ( #12285 ) ( 8a2dc60 ) progress-bar: query animation not working inside routes with named outlets ( #12350 ) ( 0c526d3 ), closes #12014 #12338 snack-bar: prevent content from overriding configured aria-live message ( #12294 ) ( b46689e ) ng-update: support parenthesized directive metadata ( #12314 ) ( 66416f5 ) Performance Improvements table: leaking reference through mostRecentCellOutlet ( #12269 ) ( 7c8e892 ), closes #12259 tree: leaking reference through mostRecentTreeNode ( #12334 ) ( b6f7205 ), closes #12269 6.4.1 elm-electrode (2018-07-23) Bug Fixes autofill: avoid firing unnecessary event on initial render of input ( #12116 ) ( 1fb1fab ) badge: hide badges with no content ( #12239 ) ( 1e847f1 ) chips: losing focus if active chip is deleted ( #11910 ) ( 646e378 ) drag-drop: disable text selection on draggable element ( #12204 ) ( 7a04609 ) drag-drop: make CDK_DROP_CONTAINER public ( #12214 ) ( b9cece4 ) drag-drop: unable to drag last item back into initial container ( #12261 ) ( 3e0e3c5 ) menu: collapse empty menu panel ( #12211 ) ( aed3993 ) menu: focus indication not visible in high contrast mode ( #12201 ) ( 6fb6216 ) menu: showing scrollbars on first open in Edge if item width is set ( #12141 ) ( ff53295 ) moment-date-adapter: not returning utc date when parsing ( #12029 ) ( 0304ac1 ) overlay: avoid same overlay being added to the keyboard event stack multiple times ( #12222 ) ( e587f4b ) ripple: don't hide directive host in high contrast ( #12168 ) ( efedc9b ) schematics: fix object iteration error in dashboard ( #12216 ) ( f2acb51 ) slide-toggle: invert the thumb and slide gesture in rtl ( #12284 ) ( fe193f5 ) tab-group: focus change event not firing for keyboard navigation ( #12192 ) ( 48ece27 ) table: unable to sort large numbers in strings ( #12052 ) ( dd31521 ) tabs: content animation in RTL not working (chrome) ( #12215 ) ( f700897 ) tabs: enable keyboard wrapping and mark disabled tabs ( #12218 ) ( 0e03aae ) tabs: reposition tab body on direction change ( #12229 ) ( 4ac1be3 ) tabs: ripple overflow in internet explorer ( #12036 ) ( 09f439a ) tabs: selectedIndex being overwritten if tabs are being added / removed ( #12245 ) ( 641ec85 ) tooltip: interfering with native drag drop ( #12200 ) ( 8a4f2c3 ) 6.4.0 dimeritium-dandelion (2018-07-16) Bug Fixes a11y: allow ListKeyManager wrapping to be disabled ( #11920 ) ( e9e44f6 ) a11y: clear duplicate AriaDescriber container coming in from the server ( #11900 ) ( b041f3f ) autocomplete: don't override native autocomplete attribute ( #11926 ) ( 88efb7e ) autocomplete: error when typing in input with disabled autocomplete and no panel ( #11881 ) ( 6b1a672 ), closes #11876 autocomplete: reposition the panel when the amount of options changes ( #4469 ) ( 2b80dbf ) bottom-sheet: close on page navigation ( #12106 ) ( 5c6f25e ) button: don't show hover overlay on devices that don't support hovering ( #12030 ) ( 947c29a ), closes #12022 button: not resetting all outlines on firefox ( #11911 ) ( 85711aa ) button: unable to set a custom tabindex on a link button ( #12042 ) ( cb6c621 ), closes #12041 button-toggle: allow event bubbling for toggle button clicks ( #11951 ) ( 5e16682 ) button-toggle: parent margin and padding being propagated to underlying button ( #11993 ) ( 3bf10f9 ), closes #11976 card: don't override vertical divider styles ( #11899 ) ( 2d11588 ) checkbox: fix checkbox animation when moved between view containers ( #10589 ) ( fbccfd4 ) chips: ripples still showing up when globally disabled ( #11918 ) ( 69a7f7c ) datepicker: all cells being read out as selected ( #12006 ) ( 32da038 ) datepicker: calendar input changes not being propagated on child views ( #12004 ) ( b1d4fe1 ), closes #11737 datepicker: set role on datepicker popup and aria-haspopup on the datepicker toggle ( #12008 ) ( 57b066a ) datepicker: showing dot in high contrast mode after popup has closed ( #12099 ) ( 6a472eb ) expansion-panel: disable hover highlight on non-hover devices ( #12080 ) ( 25eb43f ), closes #12030 focus-monitor: allow native focus options to be passed through focusVia ( #11962 ) ( 4a02bb1 ) focus-origin: focus origin sometimes invalid in firefox 57 ( #8669 ) ( a1aa9e7 ), closes #6984 focus-trap: not attaching correctly if element is not in the DOM on init ( #7665 ) ( d64f94d ) form-field: clear safari autofill icons ( #12137 ) ( 04934b4 ) form-field: label gap not being calculated when switching to outline dynamically ( #11658 ) ( d75fa75 ), closes #11653 form-field: placeholder not hiding if -webkit-text-fill-color is used ( #12076 ) ( cc5dfb8 ), closes #12074 icon: clearing all content when inserting a new SVG ( #11956 ) ( 8280a76 ) icon: reverse for loop when removing child nodes from mat-icon ( #12078 ) ( dd6aec6 ) menu: scrollable menu not scrolled to top when opened for the first time ( #11859 ) ( 742c226 ) overlay: justifyContent center ignored when direction is RTL ( #11877 ) ( 415c956 ) overlay: account for virtual keyboard offset on mobile devices ( #12119 ) ( a248c18 ), closes #6341 overlay: clear timeout if the backdrop transition completes early ( #11938 ) ( 1a31c4e ) overlay: don't dispatch key events to overlays that don't handle them ( #11810 ) ( c3fdc32 ) overlay: remove panelClass when the overlay is detached ( #12142 ) ( 79bacf2 ), closes #12099 progress-bar: query animation not working on safari ( #12014 ) ( 49119ed ) progress-spinner: circle not rendering correctly when switching modes in Safari ( #12151 ) ( 623cd3d ), closes #12140 radio: circle not being greyed out when disabled ( #12127 ) ( 85b8f32 ), closes #12125 ripple: remove webkit touch highlights from ripple containers ( #12082 ) ( 8e2ff1f ) schematic: parse5 v5.0.0 requires different parse options ( #12028 ) ( 118344e ), closes #12027 schematics: add parse5 dep ( #11647 ) ( 2330c8b ) select: blank option label throwing off alignment ( #11994 ) ( 45b949a ), closes #11969 select: not resuming keyboard selection after clicking on single-select option ( #11882 ) ( 195665f ) select: reset option being marked as selected ( #11934 ) ( d88e021 ) select: support ctrl+a shortcut for multi-select ( #11799 ) ( d5de711 ) selection-list: disabling list doesn't disable ripples of options ( #11955 ) ( d3212a6 ) selection-list: form control disable locks disabled property ( #12113 ) ( fcc8875 ), closes #12107 sidenav: continuously hitting zone when using autosize option ( #12067 ) ( 330176d ), closes #11231 #11986 #11215 sidenav: remove margin from content instead of setting zero ( #11986 ) ( 444fb38 ) slide-toggle: no color demarcation in high contrast black mode ( #12150 ) ( b5fd6de ) slide-toggle: not updating model from toggle method ( #11846 ) ( fc15fa2 ) slider: track not being rendered under some conditions when using a thumb label ( #12079 ) ( d4623ff ), closes #12071 sort: arrow indicator not visible in high contrast mode ( #12159 ) ( eb6c456 ) sort: arrow visible while parent row is being animated ( #11827 ) ( c59abc6 ) stepper: unable to set aria-label on step ( #11989 ) ( ae39535 ), closes #11898 tab-nav-bar: ripples still showing up when globally disabled ( #11865 ) ( fc1d1a4 ) tabs: don't fire change event when amount of tabs changes ( #12097 ) ( 0186a03 ), closes #12084 tabs: don't show focus indication for mouse focus ( #11194 ) ( 89cad3f ), closes #11184 tabs: maintain selected tab when new tabs are added or removed ( #9132 ) ( 78f556a ) tabs: unable to distinguish disabled tab in high contrast mode ( #12160 ) ( 98b9ed1 ) tabs: unable to set aria-label or aria-labelledby on tab ( #11898 ) ( bd3d085 ) toolbar: deprecate unused landscape row-height variable ( #12129 ) ( 6314d15 ) tree: define CdkTree before CdkTreeNode to prevent errors in JIT ( #11870 ) ( 4166d16 ) parse5 not listed as dependency for material ( #11981 ) ( e0bbe07 ) sanity checks throwing an error if scripts are set in the head ( #12068 ) ( c134026 ), closes #12026 Features autocomplete: allow panel to have a width value of auto ( #11879 ) ( 8a5713e ) docs: show additional type aliases in docs. ( #11901 ) ( 637ef83 ) list: allow avatar in selection list options ( #10316 ) ( 20cbdba ) moment-dateadapter: add option to create utc dates ( #11336 ) ( 9a85b9b ) overlay: expose keydown events on the opened overlay ( #11867 ) ( a831bf6 ) slider: support two-way binding for value ( #12003 ) ( de107b7 ) tree: support array of data as children in nested tree ( #10886 ) ( 825d35c ) support lazy-loading HammerJS w/ Angular 6.1 ( #11960 ) ( eed6110 ) 6.3.3 chrome-tarantula (2018-07-09) Highlights In the next minor version we will remove the beta versions of Angular 6 as valid dependency versions. This is a change that we intended to make when moving out of beta but was accidentally overlooked. Please note that versions prior to beta.8 don't work properly even today, as they do not have all of the changes we depend on related to tree-shakeable providers. We have added a cdk-experimental package for drag drop. It's not ready for prime time yet, but if you're feeling adventurous and want to give it a spin, feel free! Bug Fixes tabs: don't show focus indication for mouse focus ( #11194 ) ( 1a83bc0 ), closes #11184 6.3.2 ruby-robot (2018-07-02) Bug Fixes aria-describer: clear duplicate container coming in from the server ( #11900 ) ( 31c8f6b ) autocomplete: don't override native autocomplete attribute ( #11926 ) ( ee9ddfb ) autocomplete: reposition the panel when the amount of options changes ( #4469 ) ( a7c4d0c ) button: not resetting all outlines on firefox ( #11911 ) ( df80dc6 ) button-toggle: allow event bubbling for toggle button clicks ( #11951 ) ( 79415c4 ) button-toggle: emit change event when button is clicked ( #11886 ) ( 828b3c0 ) button-toggle: use native button and aria-pressed for button-toggle ( #10990 ) ( b959e18 ) card: don't override vertical divider styles ( #11899 ) ( 8a9a8bc ) checkbox: fix checkbox animation when moved between view containers ( #10589 ) ( 0244afc ) chips: ripples still showing up when globally disabled ( #11918 ) ( 8d6a9ae ) focus-monitor: allow native focus options to be passed through focusVia ( #11962 ) ( 8f3b316 ) focus-trap: not attaching correctly if element is not in the DOM on init ( #7665 ) ( 80d9a9a ) GlobalPositionStrategy: justifyContent center ignored when direction is RTL ( #11877 ) ( 6b1f703 ) icon: clearing all content when inserting a new SVG ( #11956 ) ( 96b389c ) list-key-manager: allow withWrap to be disabled ( #11920 ) ( ab14539 ) menu: panel positions not changing if position is updated after first open ( #11707 ) ( 671ad82 ), closes #11668 menu: scrollable menu not scrolled to top when opened for the first time ( #11859 ) ( 548266b ) moment-dateadapter: add option to create utc dates ( #11336 ) ( 3acd2a4 ) overlay: clear timeout if the backdrop transition completes early ( #11938 ) ( c55c0e1 ) overlay: don't dispatch key events to overlays that don't handle them ( #11810 ) ( 2433439 ) overlay: explicitly implement OverlayReference. ( #11824 ) ( 3e99c46 ) progress-spinner: create internal default to force animations to always be on ( #11462 ) ( 11f3993 ) schematics: add parse5 dep ( #11647 ) ( 42dd824 ) schematics: error in generated unit test ( #11884 ) ( 0e5b30e ) select: don't blur label when trigger is blurred while the panel is opened ( #11537 ) ( 6c9c3fe ) select: not resuming keyboard selection after clicking on single-select option ( #11882 ) ( a3dba76 ) select: reset option being marked as selected ( #11934 ) ( cd32d78 ) select: support ctrl+a shortcut for multi-select ( #11799 ) ( 11d7080 ) selection-list: disabling list doesn't disable ripples of options ( #11955 ) ( 4ac64da ) sidenav: remove margin from content instead of setting zero ( #11986 ) ( 82016c2 ) default config check is not checking test builder ( #11816 ) ( c36e6f3 ) parse5 not listed as dependency for material ( #11981 ) ( ce90bed ) slide-toggle: not updating model from toggle method ( #11846 ) ( e69cf76 ) sort: arrow visible while parent row is being animated ( #11827 ) ( de13ec9 ) tab-nav-bar: ripples still showing up when globally disabled ( #11865 ) ( 4f3cbfe ) table: use solid color for sorting arrow ( #11533 ) ( d083d76 ), closes #11340 tabs: maintain selected tab when new tabs are added or removed ( #9132 ) ( 1e164b6 ) tabs: unable to set aria-label or aria-labelledby on tab ( #11898 ) ( 8e44f89 ) tree: fix dynamic tree example and demo not closing children ( #11148 ) #11728 ( 128e2a0 ) 6.3.1 string-sole (2018-06-26) Bug Fixes button-toggle: emit change event when button is clicked ( #11886 ) ( 828b3c0 ) button-toggle: use native button and aria-pressed for button-toggle ( #10990 ) ( b959e18 ) menu: panel positions not changing if position is updated after first open ( #11707 ) ( 671ad82 ), closes #11668 overlay: explicitly implement OverlayReference. ( #11824 ) ( 3e99c46 ) progress-spinner: create internal default to force animations to always be on ( #11462 ) ( 11f3993 ) select: don't blur label when trigger is blurred while the panel is opened ( #11537 ) ( 6c9c3fe ) table: use solid color for sorting arrow ( #11533 ) ( d083d76 ), closes #11340 tree: fix dynamic tree example and demo not closing children ( #11148 ) #11728 ( 128e2a0 ) 6.3.0 tourmaline-transom (2018-06-18) Bug Fixes autocomplete: model not being updated when typing in input with disabled autocomplete ( #11695 ) ( 429d3bc ), closes #11678 autofill: listen for animation events outside the zone, but emit autofill events inside ( #11798 ) ( 48dda50 ) badge: remove badge margins ( #11599 ) ( f042068 ), closes #11596 badge, tooltip: Add A11yModule ( #11586 ) ( 75d116d ) checkbox: high contrast accessibility improvements ( #11633 ) ( 6220b72 ), closes #11623 datepicker: inconsistent arrow color between popup and touch modes ( #11535 ) ( bb297c9 ) datepicker: make date range aria-live and fix active date logic ( #11144 ) ( 8063c26 ) dialog: inconsistently resetting dimensions ( #11723 ) ( e95623d ) dialog: not closing correctly when detached externally ( #11516 ) ( be1b5e6 ) expansion: expansion panel blending in with background in high contrast mode ( #11659 ) ( 8842fb2 ) form-field: fix wrong underline color in error state ( #11447 ) ( 3681ddf ), closes #11436 form-field: inaccessible in high contrast mode ( #11736 ) ( 0a39595 ), closes #6257 #6383 #9009 icon: IE/Edge ignoring style tags inside inline SVG ( #11531 ) ( 555d8f4 ), closes #11458 menu: reintroduce panel position classes ( #11612 ) ( 703da89 ), closes #11597 menu: toggle aria-expanded attribute on menu trigger ( #11751 ) ( bf88702 ) overlay: flexible overlay with push not handling scroll offset and position locking ( #11421 ) ( 55aaa03 ) overlay: global overlay incorrectly handling left/right position when RTL is set on body ( #11412 ) ( 2a51565 ), closes #11393 overlay: unable to reset overlay size properties to initial value ( #11592 ) ( ba4f2af ) paginator: page size selections being truncated with outline and fill appearances ( #11722 ) ( 255c10a ), closes #11681 progress-bar: not usable in high contrast mode ( #11651 ) ( ff78ade ), closes #11623 progress-spinner: animation not working when default size is set via token ( #11688 ) ( 7c1db46 ), closes #11687 schematics: add app prefix to components ( #11738 ) ( 84634cc ) schematics: remove temp path #11198 ( #11424 ) ( b349de3 ) scrolling: scrollable elementScrolled stream not being completed on destroy ( #11518 ) ( 9ab6cd0 ) select: disable all animations when using NoopAnimationsModule ( #11594 ) ( fa60fe4 ), closes #10590 select: handle null values in multi-select ( #11792 ) ( dd8c807 ) select: inconsistent openedChange event dispatched between browsers ( #11461 ) ( 4ef9cb0 ) select: label not being read out when using mat-label in mat-form-field ( #11710 ) ( e349fe4 ) select: multi-select checkbox not having an outline in high contrast mode ( #11667 ) ( 082efa3 ) select: unable to use the MatOption select/deselect API to toggle options ( #11528 ) ( 81537af ), closes #9314 selection-list: support selecting all via ctrl + a ( #11502 ) ( e6d9494 ) sidenav: scrollable instance not exposed when explicitly specifying content element ( #11517 ) ( 436ac7d ), closes #10884 slider: value not being rounded when using keyboard and decimal step ( #11574 ) ( 61f0f2a ), closes #10951 stepper: reading out wrong amount of options with NVDA on Firefox ( #11711 ) ( 56e703f ), closes #11694 table: minor styling fix to expandable rows ( #11569 ) ( 3d6f326 ) tabs: Add role to mat-tab-nav-bar and mat-tab-link ( #11410 ) ( fd23c02 ) tabs: Set initial ink bar width as 0 width ( #11585 ) ( c977763 ) tabs: tab position and amount of tabs not being read out by screen reader ( #11694 ) ( 260afcf ), closes #11369 tabs: update mat-tab-link to set aria-current when active ( #11409 ) ( 103acc4 ) tooltip: don't open for mouse and touch focus ( #10728 ) ( 74f4364 ) tooltip: long continuous strings overflowing tooltip container ( #11363 ) ( 2786b34 ) Features table: support sticky headers, footers, and columns ( #11483 ) ( edbbc1b ) bottom-sheet: switch to providedIn syntax ( 59554c4 ) collections: add isMultipleSelection function to SelectionModel ( #11560 ) ( 0675e05 ) schematics: add address form schematic ( #11425 ) ( 9b80a4c ) snackbar: switch to providedIn syntax ( a21a4f2 ) 6.2.1 crystal-caribou (2018-06-04) Bug Fixes datepicker: inconsistent arrow color between popup and touch modes ( #11535 ) ( f974324 ) dialog: not closing correctly when detached externally ( #11516 ) ( bbb1d39 ) tooltip: don't open for mouse and touch focus ( a003b9a ), closes #10709 tooltip: long continuous strings overflowing tooltip container ( #11363 ) ( c5f1293 ) 6.2.0 bamboo-shampoo (2018-05-29) Highlights An initial implementation of virtual scrolling is now available in @angular/cdk-experimental. Please note that, since these components are still experimental, they may have bugs and the API is subject to change. Bug Fixes autosize: textarea receiving focus on init ( #11460 ) ( 7d447c2 ), closes #11451 #11308 button: disable all animations when using the NoopAnimationsModule ( #11477 ) ( 1a75152 ), closes #10590 checkbox, radio: remove webkit tap highlights ( #11349 ) ( 4b2cc1a ) form-field: disable all animations when using NoopAnimationsModule ( #11371 ) ( 9062640 ), closes #10590 form-field: infinite loop when using outline appearance and element isn't in the DOM ( #11406 ) ( e592615 ), closes #11329 menu: lazy-rendered content being duplicated when toggling quickly ( #11348 ) ( fb5cdb2 ), closes #11331 nav-schematics: update isHandset$ type and fix template expression ( #11448 ) ( b9041e3 ), closes #11445 #11441 overlay: incorrect position when using flexible positioning and rtl on the body ( #11393 ) ( acc24c4 ), closes #11387 accordion, expansion: prevent nested expansion panels from registering to the same accordion ( #11342 ) ( 9bf720a ) select: panel content blurry in some browsers ( #11434 ) ( 3dc3fcd ) slide-toggle: disable animations when using NoopAnimationsModule ( #11414 ) ( 1d96d5a ), closes #10590 slider: disable animations when using NoopAnimationsModule ( #11422 ) ( cf17ef7 ), closes #10590 table: data source not unsubscribing from render changes subscription ( #11394 ) ( 9313f18 ), closes #11382 Features a11y: add cdkAriaLive directive ( #11352 ) ( 64a70ad ) expansion: allow expansion indicator positioning ( #8199 ) ( 51d859f ) overlay: allow for Directionality instance to be passed in ( #11411 ) ( be577b1 ) progress-spinner: add injection token for configuring the diameter and stroke globally ( #11493 ) ( c3899cf ), closes #11490 collections: add ArrayDataSource, a DataSource wrapper for Array and Observable ( #11354 ) ( f59658d ) Performance Improvements overlay: only compute and emit position changes if there are subscribers ( #11431 ) ( c68ccc9 ) 6.1.0 plaster-parliament (2018-05-21) Features autocomplete: add the ability to set a different panel connection element ( #11284 ) ( efe37f5 ), closes #11269 autocomplete: allow autocomplete panel to be disabled ( #11142 ) ( e8bc0e9 ) button: add isIconButton and isRoundButton properties ( #11226 ) ( 318d699 ) cdk-input: change autosize to be bindable ( #9884 ) ( #11167 ) ( 2d227b7 ) elevation: add $opacity argument to elevation mixins ( #10877 ) ( fbf5648 ) observe-content: refactor so logic can be used without directive ( #11170 ) ( ba57852 ) overlay: add support for automatically setting the transform-origin based on the current position ( #10868 ) ( d26735c ) overlay: expose flexible overlay features through CdkConnectedOverlay ( #11069 ) ( ef0229c ) table: allow multiple header/footer rows ( #11245 ) ( 641edc3 ) table: enable multiple data rows ( #11116 ) ( c15e307 ) tree: Add support for trackBy ( #11267 ) ( ff34dac ) Bug Fixes animations: prevent animations when in a noopanimations module ( #10881 ) ( 81b6a78 ) autocomplete: panel blending in with background in high contrast mode ( #11190 ) ( 9e9daf8 ) autocomplete: return consistent output from panelClosingActions ( #8533 ) ( 2815607 ), closes #7553 autosize: error thrown by IE in some cases when component is destroyed ( #11109 ) ( af09c8f ) button: ripples not being clipped by button border radius ( #11181 ) ( 6e026d7 ), closes #11160 button-toggle: fix button toggle with 0 value not checked ( #11292 ) ( 9a8cd4d ) checkbox: disable animations when using NoopAnimationsModule ( #11249 ) ( 93b5892 ), closes #11205 checkbox: update MatCheckbox disabled setter to trigger change detection ( #11098 ) ( ce1b517 ) chips: stacked chips overflowing chip list ( #11143 ) ( d3c8cc5 ) datepicker: dateInput event being fired if the value hasn't changed ( #10952 ) ( a62cdb6 ) datepicker: don't autofocus calendar cell if used outside of overlay ( #11049 ) ( 2897797 ) dialog: min-height and max-height not having an effect on dialog container ( #11235 ) ( a20dfd3 ) dialog,bottom-sheet: don't provide directionality if no direction is set ( #11285 ) ( cd37a54 ), closes #11262 expansion-panel: inconsistent margin for nested panels ( #11305 ) ( 1bf5c41 ), closes #11254 focus-monitor: don't null-out focus until after event is finished with capture bubble ( #10721 ) ( 0b7572b ) focus-monitor: reenter ngzone before emitting ( #10549 ) ( 37193d8 ) form-field: error on IE11 when using outline appearance ( #11108 ) ( c9bd05c ) icon: log full error message when icon set fails to load ( #10915 ) ( fbf06bb ) icon: remove duplicate icon registry provider ( #11214 ) ( 67a6aa1 ) nav-schematics: Subscribe to breakpoint observable ( #11310 ) ( d52acc9 ) ng-add: install added packages ( #11163 ) ( be08eb9 ) overlay: injection errors for scroll strategy providers in lazy-loaded modules ( #11213 ) ( 0cda47c ), closes #10820 radio: disable animations when using NoopAnimationsModule ( #11296 ) ( af78b97 ) radio: update set disabled directly on MatRadioButton to trigger change detection ( #11056 ) ( 860ce13 ) ripple: disable ripple animations when using NoopAnimationsModule ( #11205 ) ( 9715928 ) sidenav: disable all sidenav animations when using NoopAnimationsModule ( #11180 ) ( 03e749a ) sidenav-demo: trigger event opened ( #11225 ) ( 853b04c ) snack-bar: snack bar not animating in if no positions are passed in ( #11230 ) ( f5377dd ), closes #11197 stepper: error being thrown if selected step is accessed too early ( #11186 ) ( 4638833 ), closes #11158 stepper: handle keyboard interactions if direction changes after init ( #11067 ) ( 116ee60 ) table: add missing constructors ( #11252 ) ( 8e7dd80 ) tabs: handle long tab labels in mat-tab-nav-bar ( #10903 ) ( 61dd937 ) tooltip: not handling direction changes after the first open ( #11324 ) ( abc3d38 ) add custom theme using string ref in angular.json ( #11189 ) ( 33b5df4 ), closes #11188 Performance Improvements sidenav: avoid hitting zone continuously when using autosize option ( #11231 ) ( c936bc9 ), closes #11215 6.0.2 chocolate-reality (2018-05-14) Bug Fixes autocomplete: panel blending in with background in high contrast mode ( #11190 ) ( 23fca28 ) autosize: error thrown by IE in some cases when component is destroyed ( #11109 ) ( 408134f ) button: ripples not being clipped by button border radius ( #11181 ) ( a1d98a9 ), closes #11160 checkbox: update MatCheckbox disabled setter to trigger change detection ( #11098 ) ( 22baefc ) datepicker: dateInput event being fired if the value hasn't changed ( #10952 ) ( f3d436d ) dialog: min-height and max-height not having an effect on dialog container ( #11235 ) ( 7ea3900 ) icon: remove duplicate icon registry provider ( #11214 ) ( c66d6a5 ) add custom theme using string ref in angular.json ( #11189 ) ( f0b1529 ), closes #11188 ripple: disable ripple animations when using NoopAnimationsModule ( #11205 ) ( 29d7330 ) sidenav: disable all sidenav animations when using NoopAnimationsModule ( #11180 ) ( 0c7998c ) stepper: error being thrown if selected step is accessed too early ( #11186 ) ( 834c6f7 ), closes #11158 stepper: handle keyboard interactions if direction changes after init ( #11067 ) ( b15b8be ) table: add missing constructors ( #11252 ) ( f02bb05 ) tabs: handle long tab labels in mat-tab-nav-bar ( #10903 ) ( f5eda86 ) Performance Improvements sidenav: avoid hitting zone continuously when using autosize option ( #11231 ) ( 2764ea6 ), closes #11215 6.0.1 glass-spaceship (2018-05-07) Bug Fixes chips: stacked chips overflowing chip list ( #11143 ) ( 70ba46e ) datepicker: don't autofocus calendar cell if used outside of overlay ( #11049 ) ( 2a02ce2 ) focus-monitor: don't null-out focus until after event is finished with capture bubble ( #10721 ) ( 71ac0ae ) focus-monitor: reenter ngzone before emitting ( #10549 ) ( 8be7d4e ) form-field: error on IE11 when using outline appearance ( #11108 ) ( 3f87309 ) icon: log full error message when icon set fails to load ( #10915 ) ( f6af40c ) ng-add: install added packages ( #11163 ) ( bf9d5bb ) radio: update set disabled directly on MatRadioButton to trigger change detection ( #11056 ) ( a4597c9 ) 6.0.0 vibranium-vivarium (2018-05-03) Highlights MatTree component is now available, @tinayuangao recently gave a talk at ng-conf about the new component mat-table and cdk-table now native table elements in addition to the existing display: flex based layout MatTable now supports having an optional footer row Schematics are now available for Angular Material, @jelbourn recently gave a talk at ng-conf about using schematics MatTabs content can now be lazy loaded MatBadge and MatBottomSheet components are now available @angular/cdk/overlay has a new positioning strategy available, FlexibleConnectedPositionStrategy , which intelligently handles sizing and positioning to ensure that overlay contents always remain on the screen MatIcon now allows SVG icons to be registered from strings @angular/cdk/keycodes now includes most keycodes you might need for building a web application 130+ bug fixes Docs for v5 are now available at v5.material.angular.io A version picker is available material.angular.io to switch between docs versions Upgrading to Angular Material 6.0 With the Angular CLI v6.0+, you can use the ng update command to automatically migrate to the new APIs ng update @angular/material NOTE: There may be some cases where the tool may be unable to automatically migrate, but will notify you of those cases Breaking Changes A number of APIs that were deprecated during beta have been removed, see here for complete list See ng update tooling above to automatically migrate to the new APIs Bug Fixes autocomplete: panel direction not being updated if the trigger direction changes ( #10916 ) ( 8c30cee ) button-toggle: not usable in high contrast mode ( #11097 ) ( dd2f465 ) dialog: add generic parameter for the dialog result to open method ( #11059 ) ( bf1bdc0 ) form-field: inconsistent underline height at different DPIs ( #11062 ) ( 0f7d503 ) form-field: scrollbars appear on autosize textarea in chrome ( #10811 ) ( 385f96d ) form-field,select: handle form field controls inside toolbar ( #10627 ) ( 1a3993e ) list: selection list always firing change event for selectAll and deselectAll ( #11029 ) ( 54c0b00 ) menu: not updating panel direction after init ( #11070 ) ( 294ba3c ) menu: unable to open same sub-menu from different triggers and not picking up indirect descendant items ( #10132 ) ( 5393bfe ) overlay: error when rendering flexible overlay on the server ( #11072 ) ( 422d102 ) paginator: handle negative pageSize and pageIndex correctly ( #11068 ) ( 3f5e481 ) select: losing focus position when tabbing away after clicking inside multi select ( #10905 ) ( c6ad1f8 ) select: unable to toggle multi select option after using the mouse ( #11061 ) ( 01d0993 ) sidenav: box shadow visible while closed when rendering on the server ( #10969 ) ( cfe6c1d ) 6.0.0-rc.14 (2018-04-30) Bug Fixes card: flat card selector not working ( #11028 ) ( b67813e ), closes #11014 ci: Shard tests on CI across 3 browsers ( #11048 ) ( a647579 ) overlay: always dispatch keyboard events to top overlay in OverlayKeyboardDispatcher ( #10807 ) ( d96fa07 ), closes #10799 schematics: allow more tsconfig locations for ng update ( #11058 ) ( 7bbc040 ) 6.0.0-rc.13 (2018-04-26) Bug Fixes accordion: complete accordion item emitters on destroy ( #10858 ) ( b8e97b2 ) bottom-sheet: server-side rendering error when opened ( #10487 ) ( 6d9ed8a ) chips: unable to bind to chip input placeholder ( #10855 ) ( acb0bd0 ), closes #10848 datepicker: allow MatCalendarHeader to be re-used inside a custom header ( #10856 ) ( 153dfb8 ) datepicker: calendar stateChanges not being completed ( #10960 ) ( f08a4ec ) datepicker: producing wrong selector for disabled dates for themes inside a selector ( #10904 ) ( 54301da ), closes #10889 examples: add missing module imports and exports ( #10947 ) ( 069e1df ) form-field: inconsistent border width across outline gap in Chrome ( #10956 ) ( a609acf ), closes #10710 form-field: make outline appearance work in situations where the\u2026 ( #10943 ) ( a0c77e2 ) menu: not closing sibling sub-menus when hovering over disabled items ( #10396 ) ( 3b7fe64 ) menu: set proper focus origin when the user starts using the keyboard after opening with the mouse ( #11000 ) ( ec3e3e7 ), closes #10980 overlay: clear element reference on destroy ( #10486 ) ( 0e21443 ) overlay: handle OnDestroy in FullscreenOverlayContainer and use document injection token ( #10773 ) ( d2b183e ) overlay: unable to use overlay provider during app initialization ( #10975 ) ( e4817bb ), closes #10967 overlay: wrong import path in distributed overlay styles ( #10999 ) ( 257a777 ), closes #10908 radio: radios aren't checkable when the value is falsy ( #10315 ) ( 4e48cf4 ) ripple: only persist top ripple on pointer down ( #10976 ) ( a8d99da ), closes #10973 schematics: include 6.0.0 RC releases for migrations ( #11010 ) ( d52bc1d ) schematics: support basic style asset string ( #10989 ) ( 45251ff ), closes #10912 select,autocomplete: mat-option theme not being applied correctly when nested inside a selector ( #10889 ) ( 1a60a7a ) slider: truncate long decimal values ( #10959 ) ( aa752cd ), closes #10951 sort: arrow not centered vertically inside multiline headers ( #10619 ) ( 99af109 ), closes #10604 tab: add flex-basis hack for IE11 ( #10369 ) ( c367e66 ), closes #10237 table: data source can listen for init from sort, page ( #10593 ) ( 99f39ca ) tabs: tab-nav-link disableRipple input not working ( #10643 ) ( 45e1b29 ), closes #10636 text-field: autosize textarea not scrolling to end of input on firefox ( #10403 ) ( d0a4e9f ), closes #10400 toolbar: improved high contrast accessibility ( #10465 ) ( e409ec4 ) tree: add theme typography to angular-material-theme mixin ( #11015 ) ( a292d31 ) tree: remove invalid aria attribute ( #10935 ) ( a275dc1 ) Features accordion: allow intermediate elements between accordion and expansion panel ( #11016 ) ( 85252b3 ) cdk/keycodes: add missing keycodes ( #10891 ) ( c976040 ) overlay: allow multiple classes to be assigned to the backdrop ( #10531 ) ( 540226c ), closes #10529 paginator: expose previousPageIndex inside PageEvent ( #10759 ) ( 85039ca ), closes #10758 selection-list: add support for compareWith function ( #10501 ) ( 7747e66 ) sidenav: allow for auto focusing to be disabled ( #10933 ) ( 4ae63b3 ), closes #10402 table: add optional footer row ( #10330 ) ( 6df3709 ) tree: add level to tree node context ( #10985 ) ( f1589db ) 6.0.0-rc.12 (2018-04-17) Bug Fixes breakpoint-observer: split comma separated queries into separte queries ( #10789 ) ( 7c1549a ) datepicker: high contrast accessibility improvements ( #10363 ) ( 4d23b08 ) datepicker: update popup direction if datepicker direction changes ( #10871 ) ( 4cc72b8 ) directionality: complete change event on destroy ( #10826 ) ( b057391 ) form-field: incorrect label position for outline style in prod mode ( #10803 ) ( 7484321 ) menu: svg icons not aligned inside menu item ( #10837 ) ( 2af9c35 ), closes #10832 schematics: correct path to ng-update entry-point ( #10850 ) ( 6a82c65 ) schematics: ignore e2e projects w/ ng add ( #10883 ) ( 5554506 ) schematics: make v6 migration work ( #10853 ) ( c9f5be6 ) scrolling: complete ScrollDispatcher.scrolled on destroy ( #10794 ) ( 41be069 ) select: open method triggered twice on click ( #7619 ) ( 991daac ) selection-list: toggle newly-focused item when pressing arrow key + shift ( #10828 ) ( 975fe7e ) stepper: not resetting to first step when some of the steps aren't editable ( #10804 ) ( 5df8d01 ), closes #10801 table: Allow any iterable to be used as for columns in headerrow and row defs ( #10822 ) ( 92e5f55 ) tree: make toggle non-recursive by default ( #10879 ) ( 5920bc3 ) stepper: add animationDone event ( #10752 ) ( 358a12d ), closes #9087 6.0.0-rc.11 (2018-04-13) Bug Fixes schematics: Fix a number of issues with ng-update schematic for v5 - v6 migration 6.0.0-rc.5 (2018-04-13) Bug Fixes schematics: move ng-update under correct location ( d98fb35 ) 6.0.0-rc.4 (2018-04-13) Bug Fixes schematics: add ng-update config to package.json ( #10844 ) ( 0a3cfa7 ) 6.0.0-rc.3 (2018-04-12) Bug Fixes button-toggle: selected value not being maintained when changing value while toggles are being swapped out ( #10707 ) ( dec91ce ), closes #10690 focus-monitor: server-side rendering error when using focusVia ( #10729 ) ( 44a0a4f ) radio: checked radio button indistinguishable in high contrast mode ( #10753 ) ( a74099f ) schematics: schematics now functioning with Angular CLI v6 ( #10703 ) ( 023e8f4 ) 6.0.0-rc.2 (2018-04-11) Features coercion: add utility for coercing CSS values ( #10654 ) ( e30824c ) icon: allow SVG icons to be registered from strings ( #10757 ) ( 57efa13 ), closes #3132 overlay: add the ability to set the default offsets on FlexibleConnectedPositionStrategy ( #10555 ) ( bcff93e ) table: support native table selectors ( #10594 ) ( 7774da2 ) Bug Fixes autocomplete: panel width not being updated on window resize ( #10629 ) ( 2dc4e70 ) badge: incorrectly handling rtl ( #10630 ) ( 9c1f8a9 ) button-toggle: changed after checked error for repeated toggles with a preselected value ( #10612 ) ( 9a3d3e8 ) button-toggle: setting blank aria-label attribute by default ( #10605 ) ( 95dba59 ) datepicker: avoid accidental form submissions through calendar buttons ( #10515 ) ( edb57f9 ), closes #10514 datepicker: close datepicker popup on alt + up arrow ( #10662 ) ( 446ef66 ) datepicker: export MatCalendarHeader ( #10633 ) ( 5df1af6 ) datepicker: nested animation not working ( #10355 ) ( 9fff92f ), closes #9134 datepicker: overly broad selector in theme ( #10372 ) ( 5b7a6a3 ) datepicker: reformat valid values on blur ( #10777 ) ( 603dfa4 ), closes #10645 focus-monitor: hitting ngzone when using focusVia ( #10608 ) ( b38b966 ) focus-trap: wrong element being checked when logging deprecation warning ( #10578 ) ( 52493d1 ) form-field: run change detection when prefix or suffix changes ( #10670 ) ( 515cc06 ) form-field: server-side rendering error with outline appearance ( #10719 ) ( 39887da ) overlay: centered flexible positioning not working in some browsers ( #10701 ) ( dfc3b02 ) overlay: incorrect bottom offset using upward-flowing flexible position with a viewport margin ( #10650 ) ( 306b704 ) platform: change isBrowser check to use Angular PLATFORM_ID ( #10659 ) ( f023579 ) progress-spinner: set spinner width to match diameter. ( #10314 ) ( c64cb7e ) sidenav: remove dependency on OverlayModule ( #10357 ) ( 27ef2dc ) slide-toggle: run timeout outside the NgZone ( #10655 ) ( 6f7765e ) stepper: header icon collapsing with very long labels ( #10341 ) ( 5b5f2ee ), closes #10332 stepper: horizontal stepper cutting off bottom part of content ( #10644 ) ( 4fbde10 ), closes #10634 table: MatTableDataSource incorrectly sorting zero ( #10561 ) ( bcb5697 ), closes #10556 table,sort,paginator: incorrect spacing in rtl ( #10617 ) ( 46ca6ce ) tabs: hide mat-tab-nav-bar ink bar when no link is active ( #9701 ) ( 51206ee ), closes #9671 tabs: tab content portal not being cleaned up on destroy ( #10661 ) ( 2e3393a ) theme: apply base theme classes at location the theme is included ( #10737 ) ( 2aba8ab ) tooltip: error when updating position while closed ( #10704 ) ( 6449ae1 ) tree: fix exported symbol cannot be named error. ( #10626 ) ( 6729b6d ) tree: fix nested node cannot expand/collapse multiple times ( #10671 ) ( 5570beb ) tree: fix nested node is not working ( #10635 ) ( 7857b92 ) 6.0.0-rc.1 (2018-04-05) Bug Fixes autocomplete: panel width not being updated on window resize ( #10629 ) ( 2dc4e70 ) badge: incorrectly handling rtl ( #10630 ) ( 9c1f8a9 ) button-toggle: changed after checked error for repeated toggles with a preselected value ( #10612 ) ( 9a3d3e8 ) button-toggle: setting blank aria-label attribute by default ( #10605 ) ( 95dba59 ) datepicker: close datepicker popup on alt + up arrow ( #10662 ) ( 446ef66 ) datepicker: export MatCalendarHeader ( #10633 ) ( 5df1af6 ) datepicker: overly broad selector in theme ( #10372 ) ( 5b7a6a3 ) focus-monitor: hitting ngzone when using focusVia ( #10608 ) ( b38b966 ) focus-trap: wrong element being checked when logging deprecation warning ( #10578 ) ( 52493d1 ) form-field: run change detection when prefix or suffix changes ( #10670 ) ( 515cc06 ) overlay: incorrect bottom offset using upward-flowing flexible position with a viewport margin ( #10650 ) ( 306b704 ) progress-spinner: set spinner width to match diameter. ( #10314 ) ( c64cb7e ) sidenav: remove dependency on OverlayModule ( #10357 ) ( 27ef2dc ) slide-toggle: run timeout outside the NgZone ( #10655 ) ( 6f7765e ) stepper: horizontal stepper cutting off bottom part of content ( #10644 ) ( 4fbde10 ), closes #10634 table,sort,paginator: incorrect spacing in rtl ( #10617 ) ( 46ca6ce ) tabs: tab content portal not being cleaned up on destroy ( #10661 ) ( 2e3393a ) tooltip: error when updating position while closed ( #10704 ) ( 6449ae1 ) tree: fix exported symbol cannot be named error. ( #10626 ) ( 6729b6d ) tree: fix nested node cannot expand/collapse multiple times ( #10671 ) ( 5570beb ) tree: fix nested node is not working ( #10635 ) ( 7857b92 ) Features coercion: add utility for coercing CSS values ( #10654 ) ( e30824c ) overlay: add the ability to set the default offsets on FlexibleConnectedPositionStrategy ( #10555 ) ( bcff93e ) table: support native table selectors ( #10594 ) ( 7774da2 ) 6.0.0-rc.0 (2018-03-29) Known issues MatButtonToggleGroup causes ExpressionChangedAfterItHasBeenCheckedError ( #10607 ) focus-trap: wrong element being checked when logging deprecation warning ( #10578 ) Bug Fixes bottom-sheet: handle overflowing content ( #10533 ) ( cb6d469 ) datepicker: add back MAT_DATE_LOCALE_PROVIDER ( #10602 ) ( 7fd7ad3 ) datepicker: incorrect icon color ( #10458 ) ( 4e298a6 ) datepicker: set canPush to false for position strategy ( #10609 ) ( 67c7348 ) drawer: better handling of high contrast mode ( #10418 ) ( ff2860f ) input: inaccurate textarea check during server-side render ( #10467 ) ( dda1d04 ) overlay: CdkConnectedOverlay ignoring offset from position config ( #10451 ) ( 1659004 ) select: MatOption state change stream not being completed ( #10540 ) ( b8bb62f ) slider: unable to slide to max value under certain conditions ( #10364 ) ( d50fd3d ), closes #10148 sort: add aria-sort to host when sorted ( #6891 ) ( 63f713f ) tree: fix the MatTreeNodeOutlet not exported issue ( #10581 ) ( 0b8240c ) tree: improve nested tree node fix nested tree control ( #10454 ) ( 2ddc257 ) Features cdk/keycodes: add 0 and 9 numerical keypad codes ( #10562 ) ( d5cd0d6 ) stepper: allow number icon to be customized and expose template context variables ( #10516 ) ( 946fd84 ), closes #10513 tabs: Allow tab ink bar positioning to be determined with a provided method. ( #9972 ) ( 02f5256 ) tooltip: allow for position to be updated while open ( #10362 ) ( 04045d2 ) 6.0.0-beta.5 (2018-03-23) This release contains many breaking changes due to the deletion of deprecated targets. We are currently working on a tool that will help migrate your app if you are affected by these changes. We expect to have the tool ready when we release version 6.0.0. BREAKING CHANGES typography: The $mat-font-family variable has been removed. Use the Material typography or redeclare in your project $mat-font-family: Roboto, 'Helvetica Neue', sans-serif; . datepicker: MatDatePicker now requires an animations module to be loaded datepicker: selectedChanged has been removed. Use dateChange or dateInput from MatDatepickerInput . button-toggle: selected is no longer an input and is now readonly. snack-bar: SHOW_ANIMATION has been removed. HIDE_ANIMATION has been removed. icon: The _document parameter in the MatIconRegistry constructor is now required. list: selectionChange on the MatListOption , which was deprecated in 5.0.0 has been removed. Use selectionChange on the MatSelectionList instead. MatListOptionChange which was deprecated in 5.0.0 has been removed. slider: thumb-label which was deprecated in 5.0.0 has been removed. Use thumbLabel instead. tick-interval which was deprecated in 5.0.0 has been removed. Use tickInterval instead. tooltip: tooltip-position which was deprecated in 5.0.0 has been removed. Use matTooltipPosition instead. The _defaultOptions parameter in the MatTooltip constructor is now required. select: onOpen , which was deprecated in 5.0.0, has been removed. onClose , which was deprecated in 5.0.0, has been removed. change , which was deprecated in 5.0.0, has been removed. chips: remove which was deprecated in 5.0.0 has been removed. Use removed instead. destroy which was deprecated in 5.0.0 has been removed. Use destroyed instead. text-field: The _ngZone parameter in the CdkTextareaAutosize constructor is now required. sidenav: The MatDrawerToggleResult class has been turned into an type. The promise returned from open , close and toggle now resolves with the MatDrawerToggleResult type rather than the class. align which was deprecated in 5.0.0 has been removed. Use position instead. open which was deprecated in 5.0.0 has been removed. Use opened instead. close which was deprecated in 5.0.0 has been removed. Use closed instead. align-changed which was deprecated in 5.0.0 has been removed. Use positionChanged . form-field: - dividerColor which was deprecated in 5.0.0 has been removed. Use color instead. floatPlaceholder which was deprecated in 5.0.0 has been removed. Use floatLabel instead. overlay: ConnectedOverlayDirective which was deprecated in 5.0.0 has been removed. Use CdkConnectedOverlay instead. OverlayOrigin which was deprecated in 5.0.0 has been removed. Use CdkOverlayOrigin instead. hasBackdrop which was deprecated in 5.0.0 has been removed. Use cdkConnectedOverlayHasBackdrop instead. open which was deprecated in 5.0.0 has been removed. Use cdkConnectedOverlayOpen instead. scrollStrategy which was deprecated in 5.0.0 has been removed. Use cdkConnectedOverlayScrollStrategy instead. backdropClass which was deprecated in 5.0.0 has been removed. Use cdkConnectedOverlayBackdropClass instead. minHeight which was deprecated in 5.0.0 has been removed. Use cdkConnectedOverlayMinHeight instead. minWidth which was deprecated in 5.0.0 has been removed. Use cdkConnectedOverlayMinWidth instead. height which was deprecated in 5.0.0 has been removed. Use cdkConnectedOverlayHeight instead. width which was deprecated in 5.0.0 has been removed. Use cdkConnectedOverlayWidth instead. offsetX which was deprecated in 5.0.0 has been removed. Use cdkConnectedOverlayOffsetX instead. offsetY which was deprecated in 5.0.0 has been removed. Use cdkConnectedOverlayOffsetY instead. positions which was deprecated in 5.0.0 has been removed. Use cdkConnectedOverlayPositions instead. origin which was deprecated in 5.0.0 has been removed. Use cdkConnectedOverlayOrigin instead. tabs: mat-dynamic-height which was deprecated in 5.0.0 has been removed. Use dynamicHeight instead. selectChange which was deprecated in 5.0.0 has been removed. Use selectedTabChange . checkbox: align which was deprecated in 5.0.0 has been removed. Use labelPosition instead. Note that the values are different. form-field: - The following deprecated CSS classes have been removed: mat-input-container instead use mat-form-field mat-input-invalid instead use mat-form-field-invalid mat-input-wrapper instead use mat-form-field-wrapper mat-input-flex instead use mat-form-field-flex mat-input-prefix instead use mat-form-field-prefix mat-input-infix instead use mat-form-field-infix mat-input-placeholder-wrapper instead use mat-form-field-label-wrapper mat-input-placeholder instead use mat-form-field-label mat-input-suffix instead use mat-form-field-suffix mat-input-underline instead use mat-form-field-underline mat-input-ripple instead use mat-form-field-ripple mat-input-subscript-wrapper instead use mat-form-field-subscript-wrapper mat-input-hint-wrapper instead use mat-form-field-hint-wrapper mat-input-hint-spacer instead use mat-form-field-hint-spacer mat-form-field-placeholder-wrapper instead use mat-form-field-label-wrapper mat-form-field-placeholder instead use mat-form-field-label a11y: The renderer parameter in FocusMonitor.monitor has been removed. cdk-focus-trap which was deprecated in 5.0.0 has been removed. Use cdkTrapFocus instead. autocomplete: The defaults parameter in the MatAutocomplete constructor is now required. form-field: MatFormFieldControl.shouldPlaceholderFloat which was deprecated in 5.0.0 has been removed. * MatFormFieldControl.shouldLabelFloat is no longer optional and should be used instead. FloatPlaceholderType which was deprecated in 5.0.0 has been removed. Use FloatLabelType instead. PlaceholderOptions which was deprecated in 5.0.0 has been removed. Use LabelOptions instead. MAT_PLACEHOLDER_GLOBAL_OPTIONS which was deprecated in 5.0.0 has been removed. Use MAT_LABEL_GLOBAL_OPTIONS instead. snack-bar: extraClasses which was deprecated in 5.0.0 has been removed. Use panelClass instead. portal: The portalHost and cdkPortalHost inputs which were deprecated in 5.0.0 have been removed. Use cdkPortalOutlet instead. Features button-toggle: general component cleanup and support value input in multiple mode ( #9191 ) ( a403bac ), closes #2773 #2773 #9058 cdk: switch injectables to new scope API ( #10301 ) ( 6405da9 ) cdk-input: move input autofill and autosize utils into cdk ( #9831 ) ( ced9c90 ) chips: allow for separatorKeyCodes to be configured globally ( #10264 ) ( 3c8a498 ), closes #10256 datepicker: add animation to calendar popup ( #8999 ) ( c42549e ) datepicker: Add Custom Header to DatePicker ( #9639 ) ( 4e1bb26 ) form-field: allow setting default appearance via provider ( #9815 ) ( 158b1db ) icon: add input for inline styling of icons ( #9984 ) ( be1fc08 ) icon: add utility to mirror icons in RTL ( #10327 ) ( 11a3fe1 ), closes #10045 material: use scoped injectables ( #10507 ) ( f7b5d34 ) overlay: add support for flexible connected positioning ( #9153 ) ( 27e5f6e ), closes #6534 #2725 #5267 schematics: dashboard schematic ( #10011 ) ( 6273d6a ) schematics: navigation schematic ( #10009 ) ( 279c112 ) schematics: table schematic ( #10012 ) ( e7533a5 ) tabs: support stretched tabs in mat-tab-nav-bar ( #10368 ) ( 89ea485 ), closes #8871 Bug Fixes badge: invalid style declaration and too broad transition ( #10433 ) ( c14cf7c ) bottom-sheet: error when attempting to open multiple instances quickly ( #10147 ) ( 34e96f5 ) button: theme font color being overwritten ( #9771 ) ( c3a8d0c ), closes #4614 #9231 #9634 checkbox: setting blank aria-label by default ( #10281 ) ( c12d7c4 ) chip-list: set key manager active index to -1 when blurred ( #10335 ) ( b10fff4 ) chips: form field label pointing to non-existing elements ( #9908 ) ( 9337ae1 ) datepicker: server-side rendering error for disabled input ( #10249 ) ( af4fc9b ), closes #10248 icon: namespace error when registering an icon on the server ( #10175 ) ( 498534b ), closes #10170 input: setting blank placeholder by default ( #10277 ) ( 889a9f2 ) overlay: clear last calculated position when new set of positions is provided ( #10462 ) ( cdb6e40 ), closes #10457 overlay: incorrect bounding box bottom position when page is scrolled and content is flowing upwards ( #10463 ) ( 1dd8a27 ) overlay: incorrect bounding box styles if position is exactly zero ( #10470 ) ( eefa9c4 ) overlay: opaque backdrop appearing solid in high contrast mode ( #10252 ) ( 8366ec6 ) select: scroll strategy token cannot inject overlay ( #10535 ) ( 3eb71c2 ) table: move padding from rows to cells ( #10499 ) ( e0321db ) tree: fix mat-tree paddings ( #10349 ) ( d065aea ) tree: invalid style declaration during server-side rendering ( #10326 ) ( c205749 ), closes #10131 Code Refactoring a11y: remove 6.0.0 deletion targets ( #10325 ) ( 7a42c35 ) autocomplete: remove 6.0.0 deletion targets ( #10319 ) ( 0af5bca ) button-toggle: remove 6.0.0 deletion targets ( #10416 ) ( f0bf6e7 ) checkbox: remove 6.0.0 deletion targets ( #10342 ) ( 9f8eec1 ) chips: remove 6.0.0 deletion targets ( #10311 ) ( 1a8106d ) datepicker: remove 6.0.0 deletion targets ( #10413 ) ( 8bc7ee9 ) form-field: remove deprecated @Inputs ( #10294 ) ( f133da9 ), closes #10164 form-field: remove deprecated CSS classes ( #10296 ) ( aa2356d ) form-field: remove deprecated placeholder options. ( #10291 ) ( 26ee3e7 ) icon: remove 6.0.0 deletion targets ( #10389 ) ( e8af5ae ) list: remove 6.0.0 deletion targets ( #10398 ) ( d8a365e ) overlay: remove 6.0.0 deletion targets ( #10161 ) ( 54252d5 ) portal: remove 6.0.0 deletion targets ( #10257 ) ( 88abd9e ) select: remove 6.0.0 deletion targets ( #10163 ) ( 2b745c4 ) sidenav: remove 6.0.0 deletion targets ( #10279 ) ( c1d4666 ) slider: remove 6.0.0 deletion targets ( #10373 ) ( c8cc414 ) snack-bar: remove 6.0.0 deletion targets ( #10253 ) ( 88bb6f3 ) snack-bar: remove overly broad animation variables ( #10405 ) ( 9f3bf27 ) tabs: remove 6.0.0 deletion targets ( #10309 ) ( 4d05cda ) text-field: make constructor parameters required ( #10431 ) ( 5e5aae3 ) tooltip: remove 6.0.0 deletion targets ( #10344 ) ( 999cb57 ) typography: remove deprecated variable ( #10430 ) ( 9a1ae9c ) 6.0.0-beta.4 (2018-03-05) Highlights New tree component! The base behavior lives in @angular/cdk with Material Design flavors in @angular/material . Bug Fixes button: hide overflow of buttons to prevent overflow of hover/ripple ( #9424 ) ( 915a2b7 ) avoid layout jumping on elements with ripples in RTL ( #10026 ) ( 900716a ) chips: Update chips in chip list, and add margin to chip input ( #8579 ) ( 67e710c ) datepicker: improve native adapter DST handling ( #10068 ) ( 2fad732 ) dialog: actions not being pulled down when trapping focus ( #10007 ) ( 8a402d0 ), closes #9722 dialog: don't provide directionality if user injector has one already ( #10004 ) ( e3d7aec ) expansion-panel: entire body content being shown on animation start ( #10138 ) ( b4b76bd ), closes #10134 grid-list: default to LTR when Directionality value is empty ( #10111 ) ( 64ef3a8 ) grid-list: invalid style declaration during server-side rendering ( #10131 ) ( a27d9df ) list: align avatar size in dense list with spec ( #10028 ) ( d4a4f61 ), closes #10019 list-key-manager: not ignoring vertical key events in horizontal-only mode ( #10075 ) ( ffbb425 ) menu: detach lazily-rendered content when the menu is closed ( #10005 ) ( bb1803d ), closes #9915 overlay: hide overlay container when there are no attached overlays ( #10139 ) ( 4b528f6 ), closes #6882 #10033 paginator: first/last icons being thrown off on IE and Edge; simplify icon setup ( #9776 ) ( dd082cb ) select: animation jumping on IE11 ( #10050 ) ( a5909db ) selection-list: improve accessibility of selection list ( #10137 ) ( 51fce51 ), closes #9995 selection-list: repeated preselected items not appearing as selected with OnPush parent ( #10100 ) ( cdd224a ), closes #10090 tree: fix type error in tree ( #10095 ) ( 6d94aec ) Features list-key-manager: accept item references in setActiveItem ( #10029 ) ( 92ed9c8 ) menu: allow for backdrop class to be customized ( #10097 ) ( 2ece035 ), closes #10062 menu: allow for backdrop to be disabled ( #10070 ) ( e42f0bc ), closes #9938 snack-bar: add injection token for overriding the default options ( #9849 ) ( a943b36 ), closes #9821 stepper: require users to visit non-optional steps ( #10048 ) ( 77c8d8f ) tree: merge tree branch to master ( #9796 ) ( c975ca8 ) 6.0.0-beta.3 (2018-02-27) Bug Fixes select: animation jumping on IE11 ( #10050 ) ( a5909db ) tree: fix type error in tree ( #10095 ) ( 6d94aec ) Features menu: allow for backdrop class to be customized ( #10097 ) ( 2ece035 ), closes #10062 tree: merge tree branch to master ( #9796 ) ( c975ca8 ) 6.0.0-beta.2 (2018-02-21) Bug Fixes badge: AoT and server-side rendering errors ( #9935 ) ( 06b4017 ) badge: hard to see in high contrast mode ( #9973 ) ( 1b2f90c ) badge: incorrectly setting aria-describedby ( #9957 ) ( aed7e8a ) badge: move styles into the theme mixin ( #9999 ) ( 00a6c90 ) badge: remove top-level ampersand selectors from theme mixin ( #9991 ) ( bd7a408 ), closes #9990 bottom-sheet: inject correct directionality in child components ( #9996 ) ( 9d784a0 ) button: inconsistent overflow value between browsers ( #9933 ) ( 9d19291 ) chips: Fix chip and chip list selectable ( #9955 ) ( 949a69b ) expansion-panel,menu,select: nested animations not working ( #9134 ) ( 1e2b79a ), closes #8814 #8953 input: AutofillMonitor stream not being completed when stopping monitoring ( #9886 ) ( 87bbfc5 ) overlay: default to global directionality ( #9994 ) ( 47674f1 ), closes #9817 tooltip: memory leak in _setTooltipMessage ( #6782 ) ( 66a01fb ) Features button-toggle add ripples to button-toggle ( #9891 ) ( 53417d4 ), closes #9442 autocomplete: add opened/closed events to panel ( #9904 ) ( 82c5ff0 ), closes #9894 badge: add badge component ( #7483 ) ( c98d217 ) bottom-sheet: add result param when dismissing bottom sheet ( #9810 ) ( 98a6910 ) datepicker: add theming support ( #9407 ) ( 0383704 ) drawer: allow for backdrop to be disabled ( #9381 ) ( 6d4e052 ), closes #5300 schematics: add material scaffolding schematic ( #9883 ) ( 45399c6 ) typography: add letter-spacing configuration to typography configs. ( #9932 ) ( f30609c ) 6.0.0-beta.1 (2018-02-12) Fix typo in version name (using a dash instead of a dot) Update Angular peer dependency to 6.0.0-beta.x 6.0.0-beta-0 (2018-02-12) Bug Fixes overlay: validate that ConnectedPositionStrategy positions are passed in correctly at runtime ( #9466 ) ( 6a8ce02 ) Features add bottom sheet component ( #9764 ) ( bbf62cd ) datepicker: @Output for year and month selected in multiyear/year ( #9678 ) ( c2e108e ) expansion: add accordion expand/collapse all ( #6929 ) ( #7461 ) ( 3aceb73 ) form-field, chip: merge new form-field and chip features to master ( #9762 ) ( 4a5287c ), closes #9743 #9759 #9767 schematics: add initial schematics utils ( #9451 ) ( 673d56e ) tabs: add ability to lazy load tab content ( #8921 ) ( 6feaf62 ) 5.2.5 cardboard-kangaroo (2018-04-17) Highlights Tweak peer deps to avoid warnings when updating Angular to 6.0 5.2.4 ash-submarine (2018-03-06) Bug Fixes chips: Update chips in chip list, and add margin to chip input ( #8579 ) ( 3074b45 ) expansion-panel: entire body content being shown on animation start ( #10138 ) ( 35b66f9 ), closes #10134 menu: detach lazily-rendered content when the menu is closed ( #10005 ) ( 37b1a09 ), closes #9915 menu: Fix #10005 lint error ( c8ca770 ) overlay: hide overlay container when there are no attached overlays ( #10139 ) ( d0bc91d ), closes #6882 #10033 paginator: first/last icons being thrown off on IE and Edge; simplify icon setup ( #9776 ) ( 85f9491 ) selection-list: improve accessibility of selection list ( #10137 ) ( cbe11d4 ), closes #9995 5.2.3 diamond-silhouette (2018-02-27) Bug Fixes cdk-dialog: decorate dialog as an injectable ( #10052 ) ( 07b4250 ) datepicker: improve native adapter DST handling ( #10068 ) ( 2837196 ) avoid layout jumping on elements with ripples in RTL ( #10026 ) ( c93103b ) dialog: actions not being pulled down when trapping focus ( #10007 ) ( 9a39e24 ), closes #9722 dialog: don't provide directionality if user injector has one already ( #10004 ) ( 6ec0af1 ) grid-list: default to LTR when Directionality value is empty ( #10111 ) ( 65810bc ) grid-list: invalid style declaration during server-side rendering ( #10131 ) ( 1576a99 ) list: align avatar size in dense list with spec ( #10028 ) ( 7d81b6f ), closes #10019 list-key-manager: not ignoring vertical key events in horizontal-only mode ( #10075 ) ( f31a2f1 ) selection-list: repeated preselected items not appearing as selected with OnPush parent ( #10100 ) ( f93d0f4 ), closes #10090 stepper: require users to visit non-optional steps ( #10048 ) ( d26aa6e ) 5.2.2 cork-yacht (2018-02-21) Bug Fixes aria-describer: better handling of non-string values ( #9959 ) ( d351e33 ) list: list-options require a parent selection list ( #9899 ) ( 8cca2c2 ) list-key-manager: infinite loop if all items are disabled ( #9981 ) ( 775f560 ) menu: not picking up indirect descendant items ( #9971 ) ( 14b21e9 ), closes #9969 overlay: expose backdropClick mouse event in ConnectedOverlayDirective ( #9845 ) ( 5a1e7fe ) platform: potential error if CSS object is undefined ( #9968 ) ( 3212111 ), closes #9801 select: icons inside option not centered ( #9982 ) ( ecc7f53 ), closes #9978 select: lock dropdown position when scrolling ( #9789 ) ( 30b90a2 ) selection-list: incorrect cursor if disabled ( #9963 ) ( 13e809a ), closes #9952 tabs: ink bar not visible in high contrast mode ( #9997 ) ( 1ba04eb ) theming: add aliases for alternate spelling of \"grey\" ( #9903 ) ( 36e1bc0 ) viewport-ruler: fix server-side rendering errors when attempting to measure the viewport ( #9870 ) ( ac4cd91 ) 5.2.1 ghillie-soup (2018-02-12) Bug Fixes autocomplete: escape key inconsistency on IE ( #9777 ) ( 180750e ) button: better accessibility for flat buttons in high-contrast ( #9783 ) ( 0d0c6d4 ) datepicker: add max/min filter to multi year and year views ( #9727 ) ( 0793142 ) datepicker: changed after checked error if focused datepicker inputs turn disabled ( #9717 ) ( 01ad7bd ), closes #9559 global-position-strategy: ignoring width and height from OverlayConfig ( #9774 ) ( b425a46 ), closes #9715 overlay: dimension not updated after init ( #8765 ) ( c36b512 ) select: options inside option group not being rendered when wrapped with ng-container ( #9769 ) ( 38fddfe ), closes #9736 selection-list: external changes to selection model not being reflected ( #9846 ) ( 82df181 ), closes #9838 slider: invisible in high contrast mode ( #9792 ) ( 94bbffc ) slider: unable to reset value by setting it back to undefined ( #9768 ) ( c2e2744 ), closes #9740 radio: add aria-describedby passthrough to radio button input ( #9741 ) ( cd159f5 ) 5.2.0 selenium-scramble (2018-02-05) Features autocomplete: add the ability to highlight the first option on open ( #9495 ) ( b42fcb9 ), closes #8423 button: create stroked and flat button variants ( #9365 ) ( b652683 ) button: expose ripple instance ( #9170 ) ( 17e36fe ), closes #4179 checkbox: expose ripple instance ( #9176 ) ( e09c0a6 ) datepicker: allow for mat-datepicker-toggle icon to be customized ( #9487 ) ( 01867ad ) dialog: support using dialog content directives with template dialogs ( #9379 ) ( 99b768e ), closes #5412 drawer: expose CdkScrollable instance ( #9183 ) ( 2d03af0 ), closes #9136 expansion-panel: support two-way binding for the expanded property ( #9327 ) ( a72085b ), closes #9311 layout: add window breakpoints from spec ( #9318 ) ( 1038950 ) list-key-manager: add support for horizontal directions ( #9122 ) ( ab02367 ) menu: support lazy rendering and passing in context data ( #9271 ) ( 9fed87c ), closes #9251 observe-content: allow for the MutationObserver to be disabled ( #9025 ) ( aa2e76c ) overlay: expose reference to the backdrop element ( #9702 ) ( 959a8a1 ), closes #9689 overlay: make it easier to override backdrop color ( #9114 ) ( 3d18006 ), closes #7855 paginator: Add functionality to jump to first and last page ( #9603 ) ( 04cdb13 ), closes #9278 paginator: allow page size selection to be disabled ( #8373 ) ( c8743e7 ), closes #8359 portal: expose attached result in CdkPortalOutlet ( #9326 ) ( b626b13 ), closes #9304 ripple: support animation duration overwrites ( #9253 ) ( 3bc4cd3 ) ripple: support ripple fade-out on pointer up ( #9694 ) ( efb03c9 ), closes #9577 slider: add focus and blur methods do MatSlider ( #9373 ) ( 2d592a5 ) sort: fix animation; show on hover ( #7608 ) ( cde00df ) stepper: add proper type to stepper buttons ( #9401 ) ( b3d2e78 ) stepper: add the ability to reset a stepper ( #8623 ) ( a6f9fc2 ) stepper: allow for header icons to be customized ( #7482 ) ( adc251c ), closes #7384 table: allow data input to be array, stream ( #9489 ) ( 085d805 ) Bug Fixes aria-describer: exception when attempting to describe a non-element node ( #9392 ) ( 4c7a4f3 ) autocomplete: close panel using alt + up arrow ( #9341 ) ( 2c192d0 ) autocomplete: error when closing from a destroyed view ( #7365 ) ( 2b05106 ), closes #7315 autocomplete: expose MatAutocompleteTrigger in template ( #9703 ) ( 8997db0 ), closes #9687 autocomplete: handle optionSelections being accessed early ( #8802 ) ( 4e1a6a8 ), closes #4616 autocomplete: handle attaching autocomplete to a number input ( #9672 ) ( f75fa15 ), closes #9628 autocomplete: panel not closing on IE when selecting an option with an empty string display value ( #9506 ) ( 95ffe37 ), closes #9479 autocomplete: prevent opening using arrow keys on readonly input ( #9229 ) ( 9d152c0 ), closes #9227 block-scroll-strategy: server-side rendering error ( #9665 ) ( 3acbf26 ) button: accent color not set on fab buttons with build optimizer ( #9376 ) ( b3f8a42 ), closes #9360 button: incorrect text color when no color is passed in on dark theme ( #9234 ) ( 6824375 ), closes #9231 button-toggle: inaccurate name passed down to input if no name is assigned ( #9017 ) ( 54d60df ) card: add camel-cased selectors to content projection ( #6818 ) ( d5a7cce ), closes #6816 card,tabs,toolbar: Make media query breakpoints follow Material spec ( #9284 ) ( 7672913 ) checkbox: underlying native checkbox being rendered when parent uses css column layout ( #9258 ) ( eac1512 ), closes #9049 chips: chip list capturing keyboard events from input ( #9651 ) ( a48f75b ) collections: clean up UniqueSelectionDispatcher listeners on destroy ( #9673 ) ( 26b0635 ) datepicker: calendar controls not being inverted in rtl ( #9219 ) ( 8a3e023 ) datepicker: calendar keyboard controls not working if the user clicks on blank area ( #9494 ) ( 0b8955b ) datepicker: gray out filtered years in multi-year view ( #9563 ) ( 403ebbd ) datepicker: highlight datepicker toggle when calendar is open ( #9426 ) ( e3b5e3f ) datepicker: set border radius on calendar popup ( #9509 ) ( 4e7c1a3 ) dialog: server-side rendering error when attempting to trap focus ( #9698 ) ( acbf3c8 ) divider: add inset styles for icons and lists in cards ( #9242 ) ( d587abe ) expansion: define default expansion header heights via css. ( #9313 ) ( c604834 ) expansion-panel: expand animation jumping ( #8779 ) ( 37575c9 ) expansion-panel: improved accessibility labelling and keyboard default action not being prevented ( #9174 ) ( e62afdf ) focus-monitor: implement OnDestroy logic ( #9305 ) ( 8972bf4 ) focus-monitor: set up global listeners in root zone ( #9542 ) ( afcb3ea ) form-field: unable to override font-size through typography config ( #9463 ) ( 66dc73a ) grid-list: tile being pulled outside the grid if no gap can be found ( #9128 ) ( c8127ed ), closes #4515 icon: prevent parsing the same icon set multiple times ( #9635 ) ( e6e4c3c ) input: floating label not reacting when patching the value without emitting an event ( #9260 ) ( ec6678d ), closes #8982 input: respect text-align value from form-field ( #9397 ) ( 5136361 ) interactivity-checker: carefully handle frame elements ( #9340 ) ( 6f7332b ), closes #3372 keycodes: incorrect key code for nine ( #9568 ) ( 637e1b6 ), closes #9567 list: incorrect padding for list-items with avatars, icons ( #9500 ) ( 39a5861 ), closes #9156 list-key-manager: maintain selected index when amount of items changes ( #9164 ) ( 4f65276 ) menu: always focus first menu item ( #9383 ) ( 8430617 ), closes #9252 menu: inconsistent side padding for nested menu items in RTL ( #9124 ) ( cc24c7c ) menu: set appropriate origin when restoring focus ( #9303 ) ( 278e25a ), closes #9292 menu,toolbar: avoid potential server-side rendering errors ( #9423 ) ( dfa68db ) native-date-adapter: avoid error when formatting edge case dates in IE11 and Edge ( #9523 ) ( dd2fbc8 ) overlay: attempting to position overlay if it was detached immediately after being attached ( #9507 ) ( c7ad145 ), closes #9406 overlay: ConnectedOverlayDirective not updating positions after first open ( #9579 ) ( d0011c4 ) overlay: default options not being applied correctly ( #9088 ) ( b153947 ) overlay: expose event object in backdropClick stream ( #9716 ) ( 5611947 ), closes #9713 overlay: onPositionChange stream not being completed ( #8562 ) ( 7fe651b ) overlay: OverlayKeyboardDispatcher not dispatching events when propagation is stopped ( #9546 ) ( e30852a ) overlay: server-side rendering error when creating backdrop element ( #9448 ) ( a1db4e4 ) overlay: transparent overlay not blocking scroll on Firefox 57 ( #9446 ) ( d0ad3b7 ), closes #8924 overlay: unable to change CdkConnectedOverlay origin dynamically ( #9358 ) ( df44767 ), closes #9353 progress-bar: prevent users from tabbing into underlying SVG on IE ( #9638 ) ( 0a1904d ) progress-bar: remove data url for CSP compliance ( #8898 ) ( 0f2ac9b ) progress-spinner: element size not updated when diamater is changed ( #8697 ) ( 6d4c7ae ) radio: add support for tabindex on radio-buttons ( #9467 ) ( f1c3e2c ), closes #9427 scrolling: implement ngOnDestroy in ScrollDispatcher ( #9608 ) ( fd17cf2 ) select: close panel on alt + arrow key presses ( #9250 ) ( 7c78c93 ) select: don't restore focus unless an option was selected ( #8964 ) ( 9dc43de ), closes #8915 select: handle async changes to the option label ( #9159 ) ( 245caae ), closes #7923 select: handle keyboard events from inside panel ( #9361 ) ( 69270ef ) select: support changing the value using left/right arrow keys while closed ( #9578 ) ( 83b369e ) selection-model: incorrect initial value when empty array is passed in single-selection mode ( #9287 ) ( 075464f ), closes #9273 slide-toggle: truncate label content with ellipsis ( #9166 ) ( 68bb44c ), closes #5212 slider: slider emiting changes on slide end when disabled ( #9434 ) ( 1e2fe90 ) snack-bar: indicate in afterDismissed whether dismissal was a result of an action ( #9154 ) ( 829506d ), closes #9147 stepper: header collapsing if box-sizing is set ( #9505 ) ( ffc5381 ), closes #9501 stepper: overriding default completed logic when resetting ( #9650 ) ( 7e352ce ) stepper: support going to first/last steps via home/end keys ( #9632 ) ( 834aecc ) stepper: throw when out-of-bounds value is assigned to selectedIndex ( #9127 ) ( f54377c ) stepper: unable to skip optional steps in linear stepper ( #9245 ) ( 9dba30b ), closes #9239 tab-link: preventDefault action when disabled tab link is clicked. ( #9357 ) ( 8de5e83 ) table: data source should sort empty values correctly ( #8698 ) ( f213f6c ) tabs: move focus to first/last tabs using home/end ( #9171 ) ( 24f62eb ) theming: provide text color through mat-app-background ( #9262 ) ( 1e7eeab ) tooltip: match mobile dimensions from spec ( #9181 ) ( 63a5588 ), closes #9039 Performance Improvements menu,select: panel repainting on scroll ( #7721 ) ( 13410bd ), closes #7716 5.2.0-beta.0 (2018-01-30) Features autocomplete: add the ability automatically keep the first option active ( #9495 ) ( b42fcb9 ), closes #8423 button: expose ripple instance ( #9170 ) ( 17e36fe ), closes #4179 checkbox: expose ripple instance ( #9176 ) ( e09c0a6 ) datepicker: allow for mat-datepicker-toggle icon to be customized ( #9487 ) ( 01867ad ) dialog: support using dialog content directives with template dialogs ( #9379 ) ( 99b768e ), closes #5412 drawer: expose CdkScrollable instance ( #9183 ) ( 2d03af0 ), closes #9136 expansion-panel: support two-way binding for the expanded property ( #9327 ) ( a72085b ), closes #9311 layout: add window breakpoints from spec ( #9318 ) ( 1038950 ) list-key-manager: add support for horizontal directions ( #9122 ) ( ab02367 ) menu: support lazy rendering and passing in context data ( #9271 ) ( 9fed87c ), closes #9251 observe-content: allow for the MutationObserver to be disabled ( #9025 ) ( aa2e76c ) overlay: make it easier to override backdrop color ( #9114 ) ( 3d18006 ), closes #7855 paginator: allow page size selection to be disabled ( #8373 ) ( c8743e7 ), closes #8359 portal: expose attached result in CdkPortalOutlet ( #9326 ) ( b626b13 ), closes #9304 ripple: support animation duration overwrites ( #9253 ) ( 3bc4cd3 ) slider: add focus and blur methods do MatSlider ( #9373 ) ( 2d592a5 ) stepper: add proper type to stepper buttons ( #9401 ) ( b3d2e78 ) stepper: add the ability to reset a stepper ( #8623 ) ( a6f9fc2 ) Bug Fixes aria-describer: exception when attempting to describe a non-element node ( #9392 ) ( 4c7a4f3 ) autocomplete: close panel using alt + up arrow ( #9341 ) ( 2c192d0 ) autocomplete: error when closing from a destroyed view ( #7365 ) ( 2b05106 ), closes #7315 autocomplete: handle optionSelections being accessed early ( #8802 ) ( 4e1a6a8 ), closes #4616 autocomplete: prevent opening using arrow keys on readonly input ( #9229 ) ( 9d152c0 ), closes #9227 button: accent color not set on fab buttons with build optimizer ( #9376 ) ( b3f8a42 ), closes #9360 button: incorrect text color when no color is passed in on dark theme ( #9234 ) ( 6824375 ), closes #9231 button-toggle: inaccurate name passed down to input if no name is assigned ( #9017 ) ( 54d60df ) card: add camel-cased selectors to content projection ( #6818 ) ( d5a7cce ), closes #6816 card,tabs,toolbar: Make media query breakpoints follow Material spec ( #9284 ) ( 7672913 ) checkbox: underlying native checkbox being rendered when parent uses css column layout ( #9258 ) ( eac1512 ), closes #9049 chips: chip list capturing keyboard events from input ( #9651 ) ( a48f75b ) datepicker: calendar controls not being inverted in rtl ( #9219 ) ( 8a3e023 ) datepicker: calendar keyboard controls not working if the user clicks on blank area ( #9494 ) ( 0b8955b ) datepicker: gray out filtered years in multi-year view ( #9563 ) ( 403ebbd ) datepicker: highlight datepicker toggle when calendar is open ( #9426 ) ( e3b5e3f ) datepicker: set border radius on calendar popup ( #9509 ) ( 4e7c1a3 ) expansion: define default expansion header heights via css. ( #9313 ) ( c604834 ) expansion-panel: improved accessibility labelling and keyboard default action not being prevented ( #9174 ) ( e62afdf ) focus-monitor: implement OnDestroy logic ( #9305 ) ( 8972bf4 ) focus-monitor: set up global listeners in root zone ( #9542 ) ( afcb3ea ) form-field: unable to override font-size through typography config ( #9463 ) ( 66dc73a ) grid-list: tile being pulled outside the grid if no gap can be found ( #9128 ) ( c8127ed ), closes #4515 icon: prevent parsing the same icon set multiple times ( #9635 ) ( e6e4c3c ) input: floating label not reacting when patching the value without emitting an event ( #9260 ) ( ec6678d ), closes #8982 input: respect text-align value from form-field ( #9397 ) ( 5136361 ) interactivity-checker: carefully handle frame elements ( #9340 ) ( 6f7332b ), closes #3372 keycodes: incorrect key code for nine ( #9568 ) ( 637e1b6 ), closes #9567 list: incorrect padding for list-items with avatars, icons ( #9500 ) ( 39a5861 ), closes #9156 list-key-manager: maintain selected index when amount of items changes ( #9164 ) ( 4f65276 ) menu: always focus first menu item ( #9383 ) ( 8430617 ), closes #9252 menu: inconsistent side padding for nested menu items in RTL ( #9124 ) ( cc24c7c ) menu: set appropriate origin when restoring focus ( #9303 ) ( 278e25a ), closes #9292 menu,toolbar: avoid potential server-side rendering errors ( #9423 ) ( dfa68db ) native-date-adapter: avoid error when formatting edge case dates in IE11 and Edge ( #9523 ) ( dd2fbc8 ) overlay: attempting to position overlay if it was detached immediately after being attached ( #9507 ) ( c7ad145 ), closes #9406 overlay: ConnectedOverlayDirective not updating positions after first open ( #9579 ) ( d0011c4 ) overlay: default options not being applied correctly ( #9088 ) ( b153947 ) overlay: server-side rendering error when creating backdrop element ( #9448 ) ( a1db4e4 ) overlay: transparent overlay not blocking scroll on Firefox 57 ( #9446 ) ( d0ad3b7 ), closes #8924 overlay: unable to change CdkConnectedOverlay origin dynamically ( #9358 ) ( df44767 ), closes #9353 progress-bar: remove data url for CSP compliance ( #8898 ) ( 0f2ac9b ) progress-spinner: element size not updated when diamater is changed ( #8697 ) ( 6d4c7ae ) radio: add support for tabindex on radio-buttons ( #9467 ) ( f1c3e2c ), closes #9427 scrolling: implement ngOnDestroy in ScrollDispatcher ( #9608 ) ( fd17cf2 ) select: close panel on alt + arrow key presses ( #9250 ) ( 7c78c93 ) select: don't restore focus unless an option was selected ( #8964 ) ( 9dc43de ), closes #8915 select: handle async changes to the option label ( #9159 ) ( 245caae ), closes #7923 select: handle keyboard events from inside panel ( #9361 ) ( 69270ef ) select: support changing the value using left/right arrow keys while closed ( #9578 ) ( 83b369e ) selection-model: incorrect initial value when empty array is passed in single-selection mode ( #9287 ) ( 075464f ), closes #9273 slide-toggle: truncate label content with ellipsis ( #9166 ) ( 68bb44c ), closes #5212 slider: slider emiting changes on slide end when disabled ( #9434 ) ( 1e2fe90 ) snack-bar: indicate in afterDismissed whether dismissal was a result of an action ( #9154 ) ( 829506d ), closes #9147 stepper: header collapsing if box-sizing is set ( #9505 ) ( ffc5381 ), closes #9501 stepper: throw when out-of-bounds value is assigned to selectedIndex ( #9127 ) ( f54377c ) stepper: unable to skip optional steps in linear stepper ( #9245 ) ( 9dba30b ), closes #9239 tab-link: preventDefault action when disabled tab link is clicked. ( #9357 ) ( 8de5e83 ) table: data source should sort empty values correctly ( #8698 ) ( f213f6c ) tabs: move focus to first/last tabs using home/end ( #9171 ) ( 24f62eb ) theming: provide text color through mat-app-background ( #9262 ) ( 1e7eeab ) Performance Improvements menu,select: panel repainting on scroll ( #7721 ) ( 13410bd ), closes #7716 5.1.1 silk-xylophone (2018-01-29) Bug Fixes autocomplete: close panel using alt + up arrow ( #9341 ) ( a1ad82b ) autocomplete: error when closing from a destroyed view ( #7365 ) ( 00820f7 ), closes #7315 autocomplete: handle optionSelections being accessed early ( #8802 ) ( ec6168b ), closes #4616 autocomplete: prevent opening using arrow keys on readonly input ( #9229 ) ( f3b50b0 ), closes #9227 button: accent color not set on fab buttons with build optimizer ( #9376 ) ( f6a59cd ), closes #9360 button-toggle: inaccurate name passed down to input if no name is assigned ( #9017 ) ( fda978a ) card: add camel-cased selectors to content projection ( #6818 ) ( 6e4f90f ), closes #6816 card,tabs,toolbar: Make media query breakpoints follow Material spec ( #9284 ) ( d6b3cc8 ) checkbox: underlying native checkbox being rendered when parent uses css column layout ( #9258 ) ( 58b665e ), closes #9049 datepicker: calendar controls not being inverted in rtl ( #9219 ) ( af38b97 ) datepicker: calendar keyboard controls not working if the user clicks on blank area ( #9494 ) ( 7cea0b6 ) datepicker: highlight datepicker toggle when calendar is open ( #9426 ) ( 37d8716 ) datepicker: set border radius on calendar popup ( #9509 ) ( 3f87dc4 ) expansion-panel: improved accessibility labelling and keyboard default action not being prevented ( #9174 ) ( 444cee8 ) focus-monitor: implement OnDestroy logic ( #9305 ) ( e6cdce5 ) grid-list: tile being pulled outside the grid if no gap can be found ( #9128 ) ( 5535325 ), closes #4515 input: floating label not reacting when patching the value without emitting an event ( #9260 ) ( 4a00499 ), closes #8982 interactivity-checker: carefully handle frame elements ( #9340 ) ( 305a81c ), closes #3372 keycodes: incorrect key code for nine ( #9568 ) ( b489559 ), closes #9567 list: incorrect padding for list-items with avatars, icons ( #9500 ) ( db520cf ), closes #9156 menu: inconsistent side padding for nested menu items in RTL ( #9124 ) ( 53d48f6 ) menu: set appropriate origin when restoring focus ( #9303 ) ( 2bf9ad8 ), closes #9292 native-date-adapter: avoid error when formatting edge case dates in IE11 and Edge ( #9523 ) ( d25ab57 ) overlay: default options not being applied correctly ( #9088 ) ( 6f8f226 ) overlay: server-side rendering error when creating backdrop element ( #9448 ) ( 5c98185 ) overlay: transparent overlay not blocking scroll on Firefox 57 ( #9446 ) ( e2999a8 ), closes #8924 progress-spinner: element size not updated when diamater is changed ( #8697 ) ( 23f0c47 ) select: close panel on alt + arrow key presses ( #9250 ) ( c3ec94d ) select: don't restore focus unless an option was selected ( #8964 ) ( 960b7cf ), closes #8915 select: handle async changes to the option label ( #9159 ) ( 63a5184 ), closes #7923 select: handle keyboard events from inside panel ( #9361 ) ( 0d233b2 ) select: support changing the value using left/right arrow keys while closed ( #9578 ) ( b11523a ) selection-model: incorrect initial value when empty array is passed in single-selection mode ( #9287 ) ( 5d0fb95 ), closes #9273 slide-toggle: truncate label content with ellipsis ( #9166 ) ( 4bd96ce ), closes #5212 stepper: header collapsing if box-sizing is set ( #9505 ) ( ccc8fbb ), closes #9501 stepper: unable to skip optional steps in linear stepper ( #9245 ) ( 517ea57 ), closes #9239 tab-link: preventDefault action when disabled tab link is clicked. ( #9357 ) ( 0b5806b ) theming: provide text color through mat-app-background ( #9262 ) ( 6d66a16 ) overlay: make it easier to override backdrop color ( #9114 ) ( 4ff1fd4 ), closes #7855 5.1.0 burlap-bezel (2018-01-17) Bug Fixes aria-describer: server-side rendering error during cleanup ( #8903 ) ( 8a3b19e ), closes #8901 autocomplete: not implementing setDisabledState from ControlValueAccessor ( #8746 ) ( 92bc503 ), closes #8735 autocomplete: not resetting completely when overlay is detached externally ( #8515 ) ( a8cd033 ) autocomplete: panelClosingActions emitting twice in some cases ( #8998 ) ( 4f97232 ) autocomplete: panelClosingActions emitting when tabbing away from a closed autocomplete ( #8774 ) ( 92dcd76 ), closes #8763 chip,stepper: compile cleanly with \"fullTemplateTypeCheck\" ( #8889 ) ( 50967b6 ) chips: being able to focus disabled chip by clicking ( #8892 ) ( bfd513d ), closes #8883 chips: event propagation not stopped by remove button ( #8772 ) ( c7e2d4e ), closes #8771 connected-position-strategy: allow positions to be updated after init ( #8800 ) ( b7071ba ) datepicker: leaking backdropClick subscriptions ( #8919 ) ( 3728555 ) datepicker: not resetting when detached externally ( #9133 ) ( a0bd162 ) datepicker: typo in MatMonthView export ( #9055 ) ( 2250747 ) datepicker: unable to close calendar when opened on focus in IE11 ( #8918 ) ( a411382 ), closes #8914 dialog: change order of button actions ( #9021 ) ( 230b297 ) dialog: hide all non-overlay content from assistive technology ( #9016 ) ( d82124d ), closes #7787 dialog: improved type safety in dialog ref result ( #8766 ) ( 571ef46 ), closes #8760 directionality: complete dir change observable ( #8874 ) ( 41f5fe2 ) drawer: infinite loop when two-way opened binding is toggled mid-animation ( #8872 ) ( 7c84490 ), closes #8869 drawer: margins not being updated on direction changes ( #9161 ) ( ff1c5f1 ), closes #9158 drawer: unable to close using keyboard if there are no focusable elements ( #8783 ) ( fba3728 ) expansion: accordion emitting closed event while closed ( #9101 ) ( 92ded30 ), closes #9098 focus-trap: server-side rendering error ( #9001 ) ( c77f69f ), closes #8981 form-field: hide required asterisk if control is disabled ( #8799 ) ( 1c2f6b7 ), closes #8251 global-position-strategy: error if disposed before applied ( #8761 ) ( f565560 ), closes #8758 icon: handle values with unnecessary spaces being passed into fontIcon and fontSet ( #9056 ) ( 1a735bc ), closes #9054 icon: server-side error when registering icons ( #8492 ) ( b6da765 ), closes #6787 input: align caret color with spec ( #8692 ) ( b0449ab ) input: allow color inputs in mat-form-field ( #8748 ) ( 982982b ), closes #8686 layout: handle platforms that don't support matchMedia ( #8775 ) ( 4846e4c ), closes #8710 list: prevent list icon shrinking ( #9211 ) ( 5737b9f ), closes #8699 menu: not closing when overlay is detached externally ( #8868 ) ( 4d8c712 ) paginator: coerce string values ( #8946 ) ( 0388202 ) paginator: set default display value ( #8455 ) ( bd50fa6 ), closes #8454 progress-bar: animation tearing in Firefox 57 ( #9123 ) ( 9e47d40 ), closes #7606 select: active item not being updated on click in multiple mode ( #7808 ) ( bc27fea ) select: alt + arrow key not opening in single-selection mode ( #8910 ) ( a4c042b ) select: change event emitted before data binding is updated ( #8740 ) ( 5819385 ), closes #8739 select: complete state change event ( #8777 ) ( 4f78613 ) select: handle optionSelectionChanges being accessed early ( #8830 ) ( 97ebd76 ) select: not marked as touched when clicking away ( #8784 ) ( 984dece ), closes #8573 select: remove aria-owns when options aren't in the DOM ( #9091 ) ( d85c44b ), closes #7023 select: support using shift + arrow key to toggle items in a multi-select ( #9037 ) ( f82bbae ) selection-list: allow jumping to first/last item using home/end ( #9062 ) ( bd36529 ) selection-list: allow users to jump focus to a particular item by typing ( #9026 ) ( af44b9d ) selection-list: options not marked as selected if value is assigned too early ( #9090 ) ( bd7c751 ), closes #9085 selection-list: preselected options not being added to the model value ( #9116 ) ( 91ea1a1 ) selection-list: remove selected option from model value on destroy ( #9106 ) ( f8cd8eb ) selection-list: unable to select using the enter key ( #8595 ) ( 9105302 ), closes #8589 slider: prevent slider thumb from getting cropped ( #8061 ) ( 0b05a1f ) stepper: completed binding not being considered when moving from a step without a stepControl ( #9126 ) ( 32d0dbb ), closes #8110 stepper: use up/down arrows for navigating vertical stepper ( #8920 ) ( 7b78b74 ) table: inaccurate row height ( #8303 ) ( baa8a6e ), closes #8299 too strict peer dependency of angular ( #9355 ) ( 7187670 ), closes #9328 table: row content not centered in IE ( #6820 ) ( 1b79e92 ), closes #6813 table: set height of mat-header-row to 56px ( #8215 ) ( 0c4ee2e ) theming: light text on colored backgrounds should be opaque ( #7421 ) ( 1701b98 ) typography: deprecation warning if null font family is passed in ( #9002 ) ( d8c1392 ), closes #8973 typography: handle inherit being set as a typography value ( #8721 ) ( 139c506 ), closes #8700 Features autocomplete: allow option ripples to be disabled ( #8851 ) ( ff31ac8 ) close-scroll-strategy: add scroll threshold option ( #8656 ) ( c0ff761 ) datepicker: add animation to calendar popup ( #8542 ) ( c3e267f ) datepicker: add year selection mode ( #8565 ) ( cdbabf7 ) dialog: allow default dialog options to be configurable ( #9113 ) ( 05304f0 ) dialog: allow for closing on navigation to be disabled ( #9024 ) ( c349c58 ), closes #8983 dialog: allow for single dialog scroll strategy to be overwritten ( #8726 ) ( c7de734 ), closes #8706 divider: move divider out of mat-list ( #5862 ) ( bd0ec64 ) elevations: Allow tonal color elevations through mat-elevation mixin. ( #8995 ) ( 21d004a ) expansion-panel: allow for content to be rendered lazily ( #8243 ) ( 60ba0a7 ), closes #8230 table: support directly adding column, row, and header defs ( #8744 ) ( 693c8e8 ) tabs: add animation done event #5238 ( #6811 ) ( 3a52624 ) tooltip: add injection token for specifying the default delays ( #8109 ) ( 3dcf4cd ), closes #7928 Performance Improvements ripple: do not register events if ripples are disabled initially ( #8882 ) ( 58b93dc ) ripple: use passive event listeners ( #8719 ) ( 12feff7 ) 5.0.4 linoleum-wormhole (2018-01-08) Bug Fixes chips: being able to focus disabled chip by clicking ( #8892 ) ( 699b7c2 ), closes #8883 datepicker: typo in MatMonthView export ( #9055 ) ( 3e99bcc ) dialog: hide all non-overlay content from assistive technology ( #9016 ) ( ef06a9c ), closes #7787 directionality: complete dir change observable ( #8874 ) ( a2438fa ) drawer: margins not being updated on direction changes ( #9161 ) ( f64a857 ), closes #9158 expansion: accordion emitting closed event while closed ( #9101 ) ( 50161ae ), closes #9098 focus-trap: server-side rendering error ( #9001 ) ( 7698193 ), closes #8981 icon: handle values with unnecessary spaces being passed into fontIcon and fontSet ( #9056 ) ( b71d954 ), closes #9054 icon: server-side error when registering icons ( #8492 ) ( 61b12b6 ), closes #6787 input: align caret color with spec ( #8692 ) ( 1eb8450 ) layout: handle platforms that don't support matchMedia ( #8775 ) ( 673a636 ), closes #8710 progress-bar: animation tearing in Firefox 57 ( #9123 ) ( 255f9d8 ), closes #7606 select: active item not being updated on click in multiple mode ( #7808 ) ( ce2487e ) select: not marked as touched when clicking away ( #8784 ) ( c0209fc ), closes #8573 select: remove aria-owns when options aren't in the DOM ( #9091 ) ( 4a03497 ), closes #7023 select: support using shift + arrow key to toggle items in a multi-select ( #9037 ) ( 76055a4 ) selection-list: allow jumping to first/last item using home/end ( #9062 ) ( 6d70f2c ) selection-list: allow users to jump focus to a particular item by typing ( #9026 ) ( 7167113 ) selection-list: options not marked as selected if value is assigned too early ( #9090 ) ( c61a289 ), closes #9085 selection-list: preselected options not being added to the model value ( #9116 ) ( 2235239 ) selection-list: remove selected option from model value on destroy ( #9106 ) ( 02a1334 ) stepper: completed binding not being considered when moving from a step without a stepControl ( #9126 ) ( 9da4e71 ), closes #8110 stepper: use up/down arrows for navigating vertical stepper ( #8920 ) ( a6c7888 ) typography: deprecation warning if null font family is passed in ( #9002 ) ( 497816b ), closes #8973 Performance Improvements ripple: do not register events if ripples are disabled initially ( #8882 ) ( 4838f02 ) 5.0.3 concrete-aeroplane (2018-01-02) Bug Fixes autocomplete: panelClosingActions emitting twice in some cases ( #8998 ) ( 22c3259 ) dialog: change order of button actions ( #9021 ) ( 7b879a5 ) 5.0.2 flannel-battlestar (2017-12-19) Bug Fixes aria-describer: server-side rendering error during cleanup ( #8903 ) ( b2370ce ), closes #8901 autocomplete: not implementing setDisabledState from ControlValueAccessor ( #8746 ) ( ae639da ), closes #8735 autocomplete: not resetting completely when overlay is detached externally ( #8515 ) ( 8e14343 ) autocomplete: panelClosingActions emitting when tabbing away from a closed autocomplete ( #8774 ) ( 3066929 ), closes #8763 autosize: not updating when window is resized ( #8619 ) ( 97f67c5 ), closes #8610 autosize: remove resize handle ( #8621 ) ( 28452ab ) chip,stepper: compile cleanly with \"fullTemplateTypeCheck\" ( #8889 ) ( eec7c73 ) chips: event propagation not stopped by remove button ( #8772 ) ( 0236623 ), closes #8771 connected-position-strategy: allow positions to be updated after init ( #8800 ) ( c207219 ) datepicker: leaking backdropClick subscriptions ( #8919 ) ( baf22ec ) dialog: improved type safety in dialog ref result ( #8766 ) ( 657f649 ), closes #8760 drawer: infinite loop when two-way opened binding is toggled mid-animation ( #8872 ) ( 241be7a ), closes #8869 drawer: unable to close using keyboard if there are no focusable elements ( #8783 ) ( 9aabb14 ) global-position-strategy: error if disposed before applied ( #8761 ) ( 8d79cc8 ), closes #8758 input: allow color inputs in mat-form-field ( #8748 ) ( 92d198b ), closes #8686 menu: not closing when overlay is detached externally ( #8868 ) ( 534c797 ) overlay: export OverlaySizeConfig ( #8932 ) ( adfa31e ) paginator: set default display value ( #8455 ) ( ccb325e ), closes #8454 portal: inaccurate hasAttahed result and portal being cleared if attached too early ( #8642 ) ( 93e6c53 ), closes /github.com/angular/material2/blob/master/src/lib/dialog/dialog-container.ts#L118 #8628 select: alt + arrow key not opening in single-selection mode ( #8910 ) ( 85f83f9 ) select: change event emitted before data binding is updated ( #8740 ) ( 2493797 ), closes #8739 select: complete state change event ( #8777 ) ( 46411e3 ) safety check for window in common module. ( #8816 ) ( a6cedd2 ), closes #8809 select: handle optionSelectionChanges being accessed early ( #8830 ) ( c98321c ) select,input: inconsistent disabled text color ( #7794 ) ( 4d47750 ), closes #7793 selection-list: unable to select using the enter key ( #8595 ) ( c23853f ), closes #8589 slider: prevent slider thumb from getting cropped ( #8061 ) ( f33c7cf ) tooltip: not closing when scrolling away ( #8688 ) ( e96a847 ) typography: handle inherit being set as a typography value ( #8721 ) ( e45b164 ), closes #8700 Performance Improvements ripple: use passive event listeners ( #8719 ) ( d67f971 ) 5.0.1 ceramic-gravy (2017-12-11) Bug Fixes common: safety check for window in common module. ( #8816 ) ( fb9ea53 ), closes #8809 autosize: not updating when window is resized ( #8619 ) ( b8664b8 ), closes #8610 autosize: remove resize handle ( #8621 ) ( 0d2a419 ) overlay: export OverlaySizeConfig ( #8932 ) ( a626c8f ) portal: inaccurate hasAttached result and portal being cleared if attached too early ( #8642 ) ( b488b39 ), closes #8628 select,input: inconsistent disabled text color ( #7794 ) ( f31be6f ), closes #7793 tooltip: not closing when scrolling away ( #8688 ) ( d5a2fca ) 5.0.0 velvet-cuttlefish (2017-12-06) Bug Fixes drawer: avoid initial animation when rendering on the server ( #8828 ) ( 2b1f84e ), closes #6865 tabs: hide tab body content after leaving the tab's view area ( #8827 ) ( 05d726d ) Features selection-list: support for ngModel ( #7456 ) ( 3fbb28a ), closes #6896 5.0.0-rc.3 ink-sparkler (2017-12-05) BREAKING CHANGES overlay: OverlayRef.getConfig returns an immutable version of the config object. overlay: OverlayRef.updateSize now accepts a OverlaySizeConfig rather than being based on the existing config object. Features checkbox: Support checkbox click action config ( #8521 ) ( 537b8b5 ) datepicker: add opened input binding ( #8098 ) ( 2b9bc57 ), closes #8094 form-field: add support for separate label and placeholder ( #8223 ) ( d6fec35 ), closes #6194 ripple: handle touch events ( #7927 ) ( 65cd1a1 ), closes #7062 sort: add the ability to disable sort toggling ( #8643 ) ( 7576a73 ), closes #8622 Bug Fixes checkbox: don't hide focus indicator on space press. ( #8539 ) ( 9e35bf0 ) chip-list: fix error state changes in chip list ( #8425 ) ( d2c11ca ) chip-list: stateChanges stream not being completed ( #8636 ) ( 61dada8 ) datepicker: calendar overlapping input when in a fallback position ( #8099 ) ( e5b7afe ) datepicker: keyboard fixes (enter matches click behavior corre\u2026 ( #7370 ) ( 0b2757c ) datepicker: placeholder not floating when an invalid value is typed in ( #8603 ) ( f0789eb ), closes #8575 directionality: change event now emit the new value ( #8424 ) ( 841f753 ) drawer: allow for drawer container to auto-resize while open ( #8488 ) ( e7b412a ), closes #6743 form-field: unable to tap on certain types of inputs on iOS ( #8543 ) ( 74c1d01 ), closes #8001 input: Add pure-CSS floating label logic that will work on... ( #8491 ) ( 1a7a61a ) input: stuck in focused state if disabled while in focus ( #8637 ) ( bec4cfe ), closes #8634 list: fix role for list-item ( #8767 ) ( 8f7c7cf ) menu: not closing when overlay is detached externally ( #8654 ) ( dd3094f ) menu: Set menu-item icon color only when not set on mat-icon ( #8614 ) ( d0cb077 ), closes #8594 overlay: add horizontal fallback positions to the connected overlay defaults ( #8689 ) ( e939ea7 ), closes #8318 overlay: make config immutable for existing refs ( #7376 ) ( 2dbc766 ) progress-spinner: value not updated while in indeterminate mode ( #8269 ) ( 9b68b54 ) radio: coerce checked input binding ( #8556 ) ( f41fa8c ) select: option not truncated correctly in multiple mode ( #7857 ) ( d04aa19 ) selection-model: inaccurate selected value when accessed in change subscription ( #8599 ) ( 0f7fbda ), closes #8584 sidenav: remove min-width ( #7748 ) ( 55a9f9a ) slide-toggle: height collapsing if component doesn't have a label ( #8270 ) ( 8205cb2 ), closes #8264 snack-bar: not applying all panel classes in IE ( #8578 ) ( a6d0847 ) stepper: block linear stepper for pending components ( #8646 ) ( 53c94c7 ), closes #8645 stepper: set appropriate aria-orientation ( #8657 ) ( 9582b8b ) tabs: pagination not enabled on init on some browsers ( #8104 ) ( 2c34a7e ), closes #7983 blurry ripples for slide-toggle, radio, checkbox in MS edge. ( #8514 ) ( 8b7a3af ), closes #8392 tooltip: close tooltip if message is cleared while open ( #8544 ) ( d66284d ) tooltip: unable to type in input with tooltip on iOS ( #8534 ) ( 75c665a ), closes #8331 5.0.0-rc.2 (2017-11-27) Bug Fixes overlay: disposed overlays not removed from the key event stack ( #8226 ) ( 461dfaf ) tabs: fix accidentally setting top instead of width after removing Renderer use ( #8602 ) ( 6e865b7 ) Features The examples on material.angular.io are now opened externally via StackBlitz instead of Plunker. 5.0.0-rc.1 (2017-11-20) Bug Fixes autosize: incorrect height with long placeholders ( #8024 ) ( ad7cb4a ), closes #8013 cdk-observers: prevent attribute renaming in closure compilers advanced optimizations ( #7894 ) ( 8dfe470 ) checkbox: Set aria-checkbox to mixed for indeterminate checkbox ( #8089 ) ( 3037a90 ) chip: fix placeholder and text overlap ( #8468 ) ( 81db650 ) chips: remove chip bottom margin in sibling chips ( #8198 ) ( d79903a ) chips: use all available space for the input ( #7462 ) ( c725249 ) datepicker: add missing exportAs ( #7782 ) ( d6d9ff8 ) datepicker: correct DST issues on IE 11 ( #7858 ) ( 2f2325a ) datepicker: correct overlay broad style selector ( #8130 ) ( f69c8e6 ) datepicker: prevent matInput from clobbering date value ( #7831 ) ( 4b59ca1 ) drawer: invalid margin declaration when rendering server-side ( #8324 ) ( 5600b80 ) drawer: missing elevation shadow ( #8387 ) ( b0756a2 ), closes #8386 drawer: re-add openedStart and closedStart events ( #7747 ) ( 7610c7c ) expansion: prevent memory leak by calling parent ngOnDestroy ( #8410 ) ( f6bd9b0 ) fab-buttons: vertically align icons inside fab buttons ( #8442 ) ( 43217ef ) form-field: jumping underline in Edge and Firefox ( #8480 ) ( c7ab877 ), closes #8395 icon: remove IDs from source icon set from rendered output ( #8266 ) ( 76806e3 ) input: add aria-required to inputs ( #8034 ) ( 8178d6f ) input: remove native IE reveal icon ( #8439 ) ( 47055a7 ), closes #8390 select: error when attempting to open before init ( #8242 ) ( ba36d3a ) progress-spinner: coerceNumber values ( #7791 ) ( b6712f8 ) list: multi-line list item spacing ( #8339 ) ( bb504ad ), closes #8333 menu: return focus to root trigger when closed by mouse ( #8348 ) ( b085dc6 ), closes #8290 overlay: better handling of server-side rendering ( #8422 ) ( 0f83b20 ), closes #8412 overlay: complete key event stream on dispose ( #8341 ) ( b437b45 ) overlay: remove global keydown listener when there are no open overlays ( #8389 ) ( 131272a ) progress-spinner: default strokeWidth to 10% of the diameter ( #7746 ) ( b997353 ) slide-toggle: drag not working in edge ( #8421 ) ( d6f287e ), closes #8391 snack-bar: complete onAction observable on close ( #8183 ) ( bc8560e ) stepper: update state when steps change ( #8398 ) ( 2bc0b41 ) tabs: detach tab portal when tab hides from view ( #8486 ) ( fbf2987 ) tooltip: allow toolip to reopen when closed by detaching overlay ( #8232 ) ( 0719c38 ) consistently coerce boolean and number properties ( #7283 ) ( 3ca801a ) replace extendObject utility w/ object spread ( #7372 ) ( ea54edb ) using correct global name in rollup bundle ( #8407 ) ( 40be1f2 ) TypeScript interfaces are now documented on https://material.angular.io Features a11y: add autoCapture option to cdkTrapFocus ( #7641 ) ( 20b47d7 ) datepicker: dispatch events when datepicker is opened and closed ( #7792 ) ( 998153a ) dialog: add ariaLabel and focusOnOpen config options ( #6558 ) ( dad5922 ) gestures: add injection token for specifying Hammer.js options ( #8106 ) ( f2a0206 ), closes #7097 menu: allow disabling ripples on items ( #8388 ) ( ce23395 ), closes #8261 overlay: add option to re-use last preferred position when re-applying to open connected overlay ( #7805 ) ( f83beb8 ) reposition-scroll-strategy: add option for closing once the user scrolls away ( #8233 ) ( 58598c4 ) slider: support specifying tabindex ( #7848 ) ( 8e9dade ) tab-nav-bar: allow setting tabindex for links ( #7809 ) ( a041253 ) 5.0.0-rc0 cesium-cephalopod (2017-11-06) Highlights First release candidate for Angular Material and CDK! The team now believes that APIs and behaviors are stable and mature enough to exit beta. Please continue to file issues that help us eliminate more bugs from the forthcoming 5.0.0 release. Moving forward, the major version number of Angular Material and CDK will update alongside Angular itself. A moment.js implementation of the DateAdapter for MatDatepicker is now available as @angular/material-moment-adapter Based on Angular 5.0 More consistent naming conventions across the board 60+ bug fixes BREAKING CHANGES Angular Material now requires Angular 5, which itself requires TypeScript 2.4+ and RxJS 5.5.2+ mat-icon now uses HttpClient from @angular/common/http instead of Http from @angular/http . Any unit tests that faked icon responses should be changed to use an HttpInterceptor . @angular/cdk/rxjs has been removed in favor of RxJS 5.5's lettable operators . toolbar: in previous versions, any content of mat-toolbar not wrapped in a mat-toolbar-row would be rendered inside of an implicitly created mat-toolbar-row . As of rc0, this implicit row will no longer be created. This means that any custom application CSS that targeted this implicitly created mat-toolbar-row will no longer apply. Users can re-add the mat-toolbar-row in their own templates to match the original output structure. This resolves a longstanding issue where display: flex styles were difficult to use on mat-toolbar . accordion: move CdkAccordion to @angular/cdk/accordion CdkAccordion and associated classes live in @angular/cdk/accordion AccordionChild is renamed to CdkAccordionChild CdkAccordion no longer has displayMode and hideToggle @Inputs CdkAccordionItem is now a @Directive table : The argument order for the when property of matRowDef and cdkRowDef has been changed from (rowData, index) to (index, rowData) in order to match trackBy . datepicker: fromIso8601 method on DateAdapter removed in favor of deserialize DateAdapter will return an invalid date instead of throwing an error The userSelection @Output of mat-calendar has been made internal-only cdk/scrolling: ScrollDispatcher.getScrollContainers has been renamed to getAncestorScrollContainers to better match its behavior. The ScrollDispatcher.scrollableReferences property has been renamed to scrollContainers . The ScrollDispatcher.scrollableContainsElement method has been removed. The Scrollable class has been renamed to CdkScrollable for consistency. Any uses of the ScrollDispatcher.scrolled method have to be refactored to subscribe to the returned Observable, instead of passing in the callback . Example ```ts // Before scrollDispatcher.scrolled(50, () = ...); // After scrollDispatcher.scrolled(50).subscribe(() = ...); `` * **unique-selection:** move UniqueSelectionDispatcher to @angular/cdk/collections ( UniqueSelectionDispatcher , UniqueSelectionDispatcherListener , and UNIQUE_SELECTION_DISPATCHER_PROVIDER ) * MATERIAL_COMPATIBILITY_MODE , CompatibilityModule , NoConflictStyleCompatibilityMode , MatPrefixRejector , MdPrefixRejector symbols have been removed. * MAT_CONNECTED_OVERLAY_SCROLL_STRATEGY is renamed to CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY` Deprecations The following classes have been renamed. The old names are still available as deprecated: OverlayOrigin - CdkOverlayOrigin ConnectedOverlayDirective - CdkConnectedOverlay PortalDirective - CdkPortal PortalHostDirective - CdkPortalOutlet ObserveContent - CdkObserveContent The following @Output names have been renamed. The old names are still available as deprecated: mat-select onOpen - opened onClose - closed change - selectionChange mat-sidenav / mat-drawer open - opened close - closed mat-menu close - closed matMenuTriggerFor onMenuOpen - menuOpened onMenuClose - menuClosed mat-chip onSelectionChange - selectionChange remove - removed destroy - destroyed mat-tab-group selectChange - selectedTabChange Features table: add MatTableDataSource ( #6747 ) ( a9600e7 ) dialog: support minWidth, minHeight, maxWidth and maxHeight ( #7488 ) ( 57f19cd ) overlay: new keyboard dispatcher for targeting correct overlay ( #6682 ) ( a2ca4d6 ) snack-bar: set snack bar to be responsive. ( #7485 ) ( 5b7982f ) sort: use existing intl provider if one exists ( #7988 ) ( c8df2c1 ) dialog: add optional generic param for config data ( #7447 ) ( b29ac45 ), closes #4398 Most directives / components now define an exportAs name ( #7554 ) ( fa441bc ) Bug Fixes block-scroll-strategy: disable smooth scrolling before restoring scroll position ( #8132 ) ( 75bccde ), closes #7139 button: focus styles not applied to programmatically focused buttons ( #5966 ) ( a0bb1a3 ), closes #7510 button-toggle: support two-way binding of value ( #7911 ) ( ee4915c ) card: change image path to https in example ( #7800 ) ( 65d3630 ) chip-list: use role = listbox only if chip list is not empty ( #7664 ) ( dc76c09 ) chips: programmatically selected chip stealing focus ( #7978 ) ( 8168667 ) datepicker: allow DateAdapter authors to have more control ove\u2026 ( #7346 ) ( 9fa075e ) datepicker: use disabled state from FormControl ( #7514 ) ( 66e71c8 ) dialog: don't block other dialogs from opening while animating ( #8051 ) ( cc4fc11 ), closes #6560 drawer: not restoring focus on close ( #7668 ) ( 3041124 ) drawer: unable to toggle while drawer is animating ( #6810 ) ( 085827f ), closes #6376 expansion-panel: prevent content from being clipped ( #7617 ) ( aa77aa1 ) focus-trap: server-side rendering error ( #7635 ) ( f7a12b6 ), closes #7633 focus-trap: update focus trap attrs to camel case #6799 ( #6960 ) ( c663fad ) form-field: fix underline at different zoom levels ( #7567 ) ( 5cffd7c ) form-field: remove 200px width since it messes up flex layouts ( #7083 ) ( 160a511 ) form-field: remove specific mention of matInput in error ( #7727 ) ( f17cb99 ) icon: use SafeResourceUrl in getSvgIconFromUrl ( #7535 ) ( 291a87c ) input: remove IE clear icon ( #8095 ) ( 2fa679b ), closes #8076 menu: add typography mat-font-weight ( 7fe1b81 ) menu: make @Output names consistent #6677 ( #8053 ) ( b2dd17a ) menu: not handling keyboard events when opened by mouse ( #4843 ) ( d822a39 ), closes #4991 menu: wrong offset for nested menu in a fallback position ( #7562 ) ( 074f6ce ), closes #7549 overlay: CloseScrollStrategy not triggering change detection on close ( #7929 ) ( c0ba25a ), closes #7922 overlay: emitting to detachments stream when not attached ( #7944 ) ( 6fdc237 ) overlay: import BidiModule in OverlayModule ( #7566 ) ( 4321f32 ) overlay: overlay class audits #6372 ( #8056 ) ( cd05b54 ) overlay: wait until after change detection to position overlays ( #6527 ) ( f299d25 ) paginator: fix select baseline; support mobile ( #7610 ) ( c12e4b5 ) progress-spinner: fallback animation not working ( #7599 ) ( 4bb696e ) progress-spinner: inaccurate stroke width on really small spinners ( #7725 ) ( f52f078 ), closes #7686 progress-spinner: spinner with narrower stroke not taking up entire element ( #7686 ) ( 2361983 ), closes #7674 scroll: Replace references to scrollableReferences ( #7752 ) ( 9673f63 ) select: errors not shown on submit ( #7640 ) ( d2f41a4 ), closes #7634 select: make @Output names consistent #6677 ( #8052 ) ( f59abdb ) select: not scrolling active option into view when typing ( #7620 ) ( 717f252 ) select: remove inert focus call ( #7729 ) ( 70c349c ) select: support typing to select items on when closed ( #7885 ) ( 8edb416 ) select: unable to preselect array value in single selection mode ( #7603 ) ( d55aa0c ), closes #7584 select: wrong cursor on disabled select ( #7696 ) ( 9b4f435 ), closes #7695 selection-list: fix option value coercion and selection events ( #6901 ) ( 80671bf ), closes #6864 snack-bar: add content fade in animation ( #7504 ) ( 2b9c470 ) snackbar: swap enter and exit animation curves ( #6791 ) ( 4f571b1 ) sort: fix arrow on width-constrained headers ( #7569 ) ( 147ae46 ) spinner: set initial value for spinner to 0. ( #8139 ) ( 9e4c636 ) stepper: don't grey out non-linear steps ( #7479 ) ( 60707b3 ), closes #7260 stepper: error when selectedIndex is pre-set ( #8035 ) ( cf11ff2 ), closes #8031 table: broaden abstraction for filtering ( #8059 ) ( d47b37a ) table: cell content should not stretch width ( #7666 ) ( bb424e2 ) table: empty string should be sorted right ( #8011 ) ( 58627c4 ) table: render cells even if data is falsy ( #7914 ) ( f601e83 ) table: switch when arguments ( #7516 ) ( a2129fc ) table: Provide a provider if exists. ( #7895 ) ( 9a05ecd ), closes #7344 table: throw error when missing row defs ( #7751 ) ( 55476e2 ) table: update implicit when using trackby ( #7893 ) ( f806286 ) tabs: incorrect ripple color for tabs with background ( #8123 ) ( 02d3eb6 ) toolbar: no longer auto-generate toolbar rows ( #6661 ) ( c3405aa ), closes #6004 #1718 tooltip: don't open from programmatic focus ( #7258 ) ( 90a55fa ), closes #7245 viewport-ruler: incorrectly caching viewport size ( #7951 ) ( 0d6d9cc ) consistent names for all cdk directives ( #8088 ) ( f08b3f0 ) don't show sanity check messages in tests ( #8080 ) ( d17f9d2 ) user-select mixin ignores value ( #7992 ) ( eaa4a36 ) Performance Improvements scroll remove persistent global scroll listener ( #7560 ) ( d6698e1 ), closes #6882 drawer: drawer content repainting on scroll ( #7719 ) ( 131e98f ) focus-monitor: use passive touch listener ( #7957 ) ( ff7a13b ) tabs: avoid repainting while scrolling ( #7889 ) ( 943395e ) Code Refactoring accordion: move CdkAccordion to /cdk ( #7530 ) ( 4d04472 ) remove compatibility mode ( #7689 ) ( dcef604 ) switch to HttpClient ( #6702 ) ( 0ea4370 ) 2.0.0-beta.12 marble-mustache (2017-10-05) Highlights Progress spinner is now entirely css-based. Fixed sidenav: the sidenav can now be configured to use fixed positioning. This resolves a longstanding issue where sidenav-container would always introduce a scrolling region. mat-select is now used inside mat-form-field . This makes all of the existing form-field features available with mat-select , including hints, errors, prefixes, and suffixes. This also ensures that mat-select and matInput have a consistent presentation. mat-form-field mat-select placeholder= State mat-option *ngFor= let state of states [value]= state {{ state }} /mat-option /mat-select /mat-form-field a name= 2.0.0-beta.12 /a # [2.0.0-beta.12 marble-mustache](https://github.com/angular/material2/compare/2.0.0-beta.11...2.0.0-beta.12) (2017-10-05) Breaking Changes All \"md\" prefixes have been removed. See the deprecation notice in the beta.11 notes for more information . All cdk re-exports in @angular/material have been removed. See the the beta.10 notes for more information . Previously the ScrollDispatcher.scrolled subscription would react both on scroll events and on window resize events. Now it only reacts to scroll events. To react to resize events, subscribe to the ViewportRuler.change() stream. UniqueSelectionDispatcher , UniqueSelectionDispatcherListener and UNIQUE_SELECTION_DISPATCHER_PROVIDER are no longer available from @angular/material and instead must be imported from @angular/cdk/collections isFocusTrapEnabled is now properly marked internal. The OverlayRef.getState method has been renamed to OverlayRef.getConfig . defaultErrorStateMatcher has been replaced by ErrorStateMatcher . For more info, see the input docs . Features autocomplete: add md-autocomplete classes to overlay panel ( #7176 ) ( f8cd790 ), closes #4196 dialog: add datepicker dialog and popup classes for easy styling ( #7013 ) ( 0ff8d5d ) menu: support typeahead focus ( #7385 ) ( f0d20ca ) nav-tabs: add mat-tab-label-active class to active nav tab labels ( #7508 ) ( 00e9338 ) progress-spinner: switch to css-based animation ( #6551 ) ( 630dfad ) select: add support for custom error state matcher ( #7443 ) ( a774688 ), closes #7419 select: make select work inside form-field ( #6488 ) ( d914cc4 ) selection-model: de/select multiple values at the same time ( #7001 ) ( e52beeb ) sidenav: Add support for fixed sidenavs ( #6712 ) ( 61579bc ) sort: add enter and leave arrow animations ( #7180 ) ( 2d350a0 ) table: add row when predicate ( #6795 ) ( 0875b85 ) viewport-ruler: add common window resize handler ( #7113 ) ( 3b0915a ) Bug Fixes add exportAs to missing components ( #7392 ) ( 31e9775 ), closes #7361 remove all md prefixes ( #7241 ) ( 20a23f1 ) slide-toggle: report change to model before firing a change event ( #7076 ) ( c82fca8 ), closes #7074 remove cdk re-exports from @angular /material ( #7112 ) ( f9b5ccd ) autocomplete: don't open panel for readonly inputs ( #7271 ) ( 5f8615f ), closes #7269 autocomplete: emit closing action for escape keydown event ( #6250 ) ( f4673a5 ) autocomplete: empty not cleaning up on tab ( #7270 ) ( 6be0462 ), closes #7268 autocomplete: error if panel is added asynchronously ( #7078 ) ( 504ba70 ), closes #7069 autocomplete: remove invalid aria markup ( #7107 ) ( 6bd6b9f ), closes #7100 button: allow for elevation to be overwritten ( #7305 ) ( 92a868e ), closes #7264 calendar: not reacting to min/max boundary changes ( #7234 ) ( eb012cc ), closes #7202 checkbox: defaulting to invalid name and value attributes ( #7130 ) ( 26788f1 ) checkbox: support native tabindex attribute ( #6793 ) ( 0270cf5 ) chips: do not set chips value if there's no ngControl or value ( #7285 ) ( d9ba13f ) chips: fix chip list focus and keyboard behaviors ( #7319 ) ( f166468 ) common: don't log doctype warning when rendering server-side ( #6833 ) ( f8ed442 ) common-module: check if computed styles are available ( #7003 ) ( 5da9e64 ), closes #7000 datepicker: make sure _datepickerInput exists before accessing its ( #7033 ) ( 2129b7a ) dialog: directionality not injected into child components ( #7111 ) ( daa3880 ) drawer: backdrop not transitioning on close ( #6651 ) ( 80310a5 ) drawer: drawer container animating when open by default ( #7129 ) ( 4d278dd ), closes #7007 drawer: drawer container not reacting to drawer removal ( #7060 ) ( b0b91f4 ), closes #6271 drawer: open event not firing on init ( #7214 ) ( ba5653d ), closes #7208 input: apply readonly attribute when readonly ( #7439 ) ( 01622b1 ) input: don't highlight container when readonly input is focused ( #7273 ) ( f076390 ) input: make autosize work inside tabs stepper ( #7341 ) ( c6824d5 ) list-key-manager: align matching logic with native listbox ( #7212 ) ( 846cc13 ) list-key-manager: don't focus disabled items in typeahead mode ( #7382 ) ( 1823b2f ) menu: multiple close events for a single close ( #7037 ) ( 2dcb76c ) menu: nested menu error when items are rendered in a repeater ( #6766 ) ( 7a96570 ), closes #6765 overlay: detach method returns undefined ( #7449 ) ( 0584cdf ), closes #7408 paginator: page size selector not working ( #7263 ) ( 2b3d795 ) radio: defaulting to invalid name attribute ( #7131 ) ( c5e162b ) ripple: handle touch events ( #7299 ) ( fe0864b ), closes #7062 ripple: remove unused ScrollDispatchModule ( #7528 ) ( 4a1a68d ) ripple: use element coordinates instead of page coordinates ( #7446 ) ( 7714a5c ), closes #7436 select: losing focus when selecting values through binding ( #7296 ) ( 86bea91 ), closes #7092 select: multiple change events emitted when changing options of a closed select ( #7232 ) ( c7ab828 ), closes #7227 select: prevent nbsp from getting butchered in AOT ( #7363 ) ( 2e71cac ) select: theme not being transferred to the panel ( #7342 ) ( 6b70ca6 ) selection-list: model not updated when option is selected programmatically ( #7334 ) ( f40a7cc ), closes #7318 selection-list: restore focus if active item is destroyed ( #7125 ) ( e05f939 ) selection-list: tabIndex should respect disabled state ( #7039 ) ( c2a9516 ) sidenav: change content from md- to mat- ( #7307 ) ( d05dcfa ) slider: change event is not being emitted ( #7278 ) ( 39543a3 ), closes #7207 snack-bar: positioned snack bar animation not starting off-screen ( #7453 ) ( 58d3bb8 ) snack-bar: subsequent snack bars not opening; animation issues ( #7086 ) ( 8e77261 ), closes #7063 sort: fix incorrect conditional grouping ( #7427 ) ( f5e916d ) sort: style changes to fix IE ( #7375 ) ( 75f26e8 ) sort: throw error on invalid direction ( #7378 ) ( cc6f39e ) stepper: align appearance with spec ( #7279 ) ( 4122ae2 ), closes #7260 stepper: avoid blurry content on IE ( #6992 ) ( 6f48710 ) stepper: selected is always undefined ( #7213 ) ( 217840c ) stepper: switch to OnPush change detection ( #7119 ) ( c2c6e04 ) stepper: unable to internationalize labels ( #7122 ) ( 6e3bbcb ) tabs: blurry content in IE ( #6954 ) ( 7a354a0 ), closes #6944 tabs: update tab output names ( #7134 ) ( 38268d3 ) theming: incorrect green-500 contrast color ( #7492 ) ( c1f6ea1 ), closes #7490 tooltip: ensure tooltip stays within viewport ( #6659 ) ( c8ddd39 ), closes #5428 tooltip: minification issue ( #7430 ) ( b121e32 ) 2.0.0-beta.11 carapace-parapet (2017-09-21) Highlights Each @angular/material component is now bundled into its own javascript file. This will allow tools like webpack to more easily load only the components being used in an application. New stepper component! The base behavior lives in @angular/cdk with Material Design flavors in @angular/material . Breaking changes Angular Material now requires Angular 4.4.3 or greater MaterialModule has been removed. ( cf1ece0 ) (#6803) See the deprecation notice from beta.3 for more information . MdCoreModule has been removed. Most of its functionality has been moved to @angular/cdk over the last few releases. FocusOriginMonitor has been renamed to FocusMonitor and moved to @angular/cdk . chip-list: The outputs select and deselect have been removed in favor of a single onSelectionChange output. overlay: OverlayState has been renamed to OverlayConfig overlay: Now that the Overlay is part of the cdk rather than Angular Material directly, the themeClass property has been removed. To add a class to the overlay for theming, you can do overlayContainer.getContainerElement().classList.add('my-theme-class'); DateAdapter method getISODateString has been renamed to toIso8601 and a new method fromIso8601 has been added. sort: The sort-change stream mdSortChange has been renamed to sortChange . Deprecation of \"md\" prefix. In earlier betas, we've had a compatibility mode that allowed people to use either \"md\" or \"mat\" as the selector for Angular Material components. This was created so that these components could live side-by-side with AngularJS Material without CSS from the two libraries colliding. For beta.11, we've made the decision to deprecate the \"md\" prefix completely and use \"mat\" moving forward. This affects all class names, properties, inputs, outputs, and selectors (CSS classes were changed back in February). The \"md\" prefixes will be removed in the next beta release. You can automatically update your projects with the angular-material-prefix-updater tool. Check out the tool's page for instructions on how to run. Why are we doing this? We like the \"md\" prefix too! We added compatibility mode in order to keep \"md\" around, but over time we found that there were too many downsides to continue supporting both prefixes at the same time: Many users found the fact that the CSS used \"mat\" while templates used \"md\" confusing. Users in compatibility mode found that having \"mat\" in their templates while TypeScript class names remained \"Md\" to be unfriendly. Making both prefixes available consistently through templates required adding many getters/setters that aliased the \"true\" property . This ends up increasing payload size and complexity of the source code. Compatiblity mode itself used broad directive selectors to enforce that only one prefix was used at a time. This causes a problem where this broad selector prevents Angular from throwing an error if an application uses a component without importing its NgModule . Why not change the styles in AngularJS Material? We explored this option early on (before creating compatibility mode). We found that changing the library's styles such that they wouldn't affect the Angular Material components would increase the specificity. This would have been a significant breaking change, as it would have potentially broken countless custom styles that relied on a particular specificity working. Other deprecations StyleModule is deprecated. FocusOriginMonitor (the only thing it contained) has been renamed to FocusMonitor and moved to @angular/cdk/a11y ( A11yModule ). Bug Fixes autocomplete,select: inconsistent disabled option coloring ( #6640 ) ( 454781d ), closes #6638 autosize: not resizing on programmatic changes ( #6654 ) ( 89fea50 ), closes #5247 button-toggle: border radius ignored if option is selected ( #6699 ) ( 82e14f8 ), closes #6689 checkbox: label content should not wrap ( #6674 ) ( 9acab86 ), closes #6671 chips: set appropriate aria-orientation ( #6464 ) ( a37aa6a ) datepicker: allow date or datetime strings in fromIso8601 ( #7220 ) ( 8436f8c ) datepicker: allow ISO 8601 strings as inputs ( #7091 ) ( d2ceb2c ) datepicker: backdrop class should be mat- ( #7056 ) ( 2b61eb6 ) datepicker: Create a new injection token to avoid overriding LOCALE_ID ( #6708 ) ( 2635cad ) datepicker: fix wrong datepicker-input value for non MM/DD/YYYY locales ( #6798 ) ( 29399b8 ) datepicker: makes sure the datepickerInput is registered ( #7049 ) ( e4d48d7 ) datepicker: toggle not reacting to disabled state changes in datepicker or input ( #6964 ) ( 85993d3 ) expansion-panel: dark theme header hover color ( #6616 ) ( 21c68ad ) form-field: add aria-owns to label element ( #6683 ) ( 4191b4d ) form-field: placeholder not floating if autofilled ( #6839 ) ( 602a861 ), closes #6837 grid-list: avoid unnecessary calc declarations ( #6745 ) ( 255611b ) grid-list: styles not cleared when switching to a different styling mode ( #6660 ) ( 87d607e ), closes #4047 input: remove resize handle from non-textarea inputs ( #6768 ) ( 1272f03 ), closes #6757 list: subheader margin being overwritten by typography ( #6735 ) ( efe483a ) menu: multiple close events for a single close ( #6961 ) ( 1cccd4b ) menu: nested menu hover not working when trigger is added lazily ( #6807 ) ( 6b5100b ), closes #6731 menu: nested trigger staying highlighted after click ( #6853 ) ( 04bf3d1 ), closes #6838 overlay: rename OverlayState to OverlayConfig ( #6972 ) ( 1cfce8d ) progress-bar: query mode not reversing direction in rtl ( #6922 ) ( 8a21881 ) select: extra whitespace around placeholder ( #6955 ) ( 9fe6386 ), closes #6923 selection-list: do not coerece option value to boolean ( #6983 ) ( dfe01f2 ) selection-list: proper style for disabled options ( #6829 ) ( 547d11f ) slide-toggle: remove side-margin if slide-toggle label is empty ( #6881 ) ( a1ec81a ), closes #6868 slide-toggle: support native tabindex attribute ( #6613 ) ( 8f9f3c8 ) slider: thumb disappearing on disabled element with thumb label ( #6641 ) ( 8243b16 ), closes #6631 slider: update styles when focus and dir change ( #6700 ) ( 8c49422 ) slider, drawer: unsubscribe from directionaly change subject ( #6907 ) ( a7ce31e ), closes #6892 #6903 snack-bar: animation not starting for subsequent snack bars ( #6649 ) ( 730e7ae ), closes #6222 sort: reverse directions and better animation ( #6802 ) ( 6fa9e6f ) table: gracefully handle undefined/null columns ( #6862 ) ( 3ddf65b ) tabs: fix infinite tab loop ( #6663 ) ( 67e02b0 ), closes #4639 tabs: tab spacing on desktop incorrect ( #6681 ) ( b678119 ), closes #3347 tooltip: closing immediately when triggered on click ( #6590 ) ( bcd026f ) tooltip: ensure tooltip never passes undefined message to ( #7018 ) ( f6d1078 ) add mat exportAs and class aliases ( #7106 ) ( a96b545 ) tooltip: error on trigger escape presses while closed ( #7028 ) ( dcf3b27 ), closes #7009 Features chip-list: implement FormFieldControl and ControlValueAccessor ( #6686 ) ( 7a42706 ) datepicker: Add Moment.js adapter ( #6860 ) ( 9545427 ) dialog: add afterOpen to MdDialogRef ( #6887 ) ( 27cbe47 ) expansion-panel: allow for the panel header height to be customized ( #6643 ) ( 11e2239 ), closes #5641 overlay: replace OverlayContainer themeClass w/ addClass/removeClass methods ( #6975 ) ( a944f6e ) selection-list: add selectAll and deselectAll functions ( #6971 ) ( dc9679d ), closes #6969 sort: add sorting indicator animation ( #5831 ) ( 70bd5fc ) stepper: Add e2e test ( #6776 ) ( bef6271 ) stepper: add moduleId to components ( #6780 ) ( f375f92 ) stepper: Address previous comments + add directionality support ( #6775 ) ( c396596 ) stepper: initial version of stepper ( #6594 ) ( 87318bc ) viewport-ruler: add common window resize handler ( #6680 ) ( 881630f ) add preserveWhitespaces: false to all components ( #7115 ) ( 2b0315d ) move FocusMonitor into cdk ( #6921 ) ( 6cfe5c4 ) Performance Improvements dialog: avoid repaintin dialog content element on scroll ( #6890 ) ( 51396d0 ), closes #6878 memory leak when subscribing to zone events ( #6918 ) ( f6c9172 ), closes #6905 2.0.0-beta.10 d\u00e9coupage-panjandrum (2017-08-29) Highlights Over 140 bug fixes Nested menus Nested menus Nested menus! Autocomplete supports md-optgroup Overlay moved to @angular/cdk New component MdSelectionList md-input-container renamed to md-form-field (while still being backwards compatible) Almost all components now use OnPush change detection (dialog being the exception) You can now get back the EmbeddedViewRef when attaching a TemplatePortal MdSidenav has been split into MdSidenav and MdDrawer . The MdSidenav is now meant to be used for top-level application navigation, while the drawer is meant to be used for more local split views. While there are no differences introduced between the two in this release, future releases will see different features added to each Breaking changes Imports from @angular/cdk are now scoped to a specific sub-package. For example, if you previously had: import {LiveAnnouncer, Overlay, Directionality} from '@angular/cdk'; You will now need to write: import {LiveAnnouncer} from '@angular/cdk/a11y'; import {Directionality} from '@angular/cdk/bidi'; import {Overlay} from '@angular/cdk/overlay'; This helps ensure you're only pulling in the pieces of the cdk being used as well as providing more context about what an imported symbol is being used for. The current set of public @angular/cdk subpackages are: a11y, bidi, coercion, collections, keycodes, observers, overlay, platform, portal, rxjs, scrolling, table. If you are using SystemJS, each package you use must be added to the SystemJS configuration. All Overlay code has been moved from @angular/material to @angular/cdk . The symbols are still re-exported through @angular/material , but these re-exports will be removed in a subsequent release. cdkScrollable , ScrollDispatcher , and ViewportRuler have been moved from overlay into its own scrolling subpackage in @angular/cdk . input: Inputs have a width of 200px by default (similar to native input elements). The width can be overridden by via the mat-form-field css class. input: CSS classes have changed from mat-input-container- to mat-form-field- . input: md-prefix and md-suffix are now mdPrefix and mdSuffix . portal: TemplatePortal now requires a generic type (C) to align with TemplateRef . This will usually be any . portal: Attaching a template portal will now return an EmbeddedViewRef C instead of an empty Map . observe-content: ObserveContentModule has been renamed to ObserversModule overlay: PositionStrategy now has an attach method and no longer passes the overlay DOM element to apply . datepicker: You must now use a date object (of whatever type your DateAdapter uses) rather than a string when setting the value of the datepicker programmatically (through value, ngModel, or formControl). datepicker: mdDatepickerToggle is now an element md-datepicker-toggle with a for property that points to the MdDatepicker instance datepicker: NativeDateAdapter will now use Angular's LOCALE_ID instead of the browser's locale. sidenav: CSS classes have changed from mat-sidenav- to mat-drawer- theming: The nonstandard 0 and 1000 hues have been removed from the mat-gray palette * chips: The selectable property of the md-chip-list has now been moved to md-chip to maintain consistency with the new removable option. If you used the following code, md-chip-list [selectable]= selectable md-chip My Chip /md-chip /md-chip-list you should switch it to md-chip-list md-chip [selectable]= selectable My Chip /md-chip /md-chip-list Deprecations All dash-case @Directive selectors are deprecated in favor of the camelCase equivalent. The dash-case selectors will be removed in a subsequent release. Some examples include: Old New md-line mdLine md-tab-link mdTabLink md-tab-label mdTabLabel md-card-avatar mdCardAvatar md-input-container has been renamed to md-form-field . The old selector will be removed in a subsequent release. This is in preparation to making md-select a child of md-form-field such that both select and input share the same features and appearance. For camelCased directives, each corresponding @Input() is now also prefixed. For example, cdkConnectedOverlay now has inputs for cdkConnectedOverlayOrigin , cdkConnectedOverlayPositions , etc. The class members themselves are unchanged. The unprefixed inputs will be removed in a subsequent release. Affected directives are cdkPortalHost , cdkConnectedOverlay , mdTooltip , mdTextareaAutosize , and mdMenuTriggerFor . MdCoreModule is deprecated and will be removed in a subsequent release now that most of its functionality has been moved to @angular/cdk Reminder that MaterialModule is deprecated and will be removed in a subsequent release (see changelog from beta.3 for more information). Features autocomplete: emit event when an option is selected ( #4187 ) ( 2dd5c7c ), closes #4094 #3645 autocomplete: support for md-optgroup ( #5604 ) ( e41d0f3 ), closes #5581 cdk: move cdkScrollable, ScrollDispatcher, and ViewportRuler out of overlay ( #6547 ) ( 0f6a2ec ) cdk: move overlay into cdk ( #6100 ) ( 4d82f83 ) chip: add aria-selected to chip ( #5920 ) ( 281de25 ) chips: Add removal functionality/styling. ( #4912 ) ( c82aca9 ), closes #3143 chips: add user defined tab index to chip list ( #6073 ) ( 9eb9ddf ) datepicker: close calendar after choose the same date again ( #6323 ) ( 9ba5d84 ) datepicker: export unexported components for potential extension ( #6314 ) ( 7bc648b ) dialog: add beforeClose method ( #6377 ) ( cdbf305 ) dialog: expose backdrop clicks ( #6511 ) ( df28c3d ) dialog: open dialog API improvements ( #6289 ) ( 8b54715 ), closes #6272 expansion-panel: add the ability to disable an expansion panel ( #6529 ) ( 921432a ), closes #6521 focus-trap: return whether shifting focus was successful ( #6279 ) ( 7626c51 ) menu: add indicator to menu items that trigger a sub-menu ( #5995 ) ( a51f82f ) menu: add injection token for overriding the default options ( #5483 ) ( 3cb3945 ), closes #5479 menu: add nested menu functionality ( #5493 ) ( 1e0c1fc ) menu: increase nested menu elevation based on depth ( #5937 ) ( 91f7bf7 ) native-date-adapter: use default locale from LOCALE_ID ( #5419 ) ( c09e8a7 ), closes #5393 option: support for disableRipple binding ( #5915 ) ( addf1ce ) overlay: add maxWidth and maxHeight ( #6508 ) ( 9904e56 ) overlay: add providers for overriding the scroll strategies per component ( #5134 ) ( 184a6e4 ), closes #4093 overlay: support setting multiple panel classes ( #6326 ) ( a190de7 ), closes #6318 paginator: default page size to first option ( #5822 ) ( 42c50b6 ) portal: support context in TemplatePortal ( #6408 ) ( 90a6ac9 ) radio: add required attribute to radio-group ( #5751 ) ( f06fe11 ) select: add ability to customize the select trigger ( #3341 ) ( 72c5d39 ), closes #2275 select: allow disabling ripples for options ( #5967 ) ( 34ec068 ) select: allow focusing items by typing ( #2907 ) ( 5ebca5e ), closes #2668 select: implement compareWith for custom comparison ( #4540 ) ( 054ea4d ), closes #2250 #2785 select: support basic usage without @angular /forms ( #5871 ) ( 9a90eaf ) selection-list: Selection-list initial version ( #5562 ) ( dccce1c ) snack-bar: inject data and MdSnackBarRef into custom snack-bar component ( #5383 ) ( baba6ef ), closes #5371 tab-nav-bar: allow disabling ripples for links ( #6273 ) ( 4ae1b0f ), closes #6245 table: support dynamic column definitions ( #5545 ) ( 66e222f ) tabs: add isActive flag on the individual tabs ( #6424 ) ( 4d36ee0 ), closes #6422 add change emitters to the Intl providers ( #5867 ) ( 0a5489f ), closes #5738 tabs: add theming and ability to set background color ( #5287 ) ( 374aaff ) typography: allow font-family to be set per typography level ( #5905 ) ( 3b41c0c ), closes #5563 typography: allow typography config to be passed via mat-core ( #5625 ) ( 72148c0 ), closes #5589 expose version object in releases ( #4962 ) ( 3bfe7f0 ) rename cdk/keyboard - keycodes cdk/observe-content - observers ( #6039 ) ( 9df292f ) update to Angular 4.3 ( #6483 ) ( 66da597 ) Bug Fixes autocomplete: attach overlay to a more accurate input element ( #6282 ) ( 667a4e4 ) autocomplete: don't darken select option ( #6425 ) ( 67e91a3 ), closes #6407 autocomplete: don't prevent default enter action if panel is closed ( #5977 ) ( fdded66 ), closes #5976 autocomplete: error when closing destroyed panel ( #5446 ) ( 880e6d5 ), closes #5413 autocomplete: highlighted option not reset when closed with escape or enter key ( #6403 ) ( bf59468 ), closes #6258 autocomplete: panel not resetting properly in certain scenarios ( #5911 ) ( ebb5e9e ), closes #5910 autocomplete: placeholder not animating on focus ( #3992 ) ( ff54969 ), closes #5755 autocomplete: placeholder not resetting properly ( #6141 ) ( e4e7ee9 ) autocomplete,datepicker,menu: closing parent dialog by pressing escape ( #6226 ) ( 916d1f3 ), closes #6223 autosize: properly detect line-height in firefox ( #6190 ) ( 3a766f1 ), closes #6179 bidi: make dir and changes readonly ( #5645 ) ( 8c13325 ) button-toggle: add aria-label for button-toggle ( #5919 ) ( eabe2cb ) button-toggle: button-toggle module depends on forms module ( #5542 ) ( 9ab0c90 ) button-toggle: remove emit change event when value changes ( #6034 ) ( f8c5be8 ) card: prevent content from overlapping footer ( #5583 ) ( a394418 ), closes #5486 card: unable to bind to align attribute ( #5495 ) ( 243b97d ), closes #5490 checkbox: Add RequiredTrue validator for md-checkbox ( #6006 ) ( 59319d0 ) checkbox: remove checkmark from tab order ( #6137 ) ( 735ffb5 ), closes #6125 checkbox: server-side rendering error when checking textContent ( #5470 ) ( 0314bd8 ), closes #5453 checkbox, radio: setting id to null causes invalid id for input ( #5398 ) ( bcf4826 ), closes #5394 chips: add exportAs for chip and chip list ( #6084 ) ( e7da1e4 ), closes #6070 chips: cursor on remove button and box-shadow transition ( #6019 ) ( 8253503 ) chips: invalid aria-selected value for non-selectable chip ( #6544 ) ( 90fc300 ) chips: mark onFocus as internal ( #6519 ) ( 449ed19 ) chips: not visible in high contrast mode ( #5338 ) ( a5a8ff2 ) chips: remove background from unstyled chip ( #5777 ) ( 0f7be2e ) compat: add camelCase selectors to tab label wrapper ( #5955 ) ( a7e75da ) compat: add element selector for cdk-accordion ( #5954 ) ( 3c46001 ) connected-position-strategy: position change event not emitting for fallback positions ( #5978 ) ( 63505dc ) datepicker: allow disabling calendar popup ( #5305 ) ( 2294ea2 ) datepicker: better support for input and change events ( #4826 ) ( 35eb294 ) datepicker: center date text properly on android ( #5923 ) ( bbadd01 ) datepicker: deprecate selectedChanged output ( #6025 ) ( ee73d2c ), closes #6000 datepicker: fix error when selecting month with fewer days in year ( #6129 ) ( 9cff8c7 ) datepicker: force Intl.DateTimeFormat to use UTC time zone ... ( #5747 ) ( 76cc6f0 ) datepicker: make height of calendar constant in non-touch mode ( #5694 ) ( 5bcba85 ) datepicker: make touch UI calendar use 80% of width in portrait ( #5943 ) ( 641a38f ) datepicker: mark input tocuhed on calendar date selected ( #6007 ) ( 21e9768 ) datepicker: refactor datepicker toggle to support theming ( #5317 ) ( 4255476 ) datepicker: remove aria-expanded on datepicker input ... ( #5746 ) ( 4ea4baa ) datepicker: remove toggle icon from tab order on IE ( #6405 ) ( ea17d3d ) datepicker: use 3 rows to display months of year (consistent with internal mocks) ( #5427 ) ( da1d1ca ), closes #5202 datepicker: use correct viewContainerRef for dialog. ( #6026 ) ( 08037f9 ) datepicker: validate that input actually parses ( #5711 ) ( 8bb54ca ) dialog: add config option for aria-describedby ( #5365 ) ( 68241a8 ) dialog: better handling of custom ViewContainerRef with OnPush change detection ( #6164 ) ( 5967f6e ) dialog: move focus into container if no focusable elements are found ( #6524 ) ( 4e12072 ), closes #6513 dialog: prevent dialog from opening while another dialog is animating ( #5769 ) ( 36f708c ), closes #5713 dialog: set margin on buttons inside md-dialog-actions ( #5778 ) ( 643023d ) dialog: support passing in dialog result through all MdDialogClose selectors ( #6293 ) ( 4a1f10e ), closes #6278 expansion: use correct expanded line-height ( #5744 ) ( a921948 ) expansion: animation not working in Angular 4.3 ( #6442 ) ( f9bd5d4 ) expansion: only highlight keyboard-focused panel headers ( #6148 ) ( 49a0d7b ) expansion: remove closed panel contents from tab order ( #5441 ) ( 1efa594 ), closes #5432 expansion: remove margin from top and bottom panels in accordion ( #6546 ) ( 7f0e58e ) expansion: set up typography styles ( #5739 ) ( e21b64c ) expansion: standalone panel shouldn't override margins ( #5962 ) ( 81f1f97 ), closes #5949 expansion: toggle not being updated when set programmatically ( #5650 ) ( 41c804b ), closes #5549 #5623 expansion: wrong margins in rtl ( #5800 ) ( 106ded4 ) grid-list: figure not expanding to full width ( #6578 ) ( ea143a0 ), closes #6586 grid-list: invalid inline styles when rendering server-side ( #6052 ) ( 22ce1da ), closes #6048 icon: error when toggling icon with binding in IE11 ( #6102 ) ( 0795432 ), closes #6093 icon: icon element not removed when svgIcon is reset ( #6502 ) ( 5e3228f ), closes #6495 input: add overflow:hidden when calculating autosize height ( #5773 ) ( e0fc526 ) input: don't highlight container when readonly input is focused ( #5776 ) ( 349121d ), closes #5749 input: fix input/placeholder alignment on safari ( #6072 ) ( 9ac5d13 ) input: input module depends on forms module ( #5579 ) ( 44ca46a ) input: invalid font declaration ( #5154 ) ( 92d8368 ), closes #5262 input: make sure 1-line hint is fully contained by input container. ( #5912 ) ( ca3a3b8 ) input: placeholder covering value when using OnPush ( #5660 ) ( 219a8ae ) input: prevent input caret from sticking on iOS ( #6128 ) ( 94bf5e9 ) input: prevent textarea from resizing beyond input container ( #5333 ) ( 36dc75a ) input: required asterisk being read out by screen readers ( #6277 ) ( 0850981 ) input: set default width of 200px on input-container ( #5833 ) ( e9ab9b4 ) input: set proper role on md-error ( #6259 ) ( 3df4d72 ) input: underline should only be thicker if focused ( #6152 ) ( 68e2f46 ) input: update aria-describedby to also include errors ( #6239 ) ( 2af284c ) input,select: align colors with spec ( #5155 ) ( 266f237 ), closes #5114 list: :empty selector did not catch in mat-list-text ( #6124 ) ( 846899d ) list: properly align contents in subheader ( #6221 ) ( 4e6e42e ), closes #6214 list: subheader margin being overwritten by typography ( #5652 ) ( 5bc97ec ), closes #5639 list-key-manager: increase typeahead range to include more characters ( #6543 ) ( 1f4a962 ) list-key-manager: typehead not handling non-English input ( #6463 ) ( 08a6673 ) live-announcer: remove announcer element on destroy ( #5404 ) ( b7efe48 ) menu: align appearance with spec ( #5361 ) ( c20bec8 ) menu: close child menus when parent is closed programmatically ( #6329 ) ( 66b1ff5 ) menu: complete close stream on destroy ( #5368 ) ( d810138 ) menu: make it easier to override elevation ( #5873 ) ( 6f5dcd5 ), closes #5870 menu: prevent user from accidentally opening a sub-menu while animating ( #5996 ) ( eaa6099 ) menu: wrong animation in Angular 4.2+ ( #5836 ) ( 39c3e42 ) overlay: add prefixed inputs, deprecate old ones ( #5957 ) ( 2bf6b57 ) overlay: error when removing empty string theme ( #6306 ) ( faa7601 ) overlay: remove overlay container on destroy ( #5378 ) ( 154bb55 ) paginator: add type button to next / prev buttons ( 5bd655b ) paginator: expose MdPaginatorIntl ( #5716 ) ( 93789cf ), closes #5715 paginator: remove dependency on @angular /forms ( #6080 ) ( 953b38e ), closes #5717 paginator: underlying select vertical alignment ( #6354 ) ( 0d2ea10 ), closes #6338 progress-spinner: prevent users from tabbing into underlying SVG on IE ( #6142 ) ( 235f664 ) radio: animation looking off on IE ( #5620 ) ( d263ca2 ) radio: forward focus to native input ( #6274 ) ( cea4d9f ) radio-group: coerce disabled property ( #5837 ) ( 23ec30f ) select: bigger height for underline on focus ( #5510 ) ( 78f0cec ), closes #5499 select: consistent error behavior to md-input-container ( #4754 ) ( 6f73b35 ), closes #4611 select: disabled select being set to touched state on click ( #5328 ) ( 6b4f9c8 ) select: don't shift option focus when multi-select value is changed programmatically ( #5401 ) ( 6422640 ), closes #5381 select: error if triggerValue is accessed from an empty select ( #6575 ) ( 0526689 ) select: floating label overlapping elements above select ( #6228 ) ( a780052 ), closes #6171 select: lint issue ( #6497 ) ( 1807c5b ) select: required asterisk should use warn color ( #5498 ) ( 97494f7 ), closes #5496 select: server-side rendering error with preselected value ( #6049 ) ( 2388d91 ), closes #6045 select: set aria-multiselectable for multi-select ( #6110 ) ( ce31113 ) select: throwing additional errors if ngModel fails to initialize ( #5405 ) ( 372549c ), closes #5402 select: wrong option amount being read out by NVDA ( #5181 ) ( b8c900c ) select,autocomplete: darken selected option ( #6302 ) ( 504b5df ), closes #6229 sidenav: container not reacting to changes to sidenavs added after init ( #6161 ) ( 0d80a77 ), closes #6127 sidenav: first animation not working in Angular 4.2+ ( #5821 ) ( 804f4c0 ), closes #5673 slide-toggle: invalid model change event ( #4220 ) ( dfe10c3 ), closes #4124 slide-toggle: slide-toggle module depends on forms module ( #5523 ) ( d716b00 ) slider: fix change input emit logic. ( #6234 ) ( 9d3c405 ) slider: set proper font family on label ( #5772 ) ( 1cba2dc ) slider: slider module depends on forms module ( #5578 ) ( c14978b ) slider: work around slidestart event sometimes not firing on iOS ( #6009 ) ( a87a000 ) snack-bar: align theming with spec ( #6506 ) ( 363562f ) snackbar: make closeWithAction public method ( #5686 ) ( f4f64ac ) table: column class names should be css friendly ( #6173 ) ( 1748397 ) table: eliminate need for second change detection ( #5775 ) ( 388494f ) table: Fix change det issue with http example ( #6169 ) ( 4afcc0a ) table: set font family ( #5741 ) ( 5d5ce83 ) tabs: add module dependency on MdCommonModule ( #5304 ) ( 738b6be ) tabs: allow for tabs to be selected using the space key ( #6426 ) ( b5f4caf ), closes #6406 tabs: check if the subscription is defined before unsubscribe ( #5667 ) ( 0eedb5f ) tabs: improved vertical alignment of tab label ( #5771 ) ( b105039 ) tabs: server-side rendering error when aligning ink bar ( #5455 ) ( 448db8b ) add camelCase ng-content selectors ( #5953 ) ( f52c7f4 ) theming: Light green 700 contrast should be white ( #6346 ) ( b4e2488 ) deprecate CoreModule ( #6588 ) ( 377a3bb ) improved key manager typings ( #6443 ) ( 18c6dec ) remove ripples in high contrast mode ( #6355 ) ( fd5e5ff ) textarea: server-side rendering error when using mdTextareaAutosize ( #6050 ) ( 05ca4a7 ), closes #6047 theming: remove non-standard grey palette hues ( #6605 ) ( 3b46360 ) tooltip: panel element blocks hover effects ( #5514 ) ( d04230c ), closes #4691 tooltip: remove native event listener on component destroy ( #5144 ) ( 32db2ba ), closes #4499 tooltip: remove unnecessary tooltip whitespace ( #6531 ) ( 6cdbf36 ) xxx-intl: replace misused EventEmitter with Subject ( #6313 ) ( c20bcf9 ) Performance Improvements observe-content: run outside Angular zone ( #6352 ) ( 5ccf25d ) sidenav: avoid recalculating the inline styles while sidenav is open ( #6189 ) ( 57a2f29 ) table: cell references not being cleaned up on destroy ( #5809 ) ( df1ddee ) tabs: avoid extra resize handler and reflow ( #6434 ) ( 1df79e9 ) 2.0.0-beta.8 plasma-abacus (2017-07-06) Highlights This version marks the release of @angular/cdk (component dev kit)! This package contains general building blocks for UI components decoupled from the visuals of Material Design. In the initial release, code from Angular Material's core/ have been moved for a11y/ , bidi/ , coercion/ , observe-content/ , platform/ , portal/ . The @angular/material package now re-exports these symbols, marked as deprecated. The re-exports will be removed in a subsequent release. Initial version of data-table component. There is both a cdk-table (the core) and the md-table (with Material Design styles). See the documentation on material.angular.io for more information. Initial version of md-paginator and md-sort-header components, which can be used either with md-table or any other table. Both @angular/material and @angular/cdk are now strict null compliant. Breaking changes @angular/material now depends on @angular/cdk as a peer dependency. Some types have expanded to include | null or | undefined for strict null compatibility. If your application uses strict null checks, you may have to update the types in your app to match up with the more accurate types coming from Angular Material. Angular Material no longer adds RxJS operators to the prototype of Observable . If your app depended on these operators being added by Angular Material, you will need to import them explicitly. Bug Fixes autocomplete: allow number zero as value ( #5364 ) ( 9137fd9 ), closes #5363 autocomplete: don't scroll panel when option is visible ( #4905 ) ( d3af57d ) autocomplete: not closing when tapping away on mobile ( #5260 ) ( 1dcaca7 ) autocomplete: reopening when clicking an option in IE ( #5172 ) ( fe31210 ), closes #5165 autosize: resize when form value changes. Fixes #4657 ( #5315 ) ( 8c9c11a ) button-toggle: fix standalone button toggle style ( #5121 ) ( 3d8c833 ) datepicker: pass layout direction to touchUi dialog ( #5052 ) ( 8b6efb1 ) datepicker: use theme foreground color ( #5290 ) ( 51bf26e ) dialog: set aria-labelledby based on the md-dialog-title ( #5178 ) ( aee984a ) directionality: error on platform-server ( #5234 ) ( 49dfe60 ) input: theming mixin error ( #5254 ) ( 37efb54 ), closes #5232 input: underline showing at end if text-align is set ( #5280 ) ( 5c9391d ), closes #5272 memory: Unsubscribe event listeners when using Observable.fromEvent ( #5325 ) ( 1b351cd ) menu: role being set on the wrong element ( #5191 ) ( 2239668 ) overlay: remove webkit tap highlight from backdrop ( #5258 ) ( 8feddd4 ) select: align first option to trigger when it is inside a group ( #5153 ) ( d39cb12 ) select: expose focus method ( #5255 ) ( 7b2d4ae ), closes #5251 select: md-optgroup not using typography styles ( #5193 ) ( b5bf6f5 ) select: page scrolling down when selecting option with space ( #5192 ) ( 2361385 ) snackbar: clear timeout upon dismiss ( #4860 ) ( 146160c ) tabs: server-side rendering error ( #5348 ) ( 0174377 ) unique-selection-dispatcher: remove listeners on destroy ( #5164 ) ( f9bbbe7 ) Features data-table: initial version. Too many commits to list. directionality: a provider to get directionality ( #4044 ) ( 61d979e ), closes #3600 input: add custom error state matcher ( #4750 ) ( f73cc97 ) pagination: initial pagination component ( #5156 ) ( 85fb00a ) sort: add ability to manage and display sorting ( #5307 ) ( b328d36 ) tab-nav-bar: support disabling tab links ( #5257 ) ( fc809ed ), closes #5208 add support for strict null checks ( #5094 ) ( 2bf7024 ) remove uses of rxjs patch operators ( #5314 ) ( e488e3f ), closes #2622 move a11y, bidi, platform, rxjs, and portal to cdk ( #5386 ) ( fde35e4 ) move observe-content to cdk ( #5438 ) ( b00f838 ) 2.0.0-beta.7 glass-delicatessen (2017-06-19) Highlights New md-expansion-panel and md-accordion components! Documentation for these will be coming soon. New typography extension to the theming API! Angular Material should generally work much better with @angular/platform-server. There are still a few bugs, but things should mostly work. Bug Fixes autocomplete: handle escape key ( #4703 ) ( 9e2a66c ) autocomplete: show hover style on selected options ( #4724 ) ( b3b6fda ) autocomplete: throw better error when autocomplete doesn't have a panel ( #4851 ) ( 70b31f1 ), closes #4844 button: remove webkit tap highlight ( #4953 ) ( 3ad80e4 ) button-toggle: remove redundant blocking touchstart listener ( #4947 ) ( 1e92545 ), closes #4221 button, tabs: potential clash with typography styles ( #4915 ) ( 615fa2a ) checkbox: margin for empty checkboxes incorrectly added ( #4730 ) ( 8d9bbbf ), closes #4720 checkbox, radio: fix checkbox label not read in JAWS ( #4610 ) ( 5c48949 ) datepicker: focus trap not working inside popup ( #4839 ) ( 157bda1 ) datepicker: generate api docs ( #4756 ) ( be8d3b2 ) datepicker: inert calendar arrow direction in rtl ( #4960 ) ( 22f0ea0 ) datepicker: minValidator maxValidation false errors ( #4649 ) ( b2c3ed0 ) datepicker: restore focus to trigger element ( #4804 ) ( 8860090 ) datepicker: switch to typography api ( #4950 ) ( 7f298f7 ) dialog: add flex wrap to style ( #4846 ) ( 9d4a34a ) dialog: blurry content and slow animation in IE ( #4809 ) ( c8b1e20 ) dialog: componentInstance unavailable in afterClose ( #4827 ) ( cedf219 ), closes #4815 dialog: invalid text color in dark themes ( #4849 ) ( 3e993b6 ) dialog: partial keyframes animation error ( #5020 ) ( 9c45865 ), closes #5019 focus-trap: focus initial element when zone stabilizes ( #4867 ) ( ce9d253 ), closes #4864 icon: remove automatic aria labelling and add a11y guidance ( #4665 ) ( 657f0e8 ) input: correct invalid colors ( #4771 ) ( 2103907 ) input: IE always adding scrollbar to textarea ( #4917 ) ( 6aaddbf ) input: make input spacing match spec ( #4788 ) ( 16b65e8 ) input: set aria-invalid on mdInput element ( #4757 ) ( 0c03946 ) input: remove align input binding ( #5141 ) ( 0aaeb69 ), closes #5140 input, cdk: a couple of server-side rendering errors ( #5066 ) ( 97e35df ) list: set aria attributes to md-divider ( #4925 ) ( a240c9c ) menu: remove classes from inert element ( #4800 ) ( 93a21c7 ), closes #4484 navbar: update ink bar when links change ( #4897 ) ( 41c43cc ) overlay: emit attach and detach at appropriate times ( #4880 ) ( e98372e ), closes #4871 portal: detect changes for portal hostview while before attaching. ( #4370 ) ( 28d2ddd ) radio: label vertical alignment ( #5120 ) ( d3d6d26 ) radio: make MdRadioButton change detection strategy OnPush ( #2526 ) ( 97a9bdc ) select: consider value changes via arrow keys on closed select as user actions ( #5112 ) ( 73aa43e ), closes #5084 select: panel in multiple mode not overlapping trigger ( #4952 ) ( 638a34a ), closes #4943 select: unable to programmatically select falsy values ( #4868 ) ( 2e3910c ), closes #4854 sidenav: don't restore focus if focus isn't inside sidenav ( #4578 ) ( 3bc82f6 ) slide-toggle: switch typography level to body-1 ( #5000 ) ( 436858e ) snack-bar: test error in IE ( #5048 ) ( 79092bd ) tabs: fix tab translation animation in IE 11 ( #4982 ) ( #4986 ) ( 40f92c5 ) tooltip: not rendering in IE and Edge without web animations polyfill ( #4937 ) ( 22746ce ), closes #4935 make material work with noUnusedParameters ( #4946 ) ( 4b98f21 ), closes #4443 Features autocomplete: extend selector to match textarea ( #4945 ) ( 223a27b ) datepicker: popup positioning improvements ( #4696 ) ( eadccc2 ), closes #4406 dialog: allow disableClose option to be updated ( #4964 ) ( 66629cf ), closes #3938 dialog: allow setting the layout direction ( #4778 ) ( 4658c85 ) dialog: custom class option #4718 #4012 ( #4722 ) ( 28c936f ) expansion-panel: introduce expansion panel ( cac7610 ) input: autosize sets default amount of rows to one ( #4906 ) ( 1055720 ), closes #4852 add camelCase selectors where they were missing ( #4901 ) ( 3eb0681 ) integrate typography api into all components ( #4375 ) ( e650b04 ) overlay: more flexible scroll strategy API and ability to define/override custom strategies ( #4855 ) ( 7e91270 ) placeholder: add global placeholder options ( #4681 ) ( #4681 ) ( d0d79fd ), closes #4311 radio: support for color binding ( #5068 ) ( 82d752b ), closes #4677 select: add input for adding classes to the panel ( #4629 ) ( 99293d9 ), closes #4485 select: add md-optgroup component ( #4432 ) ( d09aa89 ), closes #3182 tooltip: add mdTooltipClass for customizing ( #4893 ) ( 734eccc ) BREAKING CHANGES input: The align input from the md-input-container component has been removed. Developers instead should use plain CSS to achieve the same effect (using text-align: end for example). 2.0.0-beta.6 amber-ansible (2017-05-25) Bug Fixes autocomplete: error when clicking outside instance without mdInput ( #4573 ) ( e6f7ace ), closes #4555 autocomplete: restore focus to input when click on option ( #4702 ) ( eecf897 ), closes #4645 block-scroll-strategy: collapsing root node when enabled ( #4638 ) ( f11d46e ) button: complete ripple when button becomes disabled ( #4372 ) ( fce2868 ) button: ripples blocking mouse events on user content ( #4526 ) ( 9c4d601 ) checkbox, radio: make disabled label disabled match spec color ( #4507 ) ( 8159fcc ) chips: unable to tab out of chip list ( #4605 ) ( 07a82ed ), closes #4593 datepicker: calendar toggle submitting parent form ( #4531 ) ( 84ea8b2 ), closes #4530 datepicker: export MD_DATE_FORMATS and MD_NATIVE_DATE_FORMATS ( #4541 ) ( 58c252f ), closes #4534 datepicker: make datepicker work in compatibility mode ( #4686 ) ( b5b762a ) datepicker: set cursor on clickable elements ( #4542 ) ( d2d67f5 ), closes #4533 datepicker: use default cursor on toggle when disabled ( #4604 ) ( 1319355 ) dialog: enable smooth scrolling on md-dialog-content ( #4608 ) ( 3ae0dc6 ) focus-origin: missing rxjs of operator ( #4497 ) ( 05dbb90 ) icon: handle icons as nodes ( #4699 ) ( 3212411 ), closes #4680 input: continue checking for input child after initialization ( #4569 ) ( 73d6814 ), closes #4551 input: thicken underline in error state, add underline animation ( #4506 ) ( 0666207 ) list-key-manager: remove handling for home and end keys ( #4544 ) ( 2d16345 ), closes #3496 menu: close menu panel on escape ( #4666 ) ( 210e57c ), closes #3601 overlay: overlays potentially being rendered behind browser UI ( #4664 ) ( 96549e8 ), closes #4650 platform: don't shadow window ( #4622 ) ( e8ab0da ) progress-bar: buffer animation not working on user-generated themes ( #4525 ) ( 61f3987 ) select: allow option with undefined or null value to clear selection ( #3141 ) ( 13524c1 ), closes #3110 #2634 select: deselect old options when programmatically setting value ( #4658 ) ( db72b06 ) select: option text color blending in with background on dark theme ( #4568 ) ( 43e207c ), closes #4560 slider: add aria-orientation ( #4602 ) ( 0b5b624 ) slider: make slider work with dark themes ( #4489 ) ( af48bb0 ) snack-bar: remove text-transform uppercase ( #4567 ) ( 82e53c5 ) tabs: dynamic tab scrollbar showing while animating ( #4524 ) ( 2a15cd7 ) tooltip: not using trigger's text direction ( #4413 ) ( d8aeeaa ), closes #4411 universal: gate platform checks on being on browser ( #4635 ) ( e4c7601 ) Features core: expose ScrollDispatchModule ( #4501 ) ( caee5a5 ) dialog: add result to MdDialogClose directive ( #4332 ) ( c45dee2 ) focus-trap: allow setting initially focused element ( #4577 ) ( c946631 ) overlay: add scroll blocking strategy ( #4500 ) ( 6842046 ) snack-bar: allow setting the layout direction ( #4726 ) ( 0e24345 ), closes #4721 2.0.0-beta.5 taffeta-admiral (2017-05-13) Bug Fixes list, option: fix ripples blocking mouse events on user content ( #4503 ) ( c4b3625 ), closes #4480 2.0.0-beta.4 unobtainium-sunglasses (2017-05-12) Breaking Changes MdIconModule no longer imports HttpModule . If your application depended on Http being provided through MdIconModule , you should now directly import HttpModule into your application. The forRoot method on all Angular Material modules has been removed. It was previously deprecated and a no-op. Importing the modules directly will have the same effect. Angular Material now requires TypeScript 2.2, which adds support for mixins. Highlights New datepicker component! This is still very new, so please try it out and file any issues you encounter on Github. You can now disable Material's global sanity checks (at your own risk). These checks include whether your theme file is included, that you have a doctype, and more. See the PR here . Our support for Angular Universal should be much improved! Expect further improvements in subsequent releases. Bug Fixes autocomplete: not scrolling to active option when pressing home/end ( #3709 ) ( 8d0cd04 ) autocomplete: not updating the size while the panel is open ( #4346 ) ( bfeb515 ) autocomplete: panel not being shown with delay and OnPush change detection ( #3977 ) ( efd3485 ), closes #3955 autocomplete: reposition panel on scroll ( #3745 ) ( 81a6f8d ) autocomplete: unable to click to select items in IE ( #3188 ) ( 78985b7 ), closes #3351 button: ripple color for raised buttons ( #3829 ) ( 7f65f31 ), closes #2901 card: update color property to use theme's text color. ( #3952 ) ( 5e7af26 ) cdk: add camelCase selectors for cdk directives ( #4054 ) ( cb98270 ) checkbox: do not set indeterminate when set checked programmatically ( #4024 ) ( de8b97f ) checkbox: no side margin if label has no content ( #2121 ) ( 4e8d806 ), closes #2011 checkbox: set pointer cursor for checkbox ( #4473 ) ( b2f93b5 ), closes #4185 checkbox: support OnPush for disabled with forms module ( #4087 ) ( efb39da ) checkbox, radio: ripple error on focus event ( #3869 ) ( e22b55e ), closes #3856 chips: wrong margin on single chip ( #4366 ) ( 5d03c1a ), closes #4359 compatibility: error in theme check with angular universal ( #3872 ) ( a65d2f4 ), closes #3870 compatibility: throw better error when wrong prefix is used ( #3871 ) ( 2d50044 ) connected-overlay: better handling of dynamic content ( #4250 ) ( 525ce1e ), closes #4155 core: remove deprecated forRoot functions ( #3539 ) ( c94f471 ) core: export MdOptionSelectionChange ( #4285 ) ( af978cd ) dialog: capture previously focused element immediately ( #3875 ) ( 29968b8 ) dialog: close all dialogs on popstate/hashchange ( #2742 ) ( 85bc3a6 ), closes #2601 dialog: fire afterClosed callback after all dialog actions are done ( #3892 ) ( ee1a5a7 ) dialog: provide default value for MD_DIALOG_DATA token ( #4120 ) ( d1128fe ), closes #4086 dialog: restoring focus too early ( #4329 ) ( afaa2dc ), closes #4287 dialog: unable to press escape to close in lazy-loaded module ( #3788 ) ( 3796f69 ), closes #3737 focus-trap: import rxjs first operator ( #4400 ) ( 2c8faf6 ) grid-list: export MdGridTile. Fixes #2408 ( #4000 ) ( 9d719c5 ) input: add back pointer-events none removed in #3878 ( #4206 ) ( fb1fabc ) input: allow pointer events on placeholder ( #3878 ) ( 32b7426 ) input: incorrect height with autosize ( #4084 ) ( 21f8899 ), closes #4070 input: input placeholder not being hidden in IE under certain conditions ( #4478 ) ( fc73a4b ), closes #4464 input: make start and end hints interact well when their text needs to wrap ( #3979 ) ( 21cbf34 ) input: placeholder not rendering in Chrome under certain conditions ( #4405 ) ( 5e349d9 ) input: single-line hints overflowing the parent ( #4107 ) ( 0b9b582 ), closes #4051 input-container: new attribute hideRequiredMarker ( #4237 ) ( 6c31adb ), closes #3681 list: fix padding for list items ( #4486 ) ( d1d2e18 ) list: icon size in dense mode ( #3913 ) ( f412499 ), closes #3886 list: remove overflow hidden from content ( #4426 ) ( 078aa19 ) list: set explicit box-sizing on icon ( #3876 ) ( e263fb7 ), closes #3863 menu: incorrect panel max height ( #4214 ) ( d3210e7 ) menu: unable to bind to xPosition and yPosition ( #4213 ) ( 1fd50aa ), closes #4169 menu: wrong icon margin in rtl ( #4225 ) ( ba6b9bb ) overlay: no longer export internal type ( #4390 ) ( 136f7ff ) overlay: render the templates before placing them in the overlay. ( #2989 ) ( da33c03 ) progress-spinner: not working with server-side rendering ( #4020 ) ( aebbd8a ), closes #3988 ripple: explicit type for global ripple options ( #4240 ) ( 115e901 ) ripple: global ripple configuration on init ( #4238 ) ( 9a2c4d6 ), closes #4235 select: missing rxjs filter import ( #4407 ) ( 1ec88e0 ) select: prevent the panel from going outside the viewport horizontally ( #3864 ) ( e10bb18 ), closes #3504 #3831 select: reposition panel on scroll ( #3808 ) ( 5983a2b ) select: tab opening multiple select and space scrolling page ( #4210 ) ( 24a762f ) select: unable to hide via visibility ( #4264 ) ( f16affc ), closes #4247 select: wrong panel width if element is hidden initially ( #3647 ) ( eaf16c8 ), closes #3639 #3244 slide-toggle: invalid model change event ( #4140 ) ( 317952a ), closes #4124 slide-toggle: remove unused mousedown listener ( #4184 ) ( e82d0f1 ) slider: correct typo in MdSliderChange description ( #4216 ) ( #4217 ) ( 4bdceed ) slider,slide-toggle: use the grab cursor ( #3821 ) ( cc8f871 ), closes #3778 snack-bar: allow multi-line text ( #3626 ) ( eef57f6 ), closes #1951 snack-bar: leaking object references ( #4403 ) ( 4ca16d7 ), closes #2942 tabs: animation error with nested tab groups ( #4315 ) ( 1766649 ), closes #4277 tabs: apply dark theme to header font ( #4326 ) ( c37a2de ), closes #4320 tabs: re-align the ink bar when the viewport size changes ( #3877 ) ( 7942948 ), closes #3845 #3044 #2518 #1231 tabs: remove forRoot that was missed ( #4328 ) ( b4e8c7d ) tabs: unnecessary scrollbar if content has a margin ( #4062 ) ( 7336bdc ), closes #3162 #4035 textarea: fix change detection error on autosize ( #4180 ) ( bccf8d2 ) theming: fix broken sass expressions nested in theme classes ( #4145 ) ( 355f8b7 ), closes #4077 tooltip: wrong position when using OnPush change detection ( #3671 ) ( edf01c0 ), closes #3497 universal: gate several browser-specific bits on being on the browser ( #4251 ) ( f27df86 ) Features datepicker: add initial datepicker ( #4404 ) ( 123d7ec ) card: allow md-card-title and subtitle to be used as attributes ( #4122 ) ( a200024 ) core: allow users to disable the sanity checks ( #4178 ) ( 16bba72 ), closes #4125 dialog: add hasBackdrop and backdropClass options to dialog config ( #2822 ) ( 7428c49 ), closes #2806 list: option to disable ripples for all items ( #4159 ) ( 7f0f473 ), closes #4149 observe-content: add debounce option and other improvements ( #2404 ) ( 244aece ) overlay: add scroll handling strategies ( #4293 ) ( c8ec981 ) overlay: expose interface for custom positions ( #4374 ) ( ea8241a ) progress-spinner: add support for custom stroke-width ( #4113 ) ( b846a27 ), closes #3934 select: add ability to cycle through options with arrow keys when closed ( #3313 ) ( 66e65c4 ), closes #2990 select: allow setting the theme color ( #3928 ) ( 3a29d67 ), closes #3923 select: close the panel when pressing escape ( #3879 ) ( 94a2855 ) add initial sass typography API ( #4162 ) ( 7de316f ) remove hard dependency on @angular /http ( #3792 ) ( b011b45 ), closes #2616 sidenav: open all sidenavs from MdSidenavContainer ( #2870 ) ( 79306ad ), closes #2591 tabs: allow disabling ripples ( #4466 ) ( e4789c7 ) Performance Improvements dialog: switch dialog animations to translate3d ( #3905 ) ( 857c217 ) 2.0.0-beta.3 cesium-cephalopod (2017-04-07) Breaking changes Package structure The package structure for Angular Material has changed to match that of Angular itself. This has a few ramifications on applications consuming Angular Material: Deep imports will no longer work, e.g., @angular/material/core/a11y . All public symbols should be imported directly from @angular/material . Deep imports have always been an anti-pattern, but our previous package structure inadvertently allowed them. The imports for theming have changed. ** For prebuilt themes, you can now find the CSS files in the prebuilt-themes/ directory in the package root. For angular-cli projects, this will look something like @import '~@angular/material/prebuilt-themes/deeppurple-amber.css'; ** For custom themes, you can now import theming.scss directly from the package root. Again, with angular-cli, this will look something like: @import '~@angular/material/theming'; Removal of deprecated symbols The deprecated, Md -prefixed aliases for LiveAnnouncer , Platform , and UniqueSelectionDispacther have been removed. MaterialModule MaterialModule (and MaterialRootModule ) have been marked as deprecated. We've found that, with the current state of tree-shaking in the world, that using an aggregate NgModule like MaterialModule leads to tools not being able to eliminate code for components that aren't used. In order to ensure that users end up with the smallest code size possible, we're deprecating MaterialModule, to be removed in the a subsequent release. To replace MaterialModule , users can create their own \"Material\" module within their application (e.g., GmailMaterialModule ) that imports only the set of components actually used in the application. Angular 4 Angular Material now depends on Angular 4. Now that animations have been refactored into a separate package, users of @angular/material need to explicitly import BrowserAnimationsModule (or NoopAnimationsModule ) from @angular/platform-browser/animations as well as installing @angular/animations . Other changes The DomProjection service was removed. This was an experimental, undocumented service that we ultimately found did not provide a good approach to composing components. The config property was removed from MdDialogRef . If you were using this to access the data property, you can instead inject that value using the MD_DIALOG_DATA of the opened component. Bug Fixes autocomplete: \"undefined\" being displayed on empty control with ngModel ( #3535 ) ( 675c9df ), closes #3529 autocomplete: aria-expanded should be updated when panel hides ( #3494 ) ( 932b4a0 ) autocomplete: do not trigger submit on ENTER ( #3727 ) ( bedf5a1 ), closes #3159 autocomplete: fix down arrow use with ngIf ( #3493 ) ( a4e2de7 ) autocomplete: fix key manager instantiation ( #3274 ) ( c21ff40 ) autocomplete: not showing panel on first focus in certain cases ( #3775 ) ( 75996b5 ) autocomplete: prevent opening on load in IE ( #3190 ) ( a4da08b ), closes #3183 autocomplete: remove max width for autocomplete panel ( #3297 ) ( 738e9bf ), closes #3198 autocomplete: update overlay ref width on menu trigger ( #3573 ) ( 6915e8a ) button: add transition to focus overlay ( #2850 ) ( 6cdd8db ) button: persist theme color of button when leaving hover state ( #3629 ) ( 3ad6ff0 ) button: square ripple in compatibility mode ( #3167 ) ( ceb472b ), closes #3164 button: use FocusOriginMonitor for focus styles ( #3294 ) ( 5d6920d ) button-toggle: fix color for selected button toggle and selected disabled button toggle ( #3418 ) ( be167c9 ), closes #3382 button-toggle: only show focus style when focused via keyboard ( #3232 ) ( d744a5f ) card: removed header height ( #3450 ) ( 17bf5e5 ), closes #3288 card: unable to override elevation ( #3139 ) ( 4ee16a9 ), closes #3123 checkbox: add focus indication ( #3403 ) ( 01188d9 ), closes #3102 checkbox: create ripple on label mousedown ( #3206 ) ( 3edf105 ), closes #3030 checkbox: focus origin for focus method ( #3763 ) ( 7a60489 ) checkbox: show checkbox animation only if user click or indeterminate state ( #3137 ) ( f4323b2 ), closes #2783 checkbox: switch checkbox behaviors for click and change events ( #3146 ) ( 8aa9857 ) chips: Fix adding new chips on demo page ( #3426 ) ( 2d16a24 ) compatibility: remove ink bar from compatibility check ( #3267 ) ( c203589 ) connected-overlay: direction not being updated ( #3293 ) ( 817dcfd ), closes #3241 connected-position: error if none of the initial positions fit in viewport ( #3189 ) ( a306a8e ) core: log warning if doctype is missing ( #2849 ) ( 22b0660 ), closes #2351 demo: remove input route from demo app ( #2922 ) ( 6bac315 ) dialog: delay focus until animation is done ( #3774 ) ( d7d2b16 ), closes #3722 dialog: leaking component instance references ( #2875 ) ( e120e8d ), closes #2734 dialog: leaking MdDialogContainer references ( #2944 ) ( 8e6720b ), closes #2876 docs: only rewrite relative links ( #3339 ) ( cb57660 ), closes #3147 focus-trap: avoid closure compiler issues when adding anchors ( #3448 ) ( 8b2ae0d ) focus-trap: enabled property not being coerced ( #3417 ) ( d81445b ) focus-trap: exception when element contains SVG on IE ( #3432 ) ( d06ad75 ), closes #3410 input: baseline alignment on textarea ( #3714 ) ( 7cff349 ) input: change dividerColor to color ( #3726 ) ( 2ccf0ae ) input: don't add empty prefix suffix wrappers ( #3724 ) ( 6d6c12d ) input: don't animate label when value is set programmatically ( #3691 ) ( dc5c869 ) input: fix blank aria-describedBy ( #3713 ) ( cb85eeb ) input: fix chrome autofill style ( #3366 ) ( f40b1b2 ) input: label animation shifting sibling labels ( #3568 ) ( f8cdd92 ), closes #3541 input: make all icons in input containers the correct size ( #3489 ) ( 359c9bb ) input: make icons in prefix/suffix the right size ( #3342 ) ( 63d4359 ) input: make sure injected NgControl belongs to the input ( #3700 ) ( 220163e ) input: overflow-y scrollbar is displayed (IE) ( #3571 ) ( 7ffaf9e ), closes #3570 input: remove jitter that occurs on focus ( #3343 ) ( eba7641 ) interactivity-checker: cast node name to lowercase for isInputElement function ( #3281 ) ( 8f76f96 ) list: add font-family style to subheader ( #3056 ) ( 3464011 ) list-key-manager: exception when no initial active item ( #3431 ) ( 842896b ), closes #3317 menu: incorrect text alignment in IE/Edge ( #3268 ) ( 5ef3084 ), closes #3254 menu: not emitting close event when closing via the backdrop ( #3300 ) ( 0f28daf ), closes #3295 menu,tooltip: Ensure subscription exists before unsubscribing. ( #3078 ) ( 84b5c3b ) aot runtime issues ( #3807 ) ( f40296e ) change selectors for MdCardXlImage and MdCardAvatar ( #3134 ) ( 6e1f50b ) coverage issue with saucelabs ( #3540 ) ( 4d4a63e ) select: allow custom aria-label ( #3765 ) ( 038a337 ), closes #3762 deprecate MaterialModule ( #3840 ) ( 3f5894e ) overlay: ensure proper stacking order when attaching ( #3581 ) ( aa5925b ), closes #3574 package.json: Fix failing npm run api command ( #3462 ) ( bf2b615 ) portal-host: unable to clear and portal reference not being set ( #3302 ) ( 7fcb93b ) progress-spinner: not redrawing when changing modes ( #3672 ) ( 1ae81a4 ), closes #3648 pseudo-checkbox: alignment issue and border color ( #3144 ) ( 1f19ef0 ) radio: add focus indication ( #3402 ) ( c934753 ), closes #3102 ripple: different durations for ripple elements ( #3136 ) ( 5c7a96b ), closes #3109 ripple: fade-out-all should hide all ripples ( #3400 ) ( 5cc50d2 ) ripple: fix ripple color in dark theme ( #3094 ) ( a91ae72 ) ripple: rename selector for the ripple ( #3482 ) ( 58c5d17 ) scripts: change all paths in docs pushing script to relative paths ( #3091 ) ( 60aa9e9 ) scroll-dispatcher: unable to unsubscribe from global listener ( #3729 ) ( 68db6ba ) scrollable: check if scrollable exists before unregistering ( #3050 ) ( b358c6c ) select: animation jump in Chrome and blurry text in IE ( #3328 ) ( 09c6386 ), closes #3327 #1953 select: exception if selected value is accessed on init ( #3785 ) ( e82457c ), closes #3750 select: initial value not being displayed with FormControl and OnPush ( #3434 ) ( 819fa0b ) select: show focus indicator even with validation errors ( #3743 ) ( e964734 ), closes #3742 select: unable to set a tabindex ( #3479 ) ( 11dec36 ), closes #3474 select: wrong item order in label in rtl ( #3567 ) ( 52ea7a3 ) sidenav: throw error when sidenav has 2 sidenavs on the same side at the same time ( #3369 ) ( 324da5b ) sidenav: use vw instead of percentage for sidenav min width ( #3046 ) ( c638e20 ) slide-toggle: fix unavailable unmonitor call ( #3862 ) ( 904c71e ) slide-toggle: input not updated after drag ( #3067 ) ( 5cdeb75 ) slide-toggle: invalid change events with no new value ( #3555 ) ( 5346353 ), closes #3526 slide-toggle: occasional element jumping ( #3311 ) ( beb0edf ) slide-toggle: remove host element margin ( #3761 ) ( cd0b853 ) slide-toggle: ripple fade-in too slow ( #3170 ) ( 369931e ) slider: unable to reset tickInterval after it has been set ( #3488 ) ( b9b014a ), closes #3452 tab: use MD_RIPPLE_GLOBAL_OPTIONS in tab ( #3553 ) ( ee853b9 ) tab-nav: add constructor back for ripple ( #3537 ) ( f27617a ) tabs: change color for disabled tab label ( #3483 ) ( 290f710 ), closes #3481 tabs: missing mat class on tab group ( #3038 ) ( d97debe ) tabs: re-align ink bar on direction change ( #3622 ) ( 07793a4 ), closes #3615 tabs: remove body and header from compatibility ( #3168 ) ( b939cd8 ) tabs: remove flex; bring ink into same parent as links ( #3331 ) ( 00de2d7 ) tabs: set tab body content to 100% ( #3162 ) ( cbd1ff9 ), closes #3153 toolbar: incorrect height for soft-keyboards ( #3312 ) ( d1abc9e ), closes #3233 tooltip: avoid capturing the initial tap on mobile ( #2423 ) ( 85ba82a ), closes #2326 Features autocomplete: support static placeholders ( #3115 ) ( 8482bbf ) button-toggle: Add a focus overlay for button-toggle ( #3119 ) ( 0544deb ) checkbox: add value attribute to md-checkbox ( #2701 ) ( fb565c0 ), closes #2583 dialog: add enter/exit animations ( #2825 ) ( 5492225 ), closes #2665 dialog: allow for the dialog dimensions to be updated ( #2940 ) ( a71a5af ), closes #2930 FocusOriginMonitor: support monitoring subtree focus as well as element ( #3113 ) ( 3b39bd2 ) input: add directive for displaying error messages ( #3560 ) ( c29f8ca ) input: add invalid state styling ( #3114 ) ( bc9d25b ) list: add ripples to list items that are links ( #930 ) ( aa3360a ) overlay: allow theming overlay-based components ( #2967 ) ( cbd42f0 ), closes #2662 ripple: add option for persistent ripples ( #3315 ) ( e3ba1e1 ), closes #3169 ripple: add way to globally disable ripples ( #3383 ) ( 3ff383c ) ripple: expose ripple directive in template ( #3165 ) ( 6595ad8 ) ripple: support for global ripple options ( #3463 ) ( fb75a13 ) select: add floatingPlaceholder option ( #2571 ) ( bb2392f ), closes #2569 #2963 select: add multiple selection mode ( #2722 ) ( dcc8576 ), closes #2412 slide-toggle: add option to disable ripple ( #3195 ) ( f8fde13 ) upgrade to angular 4 ( #3608 ) ( cd55082 ), closes #3357 #3336 #3301 slide-toggle: add ripple focus indicator ( #3739 ) ( c4ec662 ) slide-toggle: use ripple service ( #3068 ) ( 8541f8e ), closes #2900 slider: add theme color support ( #3766 ) ( 28f1ec3 ) slider: differentiate sliders focused via keyboard vs other means ( #3487 ) ( bcb16c6 ) snack-bar: add dismiss method to MdSnackBar service ( #3069 ) ( 83b5842 ) theming: log a warning if core theme isn't loaded ( #3781 ) ( 4282917 ), closes #2828 tooltip: allow tooltip be disabled ( #3578 ) ( 4e38f69 ) Performance Improvements ripple: avoid triggering change detection ( #3066 ) ( 1a67107 ) scroll-dispatcher: avoid triggering change detection on scroll ( #3687 ) ( 5c2b449 ) scroll-dispatcher: lazily subscribe to global events ( #3270 ) ( c1004cb ), closes #3237 2.0.0-beta.2 flannel-papaya (2017-02-15) Breaking changes from beta.1 Styling is no longer prefixed by md- . All styling is now prefixed by mat- so that apps can upgrade from AngularJS Material to Angular Material without styling conflicts between the two library components. See ( #2790 ) for the details on the code change and some useful regular expressions that can help migrate styles. Checkbox tab index @Input has been changed from tabindex to tabIndex . ( #2953 ) Ripple no longer has the mdRippleBackgroundColor input to change the background color. ( #2859 ) The deprecated use of md-input and md-textarea has been removed. Use mdInput on an input or textarea within a md-input-container . md-prefix and md-suffix are now mdPrefix and mdSuffix . ( #2788 ) html md-input-container input mdInput name=\"value\" ngModel /md-input-container The deprecated use of md-sidenav-layout has been removed. Use md-sidenav-container instead. ( #2283 ) Input floating placeholder @Input has changed from a boolean ( true and false ) to a state ( always , never , and auto ) and was renamed from floatingPlaceholder to floatPlaceholder . For details on when to use which state, see ( #2585 ) The use of Module forRoot has been deprecated and will be removed in the next release. Instead, just simply import MaterialModule directly: ts @NgModule({ imports: [ ... MaterialModule, ... ] ... }); Bug Fixes autocomplete: add mat version of autocomplete @Input ( #2928 ) ( e5521a8 ) autocomplete: allow basic use without forms directives ( #2958 ) ( 4ee2980 ) autocomplete: close panel when options list is empty ( #2834 ) ( 8a3b6fd ) autocomplete: double-clicking input shouldnt close the panel ( #2835 ) ( 18969f4 ) autocomplete: hide instead of close when options empty ( #2997 ) ( a022035 ) autocomplete: placeholder should float while panel is open ( #2730 ) ( eec4dc6 ) autocomplete: scroll options below fold into view ( #2728 ) ( 6c84603 ) autocomplete: support rtl ( #2648 ) ( 4f59ad0 ) autocomplete: up arrow should set last item active ( #2776 ) ( fd5e4d9 ) autosize: export md-autosize directive ( #2432 ) ( f2d73da ), closes #2419 button: add default color for mat-raised-button ( #3052 ) ( 6fe1d9a ) button: only flat button and icon buttons should inherit the color ( #2561 ) ( ac363df ), closes #2539 button: raised buttons in dark theme ( #3070 ) ( 87ab712 ) button: reuse _getHostElement() to avoid redundant elementRef.nativeElement calls ( #2625 ) ( c7d1c17 ) button-toggle: add the setDisabledState from ControlValueAccessor ( #2430 ) ( fb750b4 ) button-toggle: conflict with radio component ( #2343 ) ( 9e99374 ), closes #2274 button-toggle: make conform with design specs ( #2570 ) ( fed5d7b ) card: fix padding for md-card-actions in xs screens ( #2567 ) ( ad0df31 ) checkbox: Emit event when checkbox's indeterminate value changes ( #2130 ) ( f11c5eb ) checkbox: rename tabindex to tabIndex ( #2953 ) ( b91964a ) checkbox: ripple color does not change ( #2857 ) ( 7ac29f8 ) checkbox, radio: not using theme border color ( #2744 ) ( 07ec765 ) compatibility: add missing mat- selectors ( #2923 ) ( f29f7ab ) connected-position-strategy: wrong logic when determining whether element is on screen ( #2677 ) ( e055d05 ), closes #2102 #2658 dialog: escape key not working once element loses focus ( #3082 ) ( a08dc55 ), closes #3009 dialog: prevent error when restoring focus on IE ( #2771 ) ( 153fcd3 ), closes #2760 dialog: prevent the close button from submitting forms ( #2659 ) ( 29f939a ), closes #2599 dialog: use injector from viewContainerRef if provided ( #2655 ) ( be0da09 ) docs: properly create links in guide files ( #2770 ) ( 60f03ed ) icon: add caching of md-icon aria-label ( #2649 ) ( 08e9d70 ), closes #2642 input: add more padding so that the hint doesn't overflow the container ( #2246 ) ( d7831d9 ) input: camel-case md-prefix and md-suffix ( #2639 ) ( 7562322 ), closes #2636 input: disable underline with reactive forms ( #2565 ) ( f9dd34f ), closes #2558 input: disabled inputs should be grayed out ( #2513 ) ( ed3ffe0 ) input: ensure that property bindings work ( #2431 ) ( b4b4224 ), closes #2428 input: fix chrome 56 warning ( #2906 ) ( 62189a3 ) input: fix placeholder for number input with bad input. ( #2362 ) ( 52aa715 ) input: hints not being read out by screen readers ( #2856 ) ( f899b5f ), closes #2798 input: horizontal overflow in IE and Edge ( #2784 ) ( e0fe635 ) input: properly determine input value ( #2455 ) ( 3a11927 ), closes #2441 #2363 input: remove md-input and md-textarea in favor of md-input-container ( #2788 ) ( 7b30fdc ) input: vendor-prefix ::placeholder ( #2547 ) ( 3b16648 ) input-container: prefix and suffix stretching together with parent ( #2496 ) ( 64f6d1b ), closes #2493 #1881 #1421 input-container: reduce redundancy when forwarding the NgControl classes ( #2442 ) ( 8c0eef2 ) option: revert duplicate prop ( #3051 ) ( 516720f ) overlay: disable pointer events if overlay is detached ( #2747 ) ( 453fa7f ), closes #2739 overlay: fix pointer events for ie11 ( #3023 ) ( 597e3de ), closes #3022 progress-bar: buffer animation not working in IE ( #2941 ) ( ab8f98f ), closes #2881 progress-bar: unable to apply visibility in indeterminate mode and reduce CSS ( #2417 ) ( eb96b0c ), closes #2413 progress-spinner: fix color input on md-spinner ( #2396 ) ( 6cb6576 ), closes #2393 radio: change radio button trigger element to input element ( #2838 ) ( 2f10a95 ) ripple: camel-cased CSS classes ( #2340 ) ( c67f4e5 ) ripple: make ripples conform with specs ( #2859 ) ( 6381948 ) select: avoid going into infinite loop under certain conditions ( #2955 ) ( 998a583 ), closes #2950 select: don't open menu if there are no options ( #2924 ) ( cc77ef4 ) select: fix select panel animation ( #2699 ) ( 15eb33a ), closes #2695 select: fix selection color ( #2697 ) ( 4e94da4 ), closes #2696 select: selected option not being highlighted when options are added asynchronously ( #2499 ) ( 7fc38b9 ), closes #2497 select: set default font size ( #2976 ) ( 40bc486 ) select: set select value to trigger height and center text ( #3021 ) ( ac9c090 ) select: support use inside a custom value accessor ( #2704 ) ( 651440f ), closes #2609 select: transparent background when overscrolling ( #2117 ) ( d9b2d85 ) select: trim long labels inside md-option ( #2444 ) ( 416f56f ), closes #2440 select: view not updating when using OnPush detection strategy ( #2894 ) ( 3bcb7c3 ), closes #2663 #2269 select: parent align affects placeholder ( #2572 ) ( a1c90b3 ) sidenav: animate content resizing for side mode. ( #2486 ) ( 4d33449 ) sidenav: fix animation issue for initially open sidenav ( #3045 ) ( 37e4bad ) slide-toggle: consistent naming of aria attributes ( #2688 ) ( 10bd6da ) slider: fire change event on value change via keyboard. ( #2807 ) ( 7f50d11 ) slider: hide ticks when slider is disabled ( #2687 ) ( e9ec8ab ) apply font-family to text components ( #2821 ) ( d11673a ) slider: make disabled state look like mocks ( #2604 ) ( 8263ffb ) slider: make min value style match mocks ( #2641 ) ( 737b608 ) slider: round decimals in the thumb label ( #2527 ) ( 987897c ), closes #2511 snack-bar: improper button styling and improved handling of long text ( #2991 ) ( 93937e6 ), closes #2979 snack-bar: prevent error when opening multiple snack bars in fast succession ( #2392 ) ( 161f319 ), closes #2390 snack-bar: SimpleSnackBar not being exported ( #3016 ) ( a7a3967 ), closes #3010 tabs: crashing on chrome under certain conditions ( #2411 ) ( 727ce53 ), closes #2151 tabs: fix ink not showing on chrome 57 ( #3041 ) ( f24832c ) tabs: infinite loop when selectedIndex is set to NaN ( #2389 ) ( f4cfc2d ) toolbar: add toolbar role to host element ( #2914 ) ( 67032ca ), closes #2909 toolbar: correct font-weight ( #2485 ) ( 1b44880 ) toolbar: prevent content overflow and line-wrapping ( #2454 ) ( e728771 ), closes #2451 tooltip: better handling of multi-line text ( #2472 ) ( 7863e38 ), closes #2205 tooltip: not working properly with ChangeDetectionStrategy.OnPush ( #2721 ) ( 632b964 ), closes #2713 tooltip: provide a maximum width ( #2678 ) ( fb5e1d4 ), closes #2671 Features autocomplete: add autocomplete panel toggling ( #2452 ) ( d4ab3d3 ) autocomplete: add fallback positions ( #2726 ) ( 8fc7706 ) autocomplete: add keyboard events to autocomplete ( #2723 ) ( fcea9d4 ) autocomplete: add screenreader support ( #2729 ) ( bd7f240 ) autocomplete: add value support ( #2516 ) ( 5def001 ) autocomplete: allow use of obj values ( #2792 ) ( 55e1847 ) button-toggle: Show selected option when md-button-toggle is disabled ( #3012 ) ( 1547440 ), closes #3007 compatibility: remove conflicts with material1 css styling ( #2790 ) ( 210ff02 ) dialog: add a config option for passing in data ( #2266 ) ( 29cbe61 ), closes #2181 dialog: add events (observables) for open closeAll ( #2522 ) ( 23ab152 ) dialog: add the ability to align the content of md-dialog-actions ( #2557 ) ( e18ab5d ), closes #2483 dialog: support open with TemplateRef ( #2910 ) ( bf0f625 ) focus-classes: expose focus origin changes through observable ( #2974 ) ( d4ba648 ) FocusOriginMonitor: add support for touch events ( #3020 ) ( ec7e2e4 ) input: option to imperatively float placeholder ( #2585 ) ( fb0cf8a ), closes #2466 list-key-manager: active descendant support ( #2606 ) ( e2ad3a0 ) menu: Added ability to show the menu overlay around the menu trigger ( #1771 ) ( 592f33f ) overlay: add fullscreen-enabled overlay class ( #1949 ) ( 0640302 ) screenshot: Add screenshot function to e2e test (button and checkbox) ( #2532 ) ( 8ba8deb ) scripts: push generated docs to material assets repo ( #2720 ) ( ba12f44 ) select: emit change event ( #2458 ) ( e5bd15c ), closes #2248 sidenav: add disableClose option ( #2501 ) ( 52ade97 ), closes #2462 slide-toggle: add support for labelPosition ( #2836 ) ( 68a0c90 ), closes #2820 slider: emit input event when slider thumb moves ( #2325 ) ( 99963c4 ), closes #2296 snack-bar: allow addition of extra css classes ( #2804 ) ( e783494 ), closes #2664 style: add directive to determine how elements were focused. ( #2646 ) ( 8a6d902 ) tabs: add the ability to invert the header ( #2391 ) ( a494c92 ), closes #2387 theming: provide a content wrapper attribute ( #2170 ) ( 4bf4b87 ), closes #1938 #2106 tooltip: reposition on scroll ( #2703 ) ( bc52298 ) viewport-ruler: cache document client rect ( #2538 ) ( d0c8f18 ) add a common class to be used when dealing with selection logic ( #2562 ) ( c295fa9 ) add simplified checkbox component for usage in other components ( #2619 ) ( 3b6cab0 ) remove the need for forRoot on material NgModules ( #2556 ) ( b49bfce ) Performance Improvements tabs: reduce amount of reflows when aligning the ink bar ( #2372 ) ( dab742f ) 2.0.0-beta.1 rebar-teacup (2016-12-23) Bug Fixes Remove MdAutocompleteModule that was accidentally included in beta.0 Correct path to umd bundle in package.json ( #2368 ) ( d286e6d ), closes #2366 2.0.0-beta.0 velvet-pizza (2016-12-22) Breaking changes from alpha.11 The svgSrc propert of md-icon has been removed. All SVG URLs must now be explicitly marked as trusted using Angular's DomSanitizer service. The md-input element is deprecated in favor of md-input-container . This new component allows for direct access to the native input element. All @Input properties have been changed to use their camelCase names for binding. The old names are still available as deprecated but will be removed in the next release. All @Directive selectors are now camelCase to be consistent with Angular core. For example, [md-tooltip] is now [mdTooltip] The old selectors are still available as deprecated but will be removed in the next release. md-progress-circle has been renamed to md-progress-spinner . The old selector and symbols are still available as deprecated but will be removed in the next release. md-sidenav-layout has been renamed to md-sidenav-container . The old selector is still available as deprecated but will be removed in the next release. Several components in core/ , such as Overlay, have had their prefix changed to cdk- (short for \"component dev kit\"). This signifies that these are general-purpose tools for building components that are not coupled to Material Design.The old selectors are still available as deprecated but will be removed in the next release. The CSS classes have been changed. The align property for md-checkbox and md-radio-button has been changed to labelPosition with values before and after . MdTooltip properties are now prefixed, e.g., mdTooltipPosition , mdTooltipHideDelay , etc. Note on HammerJS HammerJS is now optional. It is still necessary for gestures to work within certain components, but should no longer throw an error if it is missing. Bug Fixes a11y: add all providers to forRoot ( #2222 ) ( 9272b4b ), closes #2189 add re-exports for symbols needed by Aot ( #2149 ) ( c324142 ) icon: remove svgSrc, only allow trusted urls ( #1933 ) ( 4571561 ) input: copy input state classes to md-input-container ( #2191 ) ( f0c4148 ) input: fix underline color to match spec ( #2167 ) ( b850fed ), closes #2126 input: label alignment in rtl ( #2047 ) ( 7b3a059 ), closes #2034 input: treat number 0 as non-empty ( #2245 ) ( a818579 ) input: unable to focus input in IE 11 ( #2233 ) ( 8ec3a19 ) overlay: proper backdrop stacking with multiple overlays ( #2276 ) ( b16031a ), closes #2272 platform: Remove assumption of `window' in MdPlatform ( #2221 ) ( e436775 ) positioning: fallback positions should work while scrolled ( #2193 ) ( 8df30db ) progress-circle, progress-bar: bind color via [color] rather than [attr.color] ( #2299 ) ( e4d2bef ) progress-spinner: Rename ProgressCircle to ProgressSpinner ( #2300 ) ( 221c234 ) select: clear select if no option matches value ( #2110 ) ( 2855cc3 ), closes #2109 select: make invalid selector more specific ( #2166 ) ( a7c88c5 ) sidenav: make focus-trap occupy full height of sidenav ( #2145 ) ( 13223df ) sidenav: Rename md-sidenav-layout to md-sidenav-container. ( #2183 ) ( 8f1c5a9 ) slider: prevent thumb from getting stuck on Mobile Safari ( #2142 ) ( 4adee46 ) snack-bar: clean up element when associated viewContainer is destroyed ( #2219 ) ( db9608f ), closes #2190 tabs: observing tab header label changes to recalculate width ( #2186 ) ( 7ab4430 ), closes #2155 TSError: ? Unable to compile TypeScript when running 'gulp:build' ( #2132 ) ( 714c2a4 ) tests: snackbar ref has unnecessary observable.of ( #2298 ) ( d076bd3 ) tooltip: add missing rxjs import ( #2288 ) ( ba7053f ) Features make hammerjs optional ( #2280 ) ( 28691ca ) chips: initial version of md-chip-list. ( #2242 ) ( f45c315 ) ( #2046 ) ( ba85883 ) ( #2332 ) ( 3f2db27 ) dialog: add dialog content elements ( #2090 ) ( cac72aa ), closes #1624 #2042 checkbox, radio: change align to labelPosition (inverted) ( #2289 ) ( a1f9028 ) connected-position: apply the fallback position that shows the largest area of the element ( #2102 ) ( 4f5b9c5 ), closes #2049 core: add scrollable view properties to connected pos strategy ( #2259 ) ( b60d33f ) input: create md-input-container to eventually replace md-input ( #2052 ) ( ca2046b ) scroll: provide directive and service to listen to scrolling ( #2188 ) ( 9b68e68 ) sidenav: close via escape key and restore focus to trigger element ( #1990 ) ( a1331ec ) tooltip: add input for delaying show and hide ( #2101 ) ( e85d108 ) toolbar add responsive heights as per spec ( #2157 ) ( 78d54fc ) Performance Improvements sidenav: avoid extra repaints while scrolling ( #2156 ) ( b967712 ) 2.0.0-alpha.11 polyester-golem (2016-12-08) NOTE: Be sure to delete your previous install of @angular/material and install it fresh, as npm sometimes doesn't see that there is a more recent alpha release. Bug Fixes a11y: improved accessibility in high contrast mode ( #1941 ) ( 5cf7d17 ), closes #421 #1769 button: ensure icons are aligned vertically. ( #1736 ) ( d3a50b3 ), closes #1093 button: improved tap responsiveness on mobile ( #1792 ) ( 4183fbc ), closes #1316 button: remove disabled attribute when disabled value is false for MdAnchor ( #1789 ) ( 716372b ) checkbox: fix native checked not being checked when MdCheckbox initial checked value is true ( #2055 ) ( 3fd3117 ) checkbox, input, radio, slide-toggle: implement setDisabledState from ControlValueAccessor ( #1750 ) ( 77a960c ), closes #1171 dialog: add border radius ( #1872 ) ( 6aa7e22 ), closes #1868 dialog: avoid subpixel rendering issues and refactor GlobalPositionStrategy ( #1962 ) ( 1ea6d34 ), closes #932 dialog: backdrop not being removed if it doesn't have transitions ( #1716 ) ( accab20 ), closes #1607 elevation: change elevations to match spec ( #1857 ) ( c2597b6 ) interactivity-checker: improve robustness of isTabbable ( #1950 ) ( 4b7e52d ) list: prevent list item wrapper elements from collapsing ( #2075 ) ( 27f9c99 ), closes #2012 list-key-manager: prevent the default keyboard actions ( #2009 ) ( a8355e4 ) menu: reposition menu if it would open off screen ( #1761 ) ( 7572e34 ) overlay: prevent blurry connected overlays ( #1784 ) ( 303dd69 ) overlay-directives: update offsets if they change after overlay creation ( #1981 ) ( b36db15 ) radio: fix radio group behavior on change ( #1735 ) ( bbc5f6a ) ripple: Always remove ripple after a certain period ( #1915 ) ( 62cc830 ) ripple: don't create background div until ripple becomes enabled ( #1849 ) ( d7a54ef ) ripple: Fix the ripple position when page is scrolled ( #1907 ) ( dd508ea ) sidenav: resolve promise as false rather than ( #1930 ) ( 7816752 ) slider: emit change event after updating value accessor ( #1901 ) ( 8caf9a6 ) slider: support for RTL and invert ( #1794 ) ( 5ac29dd ) spinner: animation not being cleaned up when used with AoT ( #1838 ) ( 83de14f ), closes #1283 tab-link: avoid potential memory leak ( #1877 ) ( e332f15 ) tabs: tabs should update when tabs are added or removed ( #2014 ) ( dfc580d ) tooltip: check tooltip disposed on animation hidden ( #1816 ) ( 9c0d82a ) tooltip: don't show tooltip if message is empty or not present ( #2081 ) ( 2701aae ), closes #2078 tooltip: throw a better error when an invalid position is passed ( #1986 ) ( 539e44e ) Features select initial version of md-select (too many commits to list) textarea: add md-autosize directive (this will be more useful once the md-input refactoring is complete) ( #1846 ) ( 9ec17c0 ) tabs: paginate tab header when exceeds width ( #2084 ) ( 92e26d7 ) tabs: add ripples to the tab group and nav bar links ( #1700 ) ( b9fe75a ) tabs: animate tab change, include optional dynamic height ( #1788 ) ( f6944e4 ) tabs: md-stretch-tabs ( #1909 ) ( 78464a2 ), closes #1353 button-toggle: add option for vertical toggle groups ( #1936 ) ( cb0d6fc ), closes #1892 dialog: add configurable width, height and position ( #1848 ) ( bc6cf6e ), closes #1698 dialog: add the ability to close all dialogs ( #1965 ) ( b2999c9 ) focus-trap: add the ability to specify a focus target ( #1752 ) ( 72ac7a0 ), closes #1468 icon: added color attribute to md-icon for icon theming ( #1896 ) ( da5febc ) overlay: emit position change event ( #1832 ) ( b79c953 ) overlay: support min width and min height ( #2063 ) ( a695574 ) overlay-directives: attach and detach events ( #1972 ) ( a5eab75 ) overlay-directives: support fallback positions ( #1865 ) ( aa472a0 ) sidenav: emit event when backdrop is clicked ( #1638 ) ( 93807ed ), closes #1427 sidenav: focus capturing ( #1695 ) ( b9c3304 ) slider: keyboard support ( #1759 ) ( 13b7dd0 ) slider: vertical mode ( #1878 ) ( deb940f ) snackbar: add onAction to snackbar ref ( #1826 ) ( a40cae9 ) snackbar: add timeout for snackbar ( #1856 ) ( 6ce6396 ) tooltip: show tooltip on longpress; remove delay on mouseleave ( #1819 ) ( 1552d70 ) a11y: add wrap mode to key manager ( #1796 ) ( 3d4abac ) 2.0.0-alpha.10 mithril-hoverboard (2016-11-10) Breaking Changes MdSnackbarConfig no longer takes a ViewContainerRef as a contructor argument because the ViewContainerRef is now optional. Tabs no longer use an md-tab-content directive. Instead, the non-label content of the tab is used as its content. Labels can also be specified via attribute, so the tabs can now be given as: html md-tab-group md-tab label=\"Overview\" This is the overview tab /md-tab md-tab label=\"Details\" This is the details tab /md-tab /md-tab-group You can still use md-tab-label to provide a label template. Features tab-nav-bar: new component! Provides a tab-bar for use with a router-outlet ( #1589 ) ( 572b36e ) a11y: manager for list keyboard events ( #1599 ) ( 95b2a34 ) checkbox: add color attribute. ( #1463 ) ( 333b11e ) checkbox: add ripple ( #1611 ) ( ef4c3c9 ) dialog: add disableClose option ( #1678 ) ( 93f8e04 ), closes #1419 dialog: allow for an object literal to be passed on init ( #1679 ) ( f525db1 ) dialog: don't require a ViewContainerRef ( #1704 ) ( f59030e ) menu: add animations ( #1685 ) ( 7fcf511 ) menu: allow menu-trigger to take a menu interface. ( #1564 ) ( 96d196a ), closes #1560 menu: support icons ( #1702 ) ( 982cdaa ) overlay: add custom classes for backdrop ( #1532 ) ( 0b54668 ) overlay: set overlay size ( #1583 ) ( ffbc295 ) overlay: support all overlay config properties ( #1591 ) ( 6f322cf ) overlay: support custom offsets ( #1660 ) ( 1738d24 ) overlay: support rtl in overlays ( #1593 ) ( b56f520 ) radio: add ripple ( #1553 ) ( d83b3e0 ) slider: fire change event ( #1618 ) ( 780a654 ) slider: implement ControlValueAccessor setDisabledState ( #1603 ) ( 437ec8e ) snack bar: add enter and exit animations. ( #1320 ) ( 6df29dc ) snackbar: don't require a ViewContainerRef ( #1783 ) ( 9115538 ) tabs: simplify api ( #1645 ) ( ea6c817 ) textarea: initial md-textarea. Does not yet support auto-size. ( #1562 ) ( aff22e5 ) tooltip: add tooltip animations ( #1644 ) ( 52582f4 ) Bug Fixes aot: export dialog/snackbar containers through index ( #1378 ) ( bb61928 ) aot: fix aot error w/ live announcer ( #1355 ) ( 276d07d ) button: Changed button corner radius from 3px to 2px ( #1441 ) ( ec48b34 ) button: set vertical alignment for md-button and md-raised-button ( #1565 ) ( f10ac7c ) button-toggle: add exportAs ( #1528 ) ( d2c288d ) button-toggle: disable user-select in button-toggle ( #1720 ) ( 83f6efc ) checkbox: disable for all non-false values ( #1631 ) ( 80491a9 ) checkbox: prevent checkbox being squished ( #1713 ) ( 6601949 ) checkbox: vertically align for when there's no text ( #1721 ) ( 7fd0fcd ) gestures: don't clobber native drag events ( #1458 ) ( b09465c ) ( #1744 ) ( 4af3cd3 ), closes #1025 input: correctly position md-hint in IE11 when position start ( #1674 ) ( ecefb89 ) input: remove invalid aria-target attribute ( #1513 ) ( 601c036 ), closes #929 input: set line-height to normal ( #1734 ) ( f1f660e ) list: ensure multi-line lists expand to fill space ( #1466 ) ( e7b872a ) list: prevent default black border from applying ( #1548 ) ( 4086b32 ), closes #1336 list: set flex-shrink for avatar ( #1464 ) ( 5a528aa ), closes #1403 menu: improve a11y for screenreaders ( #1715 ) ( 267e323 ) menu: make menu open idempotent ( #1478 ) ( a5b3296 ) menu: properly handle spacebar events ( #1533 ) ( cfe3e98 ), closes #1175 menu: update menu to use overlay rtl ( #1687 ) ( 2b913de ) menu: update to use overlay backdrop ( #1534 ) ( add0d23 ) overlay: ensure container covers entire screen ( #1634 ) ( af39236 ) overlay: fix connected position calculation while scrolled ( #1732 ) ( 2de461e ) overlay: not taking up entire viewport if body is scrollable ( #1661 ) ( 16cbbab ), closes #1633 overlay: raise z-index for overlay-container ( #1614 ) ( 8f50c35 ) portal: cleanup PortalHost on directive destroy ( #1703 ) ( 7e08468 ) progress-bar: bar being thrown off by parent's text-align ( #1717 ) ( 309d54c ), closes #1165 progress-circle: allow value to be set to 0 ( #1536 ) ( 25c7fd5 ) progress-spinner: animation expanding parent element ( #1742 ) ( 4203d09 ), closes #1259 radio: only call change callback with user input ( #1521 ) ( 920c875 ) radio: only emit change event on user interaction ( #1680 ) ( 0d552f5 ) radio: only fire group change if there is a group ( #1622 ) ( 065469a ) radio: Uncheck radio group if uncheck radio button programmatically ( #1561 ) ( c108607 ), closes #609 ripple: disable pointer events on ripple ( #1623 ) ( f91ea21 ) ( #1684 ) ( 7336b90 ) ripple: prevent color flicker on radio/checkbox ( #1705 ) ( 8ce65ca ) sidenav: resolve the promise when sidenav is initialized opened. ( #1666 ) ( a0d85d8 ), closes #1382 slide-toggle: disabled theme not working and dragging works if disabled ( #1268 ) ( 8908366 ) slide-toggle: emit change event after drag end ( #1405 ) ( 0b5b6f2 ) slide-toggle: remove view encapsulation ( #1446 ) ( cbecbce ), closes #1343 slide-toggle: thumb spacing at end for rtl ( #1659 ) ( ad3100e ) slide-toggle: update colors to match spec ( #1612 ) ( 596d994 ) slider: clamp thumb between min and max ( #1617 ) ( 783dbb3 ), closes #1557 slider: correctly detect when sidenav align changes. ( #1758 ) ( 5ffdea6 ) slider: update thumb pos ticks when min/max change ( #1598 ) ( ff84842 ) slider: update thumb position when value changes. Closes #1386 ( #1610 ) ( 8e7f80d ) slider: use percent values for the track ( #1663 ) ( 8815846 ), closes #1389 #1304 #1234 snackbar: add explicit box-sizing ( #1413 ) ( 580da74 ), closes #1412 snackbar: always clear ref when dismissing ( #1773 ) ( 3c5b632 ) snackbar: remove even if still animating open ( #1797 ) ( 523a48e ) snackbar: snackbars sometimes don't get removed ( #1795 ) ( fcd29c8 ) tabs: make @Output not private ( #1636 ) ( 04e2201 ) tabs: set correct min-width on mobile devices ( #1351 ) ( e270e50 ), closes #1350 tooltip: remove tooltip component after its parent destroyed ( #1470 ) ( 92ac392 ), closes #1111 correct EventEmitter generic type across lib ( #1620 ) ( 0174fa9 ) disable ripples when parent component is disabled ( #1778 ) ( 6b9e11c ) Performance Improvements progress-circle: improved rendering performance ( #1635 ) ( 0883fb2 ) 2.0.0-alpha.9 cobalt-kraken (2016-09-26) Breaking Changes Angular Material has changed from @angular2-material/... packages to a single package under @angular/material . Along with this change, there is a new NgModule, MaterialModule , that contains all of the components. Build tools such as rollup.js can perform tree-shaking to eliminate the code for components that you aren't using. The addition of theming as also changed the directory structure for bringing the core css into your application. See the new theming guide for more information. Features theming: add initial version for theming ( #1239 ) ( e0726e1 ) dialog: initial version of dialog ( #1041 ) ( 7ecda22 , #1321 ) ( 74dc5b2 , #1330 ) ( 23143b9 ) snack-bar: initial version of MdSnackBar. ( #1296 ) ( a732e88 ) packaging: move packaging to a single \" @angular /material\" ( #1286 ) ( b5c8c63 ) a11y: add basic focus-trap directive ( #1311 ) ( 3e8b9d9 ) a11y: initial interactivity checker ( #1288 ) ( 8a4b69d ) card: add md-card-footer ( #1178 ) ( 1c2a3f1 ) Bug Fixes aot: change @Inputs to not be private ( #1289 ) ( b284dd4 ) checkbox, slide-toggle: forward required attribute to input. ( #1137 ) ( 0e9383a ), closes #1133 gestures: add hammer types by default ( #1309 ) ( 1a824d2 ) grid-list: darken grid footer ( #1310 ) ( f9116f3 ) grid-list: hide overflow on tiles ( #1299 ) ( 06a6076 ) input: input should not be treated as empty if it is a date field. ( #846 ) ( fe2b493 ), closes #845 #845 #845 sidenav: align text at start ( #1297 ) ( 0e0ff0e ) sidenav: fix dark theme ( #1319 ) ( 332a4a2 ) sidenav: fix Promise type to match ( #1188 ) ( 3d5ceab ) theming: set input default color to currentColor in input theme ( #1260 ) ( #1262 ) ( fa78f72 ) 2.0.0-alpha.8 ectoplasm-helicopter (2016-09-01) Breaking Changes all: we've updated our packaging to match angular/angular's packaging. If you're using SystemJS in your project, you will probably want to switch to using our UMD bundles. Example config: '@angular2-material/core': { format: 'cjs', main: 'core.umd.js' } You can see a more detailed example in our demo app's system config . In addition to this, each component now has an index.js file, so you should now have imports like import {MdButtonModule} from '@angular2-material/button' Instead of import {MdButtonModule} from '@angular2-material/button/button' all: material modules must be included with forRoot() when bootstrapping. See the ngModules guide for more information. @NgModule({ imports: [ MdCoreModule.forRoot(), MdRadioModule.forRoot(), MdIconModule.forRoot() ] ... }); all: material now depends on TypeScript 2.0 input: md-input attributes now match the casing of native attributes. Previously they were camel-cased; now they are all lowercase. Example: autoComplete is now autocomplete . See #1066 for a full list. overlay: overlays are now synchronous. This means actions like creating an overlay no longer return a promise. Bug Fixes button: hover styles no longer applied to disabled buttons ( #909 ) ( 21e419d ), closes #866 button: stop using Type from @angular ( #991 ) ( 97d3ed3 ) button-toggle: toggle group should not emit an initial change event. ( #1144 ) ( e5830d1 ) card: remove unnecessary intermediate div ( #1068 ) ( b5e1e33 ) checkbox: export TransitionCheckState enum ( #1147 ) ( cda90f3 ) input: make attributes match native ones ( #1066 ) ( f3a7b91 ), closes #1065 ngc: _onDragStart/End are called with one param ( #1113 ) ( 6e5d260 ), closes #1112 ngc: don't emit HTMLElement in JS files ( #1061 ) ( 32eacd2 ) rc6: add directives for custom elements that are part of the APIs. ( #1121 ) ( 2c0dfcb ) sidenav: turn off view encapsulation and refactor css ( #1114 ) ( 97fe211 ) tabs: change missed md-active to md-tab-active ( #1044 ) ( 87b6193 ) Features menu: add keyboard events and improve accessibility ( #1132 ) ( 3669f06 ) modules: add forRoot() to material modules with providers ( #1122 ) ( 9ff6196 ) modules: add forRoot() to all modules ( #1166 ) ( 21dc44a ) overlay: make overlays synchronous ( #1079 ) ( cdad90b ) slider: add thumb-label ( #976 ) ( 22d70ae ) slider: support ngModel ( #1029 ) ( 8828358 ) tabs: support for disabled tabs ( #934 ) ( 9d51deb ), closes #880 2.0.0-alpha.7 wax-umpire (2016-08-09) Bug Fixes checkbox: wrong cursor when disabled ( #908 ) ( 5251c27 ), closes #907 checkbox, slide-toggle: only emit change event if native input emitted one. ( #820 ) ( d52e6e0 ), closes #575 gestures: custom recognizers should not inherit twice. ( #902 ) ( c68efbd ) gestures: ensure drag and pan are recognized with slide ( #901 ) ( 3179fec ) input: ensure all of label displays on safari ( #871 ) ( c8303b4 ), closes #795 overlay: lazily create container ( #894 ) ( 1efbbb9 ) progress-circle: correct elapsed time calculation ( #927 ) ( 0b17cd3 ), closes #926 progress-circle: remove performance.now to support non browser envs ( #857 ) ( 14c1765 ) progress-circle: remove references to window ( #838 ) ( 66ddd3a ), closes #837 radio: only emit change event if native input does. ( #911 ) ( 23a61ab ), closes #791 slide-toggle: fix runtime exception for incorrect mousedown binding. ( #828 ) ( bbbc87f ), closes #828 fix type mismatches when offline compiling. ( #835 ) ( 4bb7790 ) Features Add NgModules ( #950 ) ( ca351b2 ) Note that NgModules are now the supported way of including the Material components in your app. The MD_XXX_DIRECTIVES constants are now deprecated and will be removed in alpha.8. tooltip: initial tooltip implementation ( #799 ) ( f5e2a81 ) md-slider: initial version for md-slider ( #779 ) ( 8354750 ) md-menu initial version for md-menu (more features coming in alpha.8) ( #893 ) ( 16eb6be ) ( #855 ) ( e324e47 ) ( #867 ) ( 9a32489 ) ripple: initial mdInkRipple implementation ( #681 ) ( 47448cb ) button: add ripple to md-button ( 32aa461 ) input: support autocapitalize and autocorrect attributes ( #858 ) ( b2471f2 ) slide-toggle: add drag functionality to thumb ( #750 ) ( 25b4f21 ) In-progress, not yet released dialog: add styles and ability to close. ( #862 ) ( 758b851 ) dialog: initial framework for md-dialog ( #761 ) ( 9552ed5 ) Code health tabs: adds e2e tests for tabs ( #650 ) ( 3c74ae0 ), closes #549 BREAKING CHANGES radio: radio-button will no longer emit change event on de-select. 2.0.0-alpha.6 carbonfiber-discotheque (2016-06-30) Breaking changes MdRadioDispatcher is now MdUniqueSelectionDispatcher and is imported from core Form controls use the new @angular/forms package. To make migration easier, you can alternatively install alpha.5-3, which is the same as alpha.6 without the new forms package. Please see the docs for the new forms module . Bug Fixes button: add the focus() method to buttons. ( #643 ) ( a6e74ce ), closes #510 button: focus state matches spec ( #467 ) ( b24d321 ) checkbox: checkbox animation works in Safari ( #594 ) ( 0a9fb83 ) checkbox: prevent double click events ( #672 ) ( afed818 ), closes #671 core: resolve compilation errors for latest Typescript 1.9 ( #624 ) ( e366fa0 ), closes #624 demo-app: resolve mapping paths in relative. ( #566 ) ( 421828a ), closes #566 forms: update components to new forms module ( #745 ) ( 653fcee ) grid-list: account for gutter in total list height ( #545 ) ( b47097d ) input: Fix floating label width ( #689 ) ( cf2703c ), closes #689 #688 input: placeholder text is hidden by parent visibility ( #680 ) ( b407278 ), closes #670 overlay: add a z-index. ( #615 ) ( 89ab2f5 ) progress-bar: determinate state reflects value ( #542 ) ( 6b86df0 ), closes #519 radio: fix the baseline of radio buttons ( #642 ) ( 31f0c7f ), closes #642 radio: model should update before change event is fired ( #456 ) ( c923f56 ), closes #448 radio: support aria-label(ledby) on md-radio ( #586 ) ( #596 ) ( 8ccc49b ) release: make resource-inlining regex non-greedy ( #653 ) ( e808452 ) sidenav: md-content now fills height ( #703 ) ( e10172c ), closes #606 sidenav: resolve compilation errors for latest Typescript 1.9 ( #627 ) ( f7f0b4a ), closes #627 slide-toggle: apply typography styles to slide-toggle ( #634 ) ( bbd96e8 ), closes #633 slide-toggle: stop change event firing upon init ( #713 ) ( f21b2f4 ), closes #709 spinner: omit min/max/value for indeterminate and correctly set mode ( #640 ) ( a5944da ) tabs: adds support for async tabs ( #639 ) ( 231467d ), closes #574 tabs: removes minimum height ( #641 ) ( 750a8e3 ), closes #570 theme: fix card and list colors for dark themes ( #667 ) ( ce27341 ), closes #667 #350 toolbar: disable view encapsulation. ( #678 ) ( 5c4dc04 ), closes #676 add event object for slide-toggle and checkbox. ( #554 ) ( 55cc197 ), closes #552 include scss sources in packages ( #536 ) ( fd02b10 ) remove @internal where it would make tsc fail ( #538 ) ( efd1be2 ) remove circular deps and ci check ( #608 ) ( fda5617 ) remove duplicated typing. TS stdlib provides enough for e2e tests ( #637 ) ( a68597e ) resolve errors w/ Closure Compiler. ( #659 ) ( fbdb35b ), closes #659 visually hidden inputs should not bubble change event ( #551 ) ( d037ed3 ), closes #544 Features grid-list: add header and footer support ( 43806f6 ) overlay: add connected overlay directive ( #496 ) ( 3b527e8 ) tabs: adds focus/select events ( #649 ) ( 497a3c1 ), closes #569 tabs: adds support for two-way bindings on selectedIndex ( #702 ) ( 8df3246 ), closes #687 Performance Improvements progress-circle: clean up animation on destroy ( #617 ) ( 63f43bd ) 2.0.0-alpha.5 granite-gouda (2016-05-25) Bug Fixes checkbox: change event should now fire on first change( 7a9df1e ), closes #481 gestures: ensure default gestures are not overwritten by custom gestures( 523929c ) gestures: export gesture config as part of core ( #488 )( 0d04e01 ) input: adds blur and focus event support ( #449 )( f6f5af3 ), closes #337 input: adds support for name property for input element ( #452 )( f53ffdb ), closes #446 input: input element should have a different id from outer element ( #450 )( be5e93a ), closes #320 input: inputs now work in IE11 ( #469 )( de2a9f2 ), closes #336 input: make native input background transparent ( #468 )( d2c6cb8 ), closes #277 input: undo firefox invalid style, fix maxlength in IE ( #393 )( dfe683b ), closes #393 #342 #388 input: use the right ID for the label. ( #515 )( 06aa3f1 ), closes #512 list: adds focus state for nav-list items ( #502 )( 34b210c ), closes #323 list: removes outline from focus state ( #511 )( 91ad1c8 ) progress-circle: support IE11 ( #375 )( f22fa86 ), closes #295 radio: refactor tests and fix ngModel ( #443 )( a25a8da ), closes #443 radio: remove event global so radio works in node( c32b06d ), closes #425 radio: unsetting the model will deselect all radio buttons ( #441 )( 8af16e8 ), closes #327 sidenav: add scrolling style to enable momentum scroll( c566242 ) sidenav: fixes sidenav RTL listening for side mode ( #465 )( 4e1d85e ), closes #465 #411 sidenav: removes margin transitions ( #460 )( 4b488e1 ), closes #404 sidenav: switches to translate3d() for content positioning ( #484 )( 357ee4c ) sidenav: treat opened as boolean attribute. ( #444 )( e977984 ), closes #300 misc: adds directive constants to all components ( #514 )( fb89d4f ), closes #513 misc: correct access-level on many APIs ( #437 )( 358af3b ) misc: ensure custom error messages are set( 4a25b7f ) Features tabs: adds the md-tab-group component ( #376 )( ada285c ) grid-list: add grid-list component( 0f89b8d ) slide-toggle add slide-toggle component. ( #362 )( e09a5bf ) checkbox: drive component with native checkbox ( #415 )( 10ac2be ), closes #250 input: add focus function on host element ( #407 )( 0323844 ) input: add support for more input attributes ( #447 )( 911bfae ) overlay: add connected position strategy ( #335 )( 7f3b1bd ) 2.0.0-alpha.4 mahogany-tambourine (2016-05-04) Bug Fixes button: cleaned up button theming( 0672356 ) checkbox: fix horizontal spacing between checkboxes and radio buttons( f4a7266 ) sidenav: add min width for empty navs( dbe3cc5 ) sidenav: prevent content from scrolling when sidenav is open( fea5923 ) theme: new, more delightful default theme( 2f3e9db ) update to @angular 2.0.0-rc.0 ( #384 )( 04c8a1f ) Features icon: initial md-icon implementation ( #281 )( a094a33 ) card: add alignment shortcuts for md-card-actions( 77be2df ) grid-list: basic scaffold for grid list (unreleased)( a9e1fa5 ) list: add icon support( 7b3698c ) sidenav: add fullscreen mode( aa6c740 ) 2.0.0-alpha.3 cotton-candelabrum (2016-04-21) Bug Fixes button: remove ref to Event global (for node) ( 76e4f56 ) input: convert values entered based on the type input ( e7611ce ) progress-circle: actually render on Firefox Edge (#283) ( d24a5b3 ) sidenav: do not throw when there's no sidenav. (#270) ( cc2b223 ), closes #269 Features progress-bar: initial progress-bar impl. (#130) ( c640f0c ), closes #40 gestures: add basic gesture demos ( d4a3cde ) input: add support for spellcheck attribute (#316) ( dfee018 ) list: add nav list styles ( 22c1ea3 ) list: syntactic sugar for simple nav lists ( c21c336 ) a11y: live-announcer supports using a provided live element (#273) ( 1a33a5b ), closes #267 2.0.0-alpha.2 diamond-haircut (2016-04-06) Bug Fixes button: apply color classes correctly. ( 62265cc ), closes #75 #89 #195 checkbox: Cancel spacebar keydown events when component focused ( 6db3511 ), closes #162 #181 checkbox: Ensure consistent mixedmark rendering across browsers ( 666cdba ), closes #174 #190 checkbox: Handle transition when unset checkbox is interacted with ( dde9359 ), closes #183 #227 checkbox: Reduce $md-checkbox-transition-duration to 90ms ( 87e3a32 ), closes #226 #230 checkbox: Remove GPU layer promotion for mark elements ( 82a22a7 ) sidenav: Remove deprecated @View ( a61e2e9 ), closes #213 radio: export the dispatcher in radio.ts ( 64cc406 ) Features input: add new input component ( 74d9bc0 ) input: README.md improvements and autofill support. ( b711c2b ) list: add list component ( fb71eb1 ) list: add dividers to lists ( 915dd9b ) list: support subheaders in lists ( 0a9c169 ) elevation: Add elevation core styles ( 3e34f7a ), closes #222 button: add md-icon-button styling. ( 208cd65 ), closes #188 #206 overlay: add basic core of overlay ( f0e1273 ) overlay: add global position strategy ( c8f87a4 ) overlay: add overlay container styles ( 74e3edf ) portal: add DomPortalHost ( 358d923 ) radio: support ngModel on md-radio-group ( 6aff4cc ), closes #209 a11y: add aria live announcer ( e99da66 ), closes #106 2.0.0-alpha.1 nylon-hyperdrive (2016-03-16) Features radio: Radio button component. ( d76465b ), closes #125 2.0.0-alpha.0 titanium-octopus (2016-03-15) First release of angular2-material! This inaugural release includes 6 components: md-button (buttons and anchors) md-card md-toolbar md-sidenav md-checkbox md-progress-circle and md-spinner As the alpha process continues, these components will continue to evolve. There will be breaking changes between alpha releases; the alpha releases are here for people that want an early look or who like to live on the edge and are very tolerant of breaking API and behavior changes.","title":"0-CHANGELOG"},{"location":"site-files/project/0-CHANGELOG/#733-cashmere-armor-2019-02-20","text":"","title":"7.3.3 \"cashmere-armor\" (2019-02-20)"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes","text":"theming : fix errors when building theme using CSS variables ( #15140 ) ( 96f6e06 ), closes #15107 bidi: handle uppercase values correctly ( #14773 ) ( 0029cde ) dialog: don't assign aria-label to close button if button has text ( #11093 ) ( 9bf368d ), closes #11084 list: disableRipple on selection list not affecting list options after init ( #14858 ) ( edf4541 ) schematics: do not generate invalid stylesheet files ( #15235 ) ( e7422e4 ), closes #15164 table: add missing rowgroup roles ( #15131 ) ( 2c7bc1c )","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#732-jute-box-2019-02-11","text":"","title":"7.3.2 \"jute-box\" (2019-02-11)"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_1","text":"autocomplete: set aria-haspopup ( #15079 ) ( 45bd5d4 ) checkbox: unable to click to select if text is marked ( #15062 ) ( 4819c5b ), closes #14967 drag-drop: set class when item or list is disabled ( #14769 ) ( c543cf6 ), closes #14760 drag-drop: standalone draggable drag class not being applied with OnPush change detection ( #14727 ) ( 2f63195 ) icon: add notranslate class ( #14889 ) ( 39fa928 ) menu: prevent removal of mat-elevation class ( #15035 ) ( 8069641 ) slide-toggle: input element should use switch role ( #15073 ) ( 3af7748 ), closes #14949 tree: opposite direction padding not being reset on change ( #14816 ) ( ae4a5ae )","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#731-liquidcrystal-sandwich-2019-02-04","text":"","title":"7.3.1 \"liquidcrystal-sandwich\" (2019-02-04)"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_2","text":"button: not updating DOM node name if group name changes ( #14963 ) ( 37732cb ) cdk-stepper: coercing selectedIndex value to a Number ( #14817 ) ( b64c08d ) checkbox: not marked as touched immediately on blur with OnPush change detection ( #15001 ) ( 916c532 ), closes #14980 chips: newly-added chips not being disabled when added to a disable list ( #14976 ) ( c23512a ) examples: fix form-field custom control disabled input ( #14957 ) ( ce3926d ), closes /github.com/angular/angular/blob/e2c98fbe11272295c3827b0e54f859d283cd32bf/packages/forms/src/directives/reactive_errors.ts#L64 list: selection list not picking up indirect descendants ( #15003 ) ( 6a07d0d ), closes #15000 MatPseudoCheckbox: fix checkmark pseudo-element box-sizing ( #14971 ) ( ba6b405 ) overlay: unnecessarily pushing overlay if it is exactly as wide as the viewport ( #14975 ) ( f4b4e61 ), closes #14968 radio: not updating DOM node name if group name changes ( #14950 ) ( 4d5c5d5 ) radio: unable to click to select button if text is marked ( #14967 ) ( 81380d2 ), closes #14753 slider: focus ring showing when ancestor has focus monitoring ( #14960 ) ( 2ec9dff ), closes #14958 table: allow for a caption to be projected ( #14965 ) ( a8a6617 ), closes #14948 table: Clarify unknown table column error ( #14947 ) ( 2782273 ) tree,scrolling: don't require user DataSource to extend DataSource ( #14966 ) ( 0f9926a )","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#730-pyrite-pixie-2019-01-28","text":"","title":"7.3.0 \"pyrite-pixie\" (2019-01-28)"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_3","text":"autocomplete: not updating origin if it changes after init ( #14677 ) ( 4913c36 ) bottom-sheet: allow disableClose to be updated after opened ( #14711 ) ( 3d3179f ), closes #14708 button: focus indication hard to see in high contrast mode ( #13259 ) ( fffbcb1 ) button-toggle: remove references to selected toggle on destroy ( #14627 ) ( 98f0142 ) datepicker: update validation when switching from null to error input ( #14423 ) ( 5aefe60 ) drag-drop: apply translation transform before user transforms ( #14712 ) ( 349675a ), closes #14699 drag-drop: dragging styling not being reset in some cases with OnPush change detection ( #14725 ) ( 1d4bb18 ) drag-drop: incorrectly preserving transform if root element changes ( #14697 ) ( 3656a4e ) drag-drop: restore initial transform when resetting ( #14701 ) ( 005fb46 ) drag-drop: unable to move item into connected container by passing through another container ( #14651 ) ( 0bd93dd ), closes #14645 focus-trap: apply aria-hidden to focus trap tab anchors ( #14644 ) ( f66302d ) icon: clean up cached references in icon registry on destroy ( #14801 ) ( f6b4288 ) list: action list button outline not being reset on firefox ( #14693 ) ( 73d0fb9 ) list: deselect option if value doesn't match up ( #14800 ) ( 551ded5 ), closes #14734 list: disableRipple on list input not taking effect after init ( #14836 ) ( 463ac9e ), closes #14824 menu: not unsubscribing from close stream if trigger is destroyed ( #14107 ) ( 80f510f ) overlay: not sizing flexible overlay correctly when opening downwards on a scrollable page ( #14672 ) ( 40f8b20 ) overlay: reset transform when disposing of position strategy ( #14660 ) ( 86c530e ), closes #14657 overlay: update size if dimensions change in overlay directives ( #14610 ) ( c92d8c9 ), closes #7811 slide-toggle: use default hue for thumb in dark theme ( #14230 ) ( 7d96ed3 ), closes #14192 sort: extra Firefox focus outline not being reset ( #14733 ) ( 027d4f4 ) stepper: ensure step state is not minified ( #14933 ) ( e7b0e40 ) table: not re-rendering when switching to a smaller set of data than the current page ( #14665 ) ( a31a2ff ), closes #12586 #14010 tabs: better handling of animationDuration without units ( #14778 ) ( 6f49813 ), closes #13428 tabs: don't handle keyboard events with modifier keys ( #14234 ) ( 76cb9d0 ) tabs: pagination not working correctly on chrome in rtl mode ( #14690 ) ( 220e6b2 ), closes #14689 tooltip: afterHidden stream not being completed ( #14620 ) ( 0394d59 )","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#features","text":"dialog: support adding and removing classes via dialogRef ( #14772 ) ( b62f3f3 ), closes #6206 drag-drop: add service for attaching drag drop to arbitrary DOM nodes ( #14437 ) ( 5a18ea6 ) overlay: allow for connected overlay to be positioned relative to a point ( #14616 ) ( 651549f ), closes #5007 ripples: support updating global ripple options at runtime ( #14705 ) ( 4f755cf ), closes #9729 tabs: add automatic scrolling when holding down paginator ( #14632 ) ( e661317 ), closes #6510 tooltip: allow for default position to be configured ( #14872 ) ( 342e6f0 ), closes #14862","title":"Features"},{"location":"site-files/project/0-CHANGELOG/#721-acrylic-axolotl-2019-01-07","text":"","title":"7.2.1 \"acrylic-axolotl\" (2019-01-07)"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_4","text":"a11y: remove listeners when focus trap anchors are removed ( #14629 ) ( 17bb9c3 ) autocomplete: adding aria-activedescendant while closed if autoActiveFirstOption is enabled ( #14455 ) ( f3065cc ), closes #14453 checkbox: incorrect color for disabled indeterminate checkbox ( #14478 ) ( 0398d53 ), closes #14415 datepicker: native date adapter not preserving time when cloning ( #14691 ) ( 9e3a77b ) dialog: complete injectable streams on destroy ( #14254 ) ( e673608 ) drag-drop: don't disable native drag interactions if dragging is disabled ( #14233 ) ( 9fa3376 ) drag-drop: update root element if selector changes ( #14426 ) ( 14b90db ) form-field: proper arrow color for native select ( #14490 ) ( 3824a05 ) input: unable to reset focused state of readonly input ( #14698 ) ( 98711d7 ) list: add hover and focus indication in high contrast mode ( #14637 ) ( 3c71348 ) menu: hasBackdrop not being updated after first open ( #14561 ) ( 268b0e8 ), closes #14560 menu: scroll position jumping to top after animation is done on scrollable menu ( #14190 ) ( 37a7080 ), closes #11859 #11790 moment-adapter: incorrectly deserializing moment dates and not setting locale on deserialized values ( #14685 ) ( 36db1c0 ) overlay: not updating hasBackdrop after first open ( #14562 ) ( 61d3cf8 ), closes #14561 radio: host element unable to receive focus events ( #14472 ) ( 8c35917 ), closes #13323 #13953 select: announce value changes with arrow keys while closed ( #14540 ) ( 3f9a125 ) select: don't shift arrow if there is no label ( #14607 ) ( 7188719 ), closes #13907 select: form field state not updated if options are reset ( #14720 ) ( 391a9fd ), closes #14709 slider: don't handle keyboard events with modifier keys ( #14675 ) ( 7d2748e ) typography: deprecation warning in latest sass version ( #14673 ) ( 65ecb08 ), closes #14636 expansion-panel: add missing injection token for configuring the default options ( #14384 ) ( a389704 ), closes #14383","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#720-gold-snowman-2018-12-18","text":"","title":"7.2.0 \"gold-snowman\" (2018-12-18)"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_5","text":"a11y: inconsistent runtime value for ListKeyManager.activeItem ( #14154 ) ( c4b3484 ), closes #14152 autocomplete: update template when changing autocomplete in trigger ( #13814 ) ( 904a5ea ) badge: aria-label not being updated if description changes ( #14393 ) ( ab78183 ) bottom-sheet: bottom-sheet content not being read out by screen readers ( #14534 ) ( 9485aff ), closes #10591 cdk/stepper: exported injection token referring to Material ( #14339 ) ( b584888 ) chips: don't handle separator keys while pressing modifiers ( #14424 ) ( d1cec1f ) drag-drop: account for out of view container and stacking order ( #14257 ) ( c5be8d3 ), closes #14231 drag-drop: error on touch end ( #14392 ) ( 53cecbb ), closes #14390 drag-drop: handle placeholder and preview templates changing after init ( #14541 ) ( bfacbb5 ) drag-drop: prevent text selection while dragging on Safari ( #14405 ) ( 220e388 ), closes #14403 drag-drop: showing touch device tap highlight when using a handle ( #14549 ) ( 8a3d21a ) drag-drop: throw better error when attaching to non-element node ( #14221 ) ( 31f0e6d ) drag-drop: unable to stop dragging after quick double click ( #14506 ) ( fbb2a13 ) drawer: ensure all observables are unsubscribed ( #13378 ) ( f7dcc27 ) form-field: long labels and option values going under select arrow ( #14268 ) ( 166279b ) form-field: native select label floating incorrectly when invalid value is set ( #14263 ) ( 9c65c87 ) form-field: outline gap not being calculated when element starts off invisible ( #13477 ) ( e579181 ), closes #13328 form-field: outline gap not being recalculated on direction changes ( #13478 ) ( b78a750 ) grid-list: allow more units for gutter width and row height ( #14341 ) ( f176119 ) menu: accidentally tapping on sub-menu content that overlaps trigger on touch devices ( #14538 ) ( f2a06ab ) menu: reduce specificity of icon selector ( #14389 ) ( 74e945a ) menu: unable to set icon color dynamically ( #14161 ) ( 48e4f65 ), closes #14151 schematics: drag-drop schematic two consecutive commas ( #14446 ) ( 35fd998 ) schematics: two consecutive commas generated ( #14371 ) ( dd6065c ), closes #14366 sidenav: content margins not updated on viewport changes ( #14089 ) ( b15392d ) snack-bar: announcing same message twice to screen readers ( #13298 ) ( 3fb4b23 ) stepper: ignoring custom falsy value for hasError ( #14337 ) ( 7fac915 ), closes #14333 text-field: add fallback for browsers that don't support requestAnimationFrame ( #14519 ) ( c94812d ) tree: allow tree node to have undefined child or null child ( #14482 ) ( eeda91d ) tree: handle null children in nested tree ( #14547 ) ( 364376e ), closes #10886 #14545 reference symbols for example components rather than providing a string of the component name ( #13992 ) ( d0d97c3 ) workaround for es2015 inheritance not always working ( #13834 ) ( a22a9fa )","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#features_1","text":"drag-drop: add class to indicate whether a container can receive an item ( #14532 ) ( c6dc070 ), closes #14439 drag-drop: add released event ( #14513 ) ( 792d536 ), closes #14498 drag-drop: add the ability to constrain dragging to an element ( #14242 ) ( 8432e80 ), closes #14211 drag-drop: allow entire group of drop lists to be disabled ( #14179 ) ( 94e76de ) drag-drop: indicate in dropped event whether item was dropped outside of container ( #14140 ) ( 42de6a2 ), closes #14136","title":"Features"},{"location":"site-files/project/0-CHANGELOG/#711-fondant-friendship-2018-12-03","text":"","title":"7.1.1 \"fondant-friendship\" (2018-12-03)"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_6","text":"a11y: don't handle disallowed modifier keys in typeahead mode ( #14301 ) ( 700f20f ), closes #14274 badge: badge instances not being cleaned up on destroy ( #14265 ) ( da3776f ) checkbox: poor color contrast for disabled checkbox ( #14044 ) ( 9c86b5f ) chips: invert focus overlay on dark theme ( #14204 ) ( 7af8d02 ) drag-drop: add support for dragging svg elements in IE11 ( #14215 ) ( 81db16c ), closes #14214 drag-drop: dragged elements blurry in some browsers ( #14299 ) ( 63174d2 ), closes #14283 drag-drop: only add top-level drop lists to drop group ( #14130 ) ( 4acecd7 ) drag-drop: remove expensive style recalculation ( #14189 ) ( f212345 ) form-field: error when native select has no options ( #14102 ) ( 0ef75ea ), closes #14101 list: don't handle events when modifier key is pressed ( #14313 ) ( 0c7ce7a ) menu: allow alternate roles to be set on menu item ( #14165 ) ( 3f1588f ), closes #14163 ng-add: do not throw if custom builder is used for \"test\" ( #14203 ) ( 498a3d8 ), closes #14176 scrolling: default to vertical CSS class for invalid orientation ( #14145 ) ( dbe27c4 ) scrolling: provide virtual scroll viewport as scrollable ( #14168 ) ( c552504 ) slide-toggle: label not being read out by JAWS ( #14304 ) ( 754414b ), closes #4610 slide-toggle: label not being read out by screen reader on IE ( #14259 ) ( 5264804 ) stepper: showing hover state after tap on touch devices ( #14074 ) ( f3031ad ) tabs: avoid hitting change detection if text content hasn't changed ( #14251 ) ( 9778af2 ), closes #14249 tabs: blurry text in scrolled header on some browsers ( #14303 ) ( f7c8026 )","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#710-stone-silhouette-2018-11-20","text":"","title":"7.1.0 \"stone-silhouette\" (2018-11-20)"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_7","text":"a11y: aria-live directive announcing the same text multiple times ( #13467 ) ( a150494 ) a11y: avoid overlapping or left over timers in live announcer ( #13602 ) ( d0f4e7b ) a11y: key manager preventing arrow key events with modifier keys ( #13503 ) ( 1ef16ac ), closes #11987 #13496 a11y: wrong order of constructor arguments in provider ( #14078 ) ( 2fcf9e7 ), closes #14077 autocomplete: autofill value changes not being propagated to the form control ( #9887 ) ( 059864d ), closes #9704 autocomplete: not propagating same model value when reset while open ( #13634 ) ( 8d98375 ) bazel: theming bundle not exposed as sass_library ( #14071 ) ( af7a3d4 ) bidi: preserve user dir attribute ( #13859 ) ( d94d176 ), closes #13855 breakpoints: set max-widths for breakpoints to non-integers to handle subpixel queries ( #13828 ) ( 077f68e ) button: ripple color not correct for standard, icon and stroked buttons ( #13235 ) ( b104e75 ), closes #13232 button: stroked button crops applied badges ( #13912 ) ( 4b431fe ), closes #13909 button-toggle: content shifting in IE11 ( #13492 ) ( b3483a6 ) button-toggle: not forwarding focus to underlying control ( #14001 ) ( 81f8fb9 ) button-toggle: remove hover state on touch devices ( #13724 ) ( a320af2 ) button-toggle: svg icon not align inside toggle ( #13839 ) ( 5851c91 ), closes #13726 button-toggle: webkit tap highlight conflicting with ripples ( #13721 ) ( efe53a0 ) cdk-platform: pass {} to @NgModule since passing nothing breaks ( #13792 ) ( 65dd75d ) checkbox: disabled property not being coerced ( #13755 ) ( e5fe34c ), closes #13739 checkbox: no focus indicator in high contrast ( #13255 ) ( caf65e5 ), closes #13227 chips: disabled state not matching specs ( #13272 ) ( 60e0d88 ) chips: invalid ripple color for selected chips ( #13271 ) ( df5d18f ) chips: not updating keyboard controls if direction changes ( #14080 ) ( 1ffa1fc ) chips: remove circular dependency between chip-list and chip-input ( #13994 ) ( 6c741c4 ) datepicker: don't allow clicks on disabled cells in year and multi-year views ( #13448 ) ( c15bad2 ) datepicker: toggle not forwarding focus to underlying button ( #14020 ) ( b1d4b42 ) datepicker: unable to disable ripple on datepicker toggle ( #13997 ) ( 31bffb3 ), closes #13986 dialog,bottom-sheet: enter animation blocking child animations ( #13888 ) ( 235add9 ), closes #13870 drag-drop: avoid disrupting drag sequence if event propagation is stopped ( #13841 ) ( 8b2dc82 ) drag-drop: avoid generating elements with duplicate ids ( #13489 ) ( 68b53f7 ) drag-drop: avoid interference from native drag drop ( #14054 ) ( 26d63ee ) drag-drop: drop list not toggling dragging class inside component with OnPush change detection ( #13703 ) ( 12c15ba ), closes #13680 drag-drop: enable drag interactions when there is a drag handle ( #13780 ) ( 4ee6636 ), closes #13779 drag-drop: error if drag item is destroyed zone has stabilized ( #13978 ) ( 6fe84f3 ) drag-drop: events fired multiple times for short drag sequences on touch devices ( #13135 ) ( dc0b51a ), closes #13125 drag-drop: ignore enter predicate when returning item to its initial container ( #13972 ) ( fa944b7 ) drag-drop: incorrectly laying out items with different height or margins ( #13849 ) ( 89701ef ), closes #13483 drag-drop: multiple parallel drag sequences when dragging nested drag items ( #13820 ) ( 436809c ) drag-drop: not picking up handle that isn't a direct descendant ( #13360 ) ( c38ebb6 ) drag-drop: preserve previous inline transform ( #13529 ) ( cae16b0 ) drag-drop: prevent mouse wheel scrolling while dragging ( #13524 ) ( cd6da93 ), closes #13508 drag-drop: use passive event listeners for start events ( #13526 ) ( 280b0d6 ) expansion-panel: don't handle enter/space if modifier is pressed ( #13790 ) ( 04716b1 ), closes #13783 expansion-panel: emitting events twice on some browsers ( #13600 ) ( fa6e46d ) focus-trap: warn if initial element is not focusable ( #13960 ) ( 27347b5 ), closes #13953 form-field: native select options blending in with dropdown background on a dark theme ( #13201 ) ( 3f1e960 ) form-field: users being able to select the hidden placeholder of disabled input ( #13480 ) ( 8dc367c ), closes #13479 grid-list: unable to assign numeric zero as gutter size ( #13652 ) ( 037a746 ) icon: account for query params when prefixing external references ( #13930 ) ( 4ce5ee0 ), closes #13924 list: add ripples to action list items ( #13799 ) ( 76044e8 ), closes #13795 list: remove disabled selection list hover feedback on mobile ( #13850 ) ( 0589881 ) list: selection list moving focus when an option is destroyed ( #13531 ) ( b5a0b16 ) menu: closing parent overlay when pressing escape ( #13442 ) ( a7df1d0 ) menu: proper focus styling when opened by tap on a touch device ( #13599 ) ( e51de15 ) menu: unable to swap menu panel after first open ( #13819 ) ( 1fb1c55 ), closes #13812 menu: use passive touch listener ( #14041 ) ( 3842c8c ) ng-update: do not fail if @schematics /angular version is outdated ( #13929 ) ( ece6b2d ) ng-update: do not throw if typescript version is outdated ( #13927 ) ( eb59e56 ) overlay: backdrop exit animation not working ( #10145 ) ( 3816079 ) overlay: provide fullscreen overlay container in root ( #14091 ) ( c55b78e ) portal: use portal's ComponentFactoryResolver in portal outlet directive ( #13886 ) ( 99d2512 ), closes #12677 #9712 progress-bar: account for query params when prefixing references ( #13942 ) ( 2290063 ), closes #13930 progress-bar: not taking current path after first initialization ( #13628 ) ( 88c6548 ) radio: don't show hover ripples on touch devices ( #13701 ) ( f230633 ), closes #13675 radio: improved alignment for native validation messages ( #13570 ) ( dd96369 ) scrolling: leaking subscription if same element is registered multiple times ( #13974 ) ( 20f8924 ) select: don't prevent enter and space keys if a modifier is pressed ( #14090 ) ( cb56df9 ) sidenav: opened and closed events emitting twice on IE and Edge ( #13649 ) ( beb4739 ) slide-toggle: don't show hover ripples on touch devices ( #13702 ) ( e8f8d07 ), closes #13675 slide-toggle: no focus indication in high-contrast mode ( #13287 ) ( 264f306 ) slide-toggle: redirect focus to underlying input element ( #13957 ) ( ec4809f ), closes #13953 slide-toggle: showing focus ripple when clicking disabled control ( #14055 ) ( 9b05c3c ), closes #13957 slide-toggle: using incorrect colors when disabled ( #13444 ) ( dd9f267 ) slider: changing value on right click ( #14083 ) ( ed857c9 ) slider: update value on mousedown instead of click ( #13020 ) ( 861642c ) snack-bar: set appropriate role based on passed in politeness ( #13864 ) ( 50f999b ), closes #13493 snackbar: override min-width of snackbar on mobile ( #13880 ) ( 6703605 ) snackbar: set aria role based on if announcement message is provided ( #13993 ) ( 69ffd33 ) stepper: custom icons not centered inside circle ( #12947 ) ( 87e1742 ) stepper: don't handle enter/space when modifier key is pressed ( #13827 ) ( a9e550e ), closes #13790 stepper: emitting the animationDone event twice on some browsers ( #13608 ) ( 3ef933a ), closes #13600 #13587 stepper: fix text contrast ratio of stepper labels ( #14012 ) ( ae5b10f ) stepper: incorrect border color in dark theme for header with label position ( #13791 ) ( bbeb5ef ) stepper: intl provider not being picked up in lazy-loaded modules ( #12934 ) ( 675aa66 ) stepper: selector assuming that there will always be a dir attribute ( #13751 ) ( d5f0f0f ), closes #13741 stroked-button: ripples and focus overlay have incorrect radius ( #13745 ) ( 4cdf5ba ), closes #13738 table: delimit words when filtering ( #13487 ) ( 2a3599e ) tabs: duplicate animation events on some browsers ( #13674 ) ( 28e3d36 ) tabs: mat-align-tabs not working on mat-tab-nav-bar ( #13818 ) ( 8fad5d1 ), closes #13798 tabs: paginated header offset incorrect on IE ( #13223 ) ( d7a8892 ), closes #13217 text-field: autosize textarea not resizing on minRows decrease ( #13437 ) ( cfeab79 ) tooltip: add fallback for touch devices if Hammer isn't loaded ( #13580 ) ( 5d54920 ), closes #13536 virtual-scroll: not removing view from container if it's outside the template cache ( #13916 ) ( 8922100 ), closes #13901","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#features_2","text":"bottom-sheet: allow focus restoration to be disabled ( #13153 ) ( 83fc823 ), closes #13150 datepicker: allow custom classes to be applied to individual dates ( #13971 ) ( 4be1b06 ), closes #13943 drag-drop: add directive to connect drop lists automatically ( #13754 ) ( 962dbeb ), closes #13750 drag-drop: add the ability to disable dragging ( #13722 ) ( b02a72e ), closes #13651 drag-utils: add utility function for cloning array items from one array to another ( #13743 ) ( d2d8a1f ), closes #13100 keycodes: add utilities for checking modifier keys ( #13933 ) ( 7899863 ), closes #13790 live-announcer: add ability to clear live element ( #11996 ) ( 4a1c8ed ), closes #11991 ng-add: add preview URLs for theme choices ( #13723 ) ( 4fbbb9d ), closes /github.com/angular/angular-cli/blob/907ce5c94c774147c4b52870b3522aed4e087c76/packages/schematics/angular/ng-new/schema.json#L121 #13708 paginator: allow paginator to be disabled ( #13146 ) ( cb4f5a0 ), closes #13145 stepper: add CdkStepHeader directive and fix CdkStepper error on init ( #10614 ) ( fbbe463 ), closes #10611 tabs: add the ability to customize the animation duration ( #13505 ) ( 0cd7536 ), closes #13428 tabs: make the updatePagination method public ( #13935 ) ( 1e4ee0c )","title":"Features"},{"location":"site-files/project/0-CHANGELOG/#performance-improvements","text":"focus-monitor: mark event listeners as passive ( #13532 ) ( bfc00a0 ) list: reduce css selector size ( #12571 ) ( e31e011 )","title":"Performance Improvements"},{"location":"site-files/project/0-CHANGELOG/#704-brick-dress-2018-11-13","text":"","title":"7.0.4 \"brick-dress\" (2018-11-13)"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_8","text":"a11y: aria-live directive announcing the same text multiple times ( #13467 ) ( 7c2a095 ) a11y: avoid overlapping or left over timers in live announcer ( #13602 ) ( a93d3a5 ) a11y: key manager preventing arrow key events with modifier keys ( #13503 ) ( b7ef6af ), closes #11987 #13496 bazel: theming bundle not exposed as sass_library ( #14071 ) ( 71c205e ) bidi: preserve user dir attribute ( #13859 ) ( 86089fe ), closes #13855 button: ripple color not correct for standard, icon and stroked buttons ( #13235 ) ( 62c6d55 ), closes #13232 button-toggle: not forwarding focus to underlying control ( #14001 ) ( b7be573 ) button-toggle: svg icon not align inside toggle ( #13839 ) ( 2814a99 ), closes #13726 checkbox: no focus indicator in high contrast ( #13255 ) ( 13d9d3a ), closes #13227 chips: invalid ripple color for selected chips ( #13271 ) ( 057eee1 ) datepicker: toggle not forwarding focus to underlying button ( #14020 ) ( 723d7f5 ) datepicker: unable to disable ripple on datepicker toggle ( #13997 ) ( 2fb58ab ), closes #13986 drag-drop: avoid disrupting drag sequence if event propagation is stopped ( #13841 ) ( 2902d0b ) drag-drop: avoid generating elements with duplicate ids ( #13489 ) ( 905f0b4 ) drag-drop: avoid interference from native drag drop ( #14054 ) ( 8dcbee2 ) drag-drop: enable drag interactions when there is a drag handle ( #13780 ) ( 0d3b74a ), closes #13779 drag-drop: error if drag item is destroyed zone has stabilized ( #13978 ) ( 40a63cf ) drag-drop: ignore enter predicate when returning item to its initial container ( #13972 ) ( 3fb5522 ) drag-drop: prevent mouse wheel scrolling while dragging ( #13524 ) ( 718d306 ), closes #13508 drag-drop: add directive to connect drop lists automatically ( #13754 ) ( e905127 ), closes #13750 focus-trap: warn if initial element is not focusable ( #13960 ) ( 3026138 ), closes #13953 icon: account for query params when prefixing external references ( #13930 ) ( 90420d6 ), closes #13924 menu: use passive touch listener ( #14041 ) ( f5006d6 ) progress-bar: account for query params when prefixing references ( #13942 ) ( eb82847 ), closes #13930 scrolling: leaking subscription if same element is registered multiple times ( #13974 ) ( 1a7173d ) slide-toggle: redirect focus to underlying input element ( #13957 ) ( 1d4be69 ), closes #13953 slide-toggle: showing focus ripple when clicking disabled control ( #14055 ) ( a2c2caf ), closes #13957 snackbar: set aria role based on if announcement message is provided ( #13993 ) ( 199583b ) stepper: fix text contrast ratio of stepper labels ( #14012 ) ( 01605d0 )","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#703-lyrium-longboard-2018-11-06","text":"","title":"7.0.3 \"lyrium-longboard\" (2018-11-06)"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_9","text":"breakpoints: set max-widths for breakpoints to non-integers to handle subpixel queries ( #13828 ) ( b88b79d ) button: stroked button crops applied badges ( #13912 ) ( 835dc9e ), closes #13909 button-toggle: remove hover state on touch devices ( #13724 ) ( f9d5fb4 ) chips: remove circular dependency between chip-list and chip-input ( #13994 ) ( 3da858d ) dialog,bottom-sheet: enter animation blocking child animations ( #13888 ) ( e5afa48 ), closes #13870 drag-drop: drop list not toggling dragging class inside component with OnPush change detection ( #13703 ) ( 4e50d4a ), closes #13680 drag-drop: incorrectly laying out items with different height or margins ( #13849 ) ( c509591 ), closes #13483 drag-drop: multiple parallel drag sequences when dragging nested drag items ( #13820 ) ( cdc0c8b ) list: add ripples to action list items ( #13799 ) ( b293655 ), closes #13795 list: remove disabled selection list hover feedback on mobile ( #13850 ) ( e975223 ) menu: unable to swap menu panel after first open ( #13819 ) ( cbb76ec ), closes #13812 ng-update: do not fail if @schematics /angular version is outdated ( #13929 ) ( f10f8b9 ) ng-update: do not throw if typescript version is outdated ( #13927 ) ( d44fcf8 ) portal: use portal's ComponentFactoryResolver in portal outlet directive ( #13886 ) ( d2af80b ), closes #12677 #9712 snack-bar: set appropriate role based on passed in politeness ( #13864 ) ( 33d3cb3 ), closes #13493 snackbar: override min-width of snackbar on mobile ( #13880 ) ( 41cb8aa ) stepper: don't handle enter/space when modifier key is pressed ( #13827 ) ( 0bd3890 ), closes #13790 tabs: duplicate animation events on some browsers ( #13674 ) ( 7106681 ) tabs: mat-align-tabs not working on mat-tab-nav-bar ( #13818 ) ( 2289e43 ), closes #13798 virtual-scroll: not removing view from container if it's outside the template cache ( #13916 ) ( 7c202ec ), closes #13901 bazel support for downstream apps ( #13836 ) ( 61dbd26 )","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#702-limestone-linguine-2018-10-26","text":"","title":"7.0.2 limestone-linguine (2018-10-26)"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_10","text":"build: material not working with ES2015 ( #13709 ) ( e9103a6 ), closes #12760 #13695 button-toggle: webkit tap highlight conflicting with ripples ( #13721 ) ( abd0278 ) cdk-platform: pass {} to @NgModule since passing nothing breaks ( #13792 ) ( 5abb644 ) checkbox: disabled property not being coerced ( #13755 ) ( cee8c65 ), closes #13739 expansion-panel: don't handle enter/space if modifier is pressed ( #13790 ) ( 3e6cc77 ), closes #13783 radio: don't show hover ripples on touch devices ( #13701 ) ( b89c139 ), closes #13675 slide-toggle: don't show hover ripples on touch devices ( #13702 ) ( 9d495f1 ), closes #13675 stepper: incorrect border color in dark theme for header with label position ( #13791 ) ( afa5a28 ) stepper: selector assuming that there will always be a dir attribute ( #13751 ) ( 576118e ), closes #13741 stroked-button: ripples and focus overlay have incorrect radius ( #13745 ) ( 7877404 ), closes #13738 tooltip: add fallback for touch devices if Hammer isn't loaded ( #13580 ) ( 9ae6c84 ), closes #13536","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#features_3","text":"drag-utils: add utility function for cloning array items from one array to another ( #13743 ) ( 13395c5 ), closes #13100 ng-add: add preview URLs for theme choices ( #13723 ) ( f1d1fc5 ), closes /github.com/angular/angular-cli/blob/907ce5c94c774147c4b52870b3522aed4e087c76/packages/schematics/angular/ng-new/schema.json#L121 #13708","title":"Features"},{"location":"site-files/project/0-CHANGELOG/#701-emerald-egret-2018-10-22","text":"","title":"7.0.1 emerald-egret (2018-10-22)"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_11","text":"autocomplete: not propagating same model value when reset while open ( #13634 ) ( 2006144 ) button-toggle: content shifting in IE11 ( #13492 ) ( 7f5cbe3 ) datepicker: don't allow clicks on disabled cells in year and multi-year views ( #13448 ) ( 85741e0 ) drag-drop: not picking up handle that isn't a direct descendant ( #13360 ) ( 0f05d99 ) drag-drop: preserve previous inline transform ( #13529 ) ( 2a8da45 ) drag-drop: use passive event listeners for start events ( #13526 ) ( 5d5fba5 ) expansion-panel: emitting events twice on some browsers ( #13600 ) ( 85a3ae0 ) form-field: native select options blending in with dropdown background on a dark theme ( #13201 ) ( b8a6294 ) grid-list: unable to assign numeric zero as gutter size ( #13652 ) ( 4ffcf74 ) list: selection list moving focus when an option is destroyed ( #13531 ) ( 2c4c5ba ) menu: closing parent overlay when pressing escape ( #13442 ) ( c3ae922 ) menu: proper focus styling when opened by tap on a touch device ( #13599 ) ( c271167 ) progress-bar: not taking current path after first initialization ( #13628 ) ( 8e331a7 ) radio: improved alignment for native validation messages ( #13570 ) ( dbf5164 ) sidenav: opened and closed events emitting twice on IE and Edge ( #13649 ) ( 5295e2f ) slider: update value on mousedown instead of click ( #13020 ) ( c995db7 ) stepper: custom icons not centered inside circle ( #12947 ) ( 45edf64 ) stepper: emitting the animationDone event twice on some browsers ( #13608 ) ( a11ca21 ), closes #13600 #13587 stepper: intl provider not being picked up in lazy-loaded modules ( #12934 ) ( 00ce69b ) table: delimit words when filtering ( #13487 ) ( 1d87b4c ) text-field: autosize textarea not resizing on minRows decrease ( #13437 ) ( 8bae5b4 )","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#performance-improvements_1","text":"focus-monitor: mark event listeners as passive ( #13532 ) ( ba0c820 )","title":"Performance Improvements"},{"location":"site-files/project/0-CHANGELOG/#700-amethyst-ammonite-2018-10-17","text":"","title":"7.0.0 amethyst-ammonite (2018-10-17)"},{"location":"site-files/project/0-CHANGELOG/#highlights","text":"Support for Drag and Drop in @angular/cdk/drag-drop . Support for Virtual Scrolling in @angular/cdk/scrolling . Support for native select element in mat-form-field . Added mat-action-list , a list where each item is a button . Updated component styles throughout the library matching the 2018 Material Design Spec refresh. Added more schematics, with schematics now available for table, drag and drop, tree, address form and more. Added CLI prompts when using ng add to assist in setting up HammerJS support, application theming and animations. 250+ bug/performance fixes","title":"Highlights"},{"location":"site-files/project/0-CHANGELOG/#upgrading-to-70","text":"Using the Angular CLI, you can use the ng update command to automatically migrate to the new APIs in for Material and CDK. ng update @angular/material NOTE: If you are using only the CDK you can automatically migrate using ng update @angular/cdk instead.","title":"Upgrading to 7.0"},{"location":"site-files/project/0-CHANGELOG/#breaking-changes","text":"ripple: deprecated [matRippleSpeedFactor] and baseSpeedFactor for the ripples have been removed. Use the new animation config instead. overlay: The flexibleDiemsions property on CdkConnectedOverlay has been renamed to flexibleDimensions sidenav: the constructor signature of the MatDrawerContent and MatSidenavContent has changed. elevation: Because mat-elevation usages have been moved out of component stylesheets, users who have not invoked a theme mixin will not see any elevation shadows on Material components. However, users that have created a custom theme which lacks the elevation property will still see the default black shadows. Additionally, users who want to use themed elevations in their custom components can create their own shorthand mixin: @import '~@angular/material/theming'; $myTheme: ... @mixin my-elevation($zValue) { @include mat-theme-elevation($zValue, $myTheme); } and then invoke angular-material-theme with the $myTheme variable.","title":"Breaking Changes"},{"location":"site-files/project/0-CHANGELOG/#marked-for-deprecation","text":"A number of items throughout the library have been deprecated and are expected to be removed in v8.","title":"Marked for Deprecation"},{"location":"site-files/project/0-CHANGELOG/#cdk","text":"Collections - SelectionModel.onChange has been deprecated, use SelectionModel.changed instead. Scrolling - ScrollDispatchModule has been deprecated, use ScrollingModule instead. Table - CdkTable.setFooterRowDef has been deprecated, use CdkTable.addFooterRowDef and CdkTable.removeFooterRowDef instead. - CdkTable.setHeaderRowDef has been deprecated, use CdkTable.addHeaderRowDef and CdkTable.removeHeaderRowDef instead.","title":"CDK"},{"location":"site-files/project/0-CHANGELOG/#material","text":"Dialog - matDialogAnimations.slideDialog has been deprecated, use matDialogAnimations.dialogContainer instead. - MatDialogRef.afterOpen has been deprecated, use MatDialogRef.afterOpened instead. - MatDialogRef.afterClose has been deprecated, use MatDialogRef.afterClosed instead. - MatDialog.afterOpen has been deprecated, use MatDialog.afterOpened instead. Form Field - mat-placeholder has been deprecated, use mat-label instead. - MatPlaceholder has been deprecated, use MatLabel instead. Paginator - $mat-paginator-selector-trigger-min-width has been deprecated, use $mat-paginator-selector-trigger-width instead. Select - matSelectAnimations.fadeInContent has been deprecated and will be removed without replacement. - The setter method for MatSelect.focused has been deprecated, MatSelect.focused will become readonly. Toolbar - $mat-toolbar-height-mobile-portrait has been deprecated and will be removed without replacement. - $mat-toolbar-height-mobile-landscape has been deprecated and will be removed without replacement. NOTE: In addition to the specific deprecations listed above, many component constructor methods contain optional parameters which are expected to become required in v8.","title":"Material"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_12","text":"icon: not taking current path after initialization ( #13641 ) ( df9ec7 ) list: action list items clickable area not stretching the full width ( #13099 ) ( f3057fa )","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#700-rc2-2018-10-15","text":"","title":"7.0.0-rc.2 (2018-10-15)"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_13","text":"drag-drop: enterPredicate being called with wrong drop container ( #13578 ) ( 60b4a58 ) drag-drop: rename cdkDrop to cdkDropList ( #13619 ) ( 160b688 ) ng-add: do not add theme file if existing theme is set up ( #13468 ) ( d1e59a2 ) schematics: template content exceeds max line length ( #13521 ) ( b0a1daf ) schematics: tree folder icons do not have enough contrast ( #13462 ) ( 4a0eb2b ) virtual-scroll: fix several small bugs ( #13597 ) ( 8cfaeea )","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#features_4","text":"schematics: prompt for name when generating component ( #13518 ) ( 9085de7 )","title":"Features"},{"location":"site-files/project/0-CHANGELOG/#700-rc1-2018-10-09","text":"","title":"7.0.0-rc.1 (2018-10-09)"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_14","text":"a11y: not being able to escape disabled focus trap using arrow keys ( #13133 ) ( 3c55caa ), closes #13132 autocomplete: closing parent overlay when pressing escape (Esc) ( #13413 ) ( 8dfd2ee ) bottom-sheet: dismiss bottom sheet on destroy ( #13120 ) ( ffa4a06 ) button-toggle: not setting proper border in vertical mode ( #13397 ) ( d58db5d ) button-toggle: remove extra focus indication added by firefox ( #13367 ) ( 3583913 ) checkbox: ripple not hiding after click/touch ( #13295 ) ( afb0352 ), closes #13291 chips: content not centered vertically on IE in some cases ( #13260 ) ( 4f43f5c ) chips: ripple not clipping correctly in safari ( #12244 ) ( eb95e61 ) chips: selectionChange event firing when value has not changed ( #13173 ) ( e8a6ea1 ) datepicker: change overlay position strategy so the calendar is kept on-screen ( #11607 ) ( f44d6db ) drag-drop: avoid interfering with element clicks ( #13152 ) ( 38e7dd2 ) expansion-panel: correct jump in panel sizing during animation ( #12509 ) ( a706c8c ) form-field: blue box inside focused native select on IE ( #13187 ) ( ab44d50 ) form-field: not updating outline when prefix/suffix is added or removed ( #13253 ) ( 0060bd7 ), closes #13251 grid-list: incorrectly laying out tiles for nested list ( #13086 ) ( 3e1cff0 ), closes #13074 icon: handle references for pages with base tag ( #12428 ) ( 9e5fd91 ), closes #9276 list: selection list not marking options as selected correctly when setting value with duplicates ( #13363 ) ( bef9a17 ) menu: incorrectly styling keyboard focus, if trigger is right clicked before opening ( #13136 ) ( 730e6a3 ) ng-add: allow using noop animations ( #13429 ) ( 15a1ab7 ) overlay: incorrectly calculating centered position on a scrolled page with pushing ( #13185 ) ( f5dd24a ), closes #11868 overlay: wait for panel to detach before removing panelClass ( #13199 ) ( 238aef0 ), closes #13189 paginator: icons and labels not centered vertically on IE ( #12495 ) ( fe3f37a ), closes #12491 schematics: @angular /material schematics not working ( #13406 ) ( 3f8ee74 ) schematics: name is required when generating the drag-drop schematic ( #13452 ) ( 4a9bbcb ) schematics: proper error if name is not specified ( #13379 ) ( 4a0b09a ) scrolling: viewport ruler resize event running inside the NgZone ( #12909 ) ( 707a7ee ), closes #12883 select: allow extra content to be projected after label in mat-optgroup ( #13396 ) ( cb5b15e ), closes #11489 select: handle home and end keys on closed select ( #13278 ) ( d6ba25f ) tabs: disabled tab link not preventing router navigation ( #10358 ) ( bf66d57 ), closes #10354 virtual-scroll: don't set both right and left on the content ( #13412 ) ( 6ee9149 ), closes #13231","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#features_5","text":"bottom-sheet: add injection token for default options ( #13172 ) ( 3de3851 ), closes #13149 datepicker: add ng-content to datepicker header ( #13236 ) ( 3fc0d36 ), closes #13212 schematics: create drag-drop schematic ( #13368 ) ( 72ccd8b )","title":"Features"},{"location":"site-files/project/0-CHANGELOG/#700-rc0-2018-10-02","text":"","title":"7.0.0-rc.0 (2018-10-02)"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_15","text":"autocomplete: dividers in list throwing off keyboard navigation ( #13224 ) ( 0886cef ), closes #13200 button: fix stroked button border color ( #13219 ) ( bfeb540 ) checkbox: clear tabindex from host element ( #13308 ) ( 845388c ) chips: set aria-invalid on chip input ( #13249 ) ( 311d786 ), closes #13205 common: account for async hammer loader when checking whether hammer is defined ( #12933 ) ( d15431b ) drag-drop: emitting incorrect index for horizontal list in rtl ( #13274 ) ( f3bb0c7 ) drag-drop: error on IE when customizing root element ( #13279 ) ( e1071f0 ) drag-drop: unable to return item to initial container within same drag sequence, if not connected to current drag container ( #13247 ) ( 0ac41a0 ), closes #13246 form-field: always use native input value to determine whether control is empty ( #13307 ) ( 10e6502 ), closes #13305 form-field: incorrect arrow color for native select ( #13046 ) ( 10b8353 ) form-field: native date/time input taller than text input ( #13321 ) ( 92a5f0e ), closes #13317 form-field: native select outline not reset on firefox ( #12967 ) ( 38e492f ) grid: fix mat-grid-tile position ( #12980 ) ( 966cf5f ) grid-list: exception thrown when rowHeight is set before first change detection run ( #13112 ) ( e7007a2 ), closes #13102 grid-list: throw error if invalid value is assigned for rowHeight ( #13254 ) ( 210f3f9 ), closes #13252 list: set aria-multiselectable on selection list ( #13325 ) ( 877ef5d ) overlay: connected overlay directive inputs not updating position strategy ( #13066 ) ( 1d8e9af ) paginator: getNumberOfPages off by one ( #10724 ) ( 016ba5c ), closes #10720 #10699 radio: clear tabindex from host element ( #13323 ) ( 5c0a061 ), closes #13311 #13308 schematics: addressForm: fix bad Validators definition and TSLint ( #13285 ) ( 267dd65 ) schematics: dashboard schematic fails parsing declaration in spec ( #13269 ) ( 543cb9f ) schematics: fix typo in table's datasource ( #13283 ) ( 0ccdfc8 ) schematics: nav schematic generates TSLint errors ( #13268 ) ( 8d25fd1 ) schematics: remove unnecessary semicolon in tree component ( #13284 ) ( 8558878 ) schematics: sidenav toolbar should use default background ( #13282 ) ( c454f7b ) schematics: table schematic not expanding full width ( #13234 ) ( 884762f ) schematics: toolbar in nav w/o z-index causes issues with dashboard ( #13270 ) ( d74e38c ) select: give native select a bigger clickable area ( #13228 ) ( 6da7d23 ) slide-toggle: clear tabindex from host element ( #13311 ) ( 119fafd ), closes #13308 snack-bar: button not centered inside snack bar on IE11 ( #13062 ) ( 4e05745 ) snackbar: move elevation style to snackbar theme ( #13273 ) ( 96e670f ) stepper: vertical step header labels not centered on IE ( #13262 ) ( 40fb5cb ) tooltip: custom gesture config not set up ( #12941 ) ( 1852563 ), closes #12940 #12917 tooltip: hiding and reopening for consecutive show calls ( #13326 ) ( b5001f6 )","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#features_6","text":"badge: allow badge to be disabled ( #13196 ) ( bfc1286 ), closes #13191 button-toggle: align with 2018 material design spec ( #12443 ) ( fd3eb6a ) overlay: add option to automatically dispose on navigation ( #12592 ) ( d48b1ba ), closes #12544 overlay: add support for swappable position strategies ( #12306 ) ( e0f3ae7 ) schematics: support for cdk ng add ( #13319 ) ( ac3f8c4 ) schematics: support for cdk ng-update . ( #13303 ) ( 1afddfb ) tabs: align with 2018 material design spec ( #12605 ) ( 0c5598c ) tree: support units different than px for indentation ( #12991 ) ( 590d294 )","title":"Features"},{"location":"site-files/project/0-CHANGELOG/#performance-improvements_2","text":"virtual-scroll: use auditTime instead of sampleTime ( #13131 ) ( c26dc74 )","title":"Performance Improvements"},{"location":"site-files/project/0-CHANGELOG/#update","text":"ripple: remove deprecated speed factor option ( #12258 ) ( a6c91bc )","title":"update"},{"location":"site-files/project/0-CHANGELOG/#breaking-changes_1","text":"ripple: deprecated [matRippleSpeedFactor] and baseSpeedFactor for the ripples have been removed. Use the new animation config instead.","title":"BREAKING CHANGES"},{"location":"site-files/project/0-CHANGELOG/#700-beta2-2018-09-20","text":"","title":"7.0.0-beta.2 (2018-09-20)"},{"location":"site-files/project/0-CHANGELOG/#highlights_1","text":"This release includes a number of changes to bring the components more in line with the 2018 Material Design update. If you are overriding the default styles, you may find that you need to tweak them to look right after these changes.","title":"Highlights"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_16","text":"card: better scaling for avatar image ( #13032 ) ( 19ce1a1 ) checkbox, slide-toggle: no margin if content is projected ( #12973 ) ( 4636a98 ), closes #4720 chips: arrow keys resetting focus to first chip ( #12987 ) ( 959c827 ) dialog: clean up open dialogs on destroy ( #12835 ) ( 4e15ba9 ) expansion: MatExpansionHeader transition animations ( #13088 ) ( 4a96539 ), closes #11990 #11990 #11990 #11990 #11990 #11990 #11990 #11990 form-field: Make labels show while printing ( #12766 ) ( e88271a ) table: incorrect padding and text alignment in rtl ( #12280 ) ( 2b89342 ), closes #12276","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#features_7","text":"button: align with 2018 material design spec ( #13083 ) ( 79801e0 ), closes #12537 #13011 card: align with 2018 material design spec ( #12731 ) ( 484dc8b ) checkbox: align with 2018 material design spec ( #12493 ) ( 95acccc ) chips: align with 2018 material design spec ( #12838 ) ( 3cc9c67 ) dialog: align with 2018 material design spec ( #12705 ) ( 00b7233 ) elevation: move elevation rules into theme stylesheets ( #11344 ) ( 9c075f5 ), closes #11343","title":"Features"},{"location":"site-files/project/0-CHANGELOG/#breaking-changes_2","text":"dialog: * The matDialogAnimations.slideDialog symbol has been renamed to matDialogAnimations.dialogContainer . * elevation: Because mat-elevation usages have been moved out of component stylesheets, users who have not invoked a theme mixin will not see any elevation shadows on Material components. However, users that have created a custom theme which lacks the elevation property will still see the default black shadows. Additionally, users who want to use themed elevations in their custom components can create their own shorthand mixin: @import '~@angular/material/theming'; $myTheme: ... @mixin my-elevation($zValue) { @include mat-theme-elevation($zValue, $myTheme); } and then invoke angular-material-theme with the $myTheme variable.","title":"BREAKING CHANGES"},{"location":"site-files/project/0-CHANGELOG/#700-beta1-2018-09-17","text":"","title":"7.0.0-beta.1 (2018-09-17)"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_17","text":"button-toggle: underlying input not disabled when group is disabled ( #11610 ) ( bd21f21 ), closes #11608 chips: default click action on chip being prevented ( #12856 ) ( ae3ce4a ), closes #9032 datepicker: allow calendar cell selection via the space key ( #13098 ) ( 5c4a334 ) drag-drop: DOM element not being returned to initial container on drop ( #12948 ) ( fb7bf90 ), closes #12944 drag-drop: dragging class not being applied on drop container ( #12921 ) ( ec0de52 ) drag-drop: incorrectly calculating index when sorting horizontally ( #13082 ) ( 664ef4c ), closes #13072 drag-drop: incorrectly calculating pointer position inside element, in some cases ( #13111 ) ( 22cd3ed ), closes #13107 drag-drop: incorrectly picking up transitions on non-transform properties ( #12966 ) ( 951add9 ) drag-drop: not dropping immediately for failed drag after a successful one ( #13097 ) ( 32a0010 ), closes #13091 drag-drop: text selection not disabled on safari if user drags out of the viewport ( #12864 ) ( 8ee5fb6 ) drawer: respect NoopAnimationsModule and @.disabled binding ( #12839 ) ( 23df492 ) expansion: disable all animations when using NoopAnimationsModule ( #12855 ) ( 3e22641 ), closes #10590 form-field: don't set up mutation observer on non-outline appearances ( #12976 ) ( cbfbade ) form-field: remove chevron from native multi-select ( #13009 ) ( b62343a ) grid-list: better handling of negative columns ( #12939 ) ( cfb83a0 ) input: do not focus input element twice ( #12851 ) ( 7d586e4 ), closes #12849 ng-update: do not throw if imports without named bindings are used ( #12866 ) ( #12984 ) ( fe64211 ), closes #11571 overlay: correct misspelled flexibleDiemsions property ( #12927 ) ( 5d1643a ), closes #12925 overlay: infinite loop when used together with zone-patch-rxjs ( #13081 ) ( c2e502c ), closes #12686 platform: wrap MSStream property detection as string to prevent Closure property renaming ( #13117 ) ( aef61eb ), closes #12223 portal: remove dependency on deprecated parentInjector ( #12986 ) ( f39e091 ) progress-bar: buffer background animation stuttering ( #13114 ) ( 2f2e116 ) ripple: ripples not being cleared if touch sequence is canceled ( #12936 ) ( 948e563 ) sidenav: not positioning correctly in rtl ( #12741 ) ( 9d3d95f ) snack-bar: dismiss snack bar on destroy ( #13042 ) ( 50be24b ) tabs: pagination state not updated when tab content changes ( #12911 ) ( a7de64a ), closes #12901 tooltip: not showing up on touch devices ( #12940 ) ( 722dfb3 ), closes #12917 tooltip: text fields not editable if tooltip is applied in safari ( #12959 ) ( 0389d12 ), closes #12953 tree: theming nested notes ( #12938 ) ( e24f24a ) typings: update typings to support more strict typings in RxJS 6.3.2 ( #12979 ) ( 0a25fca )","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#features_8","text":"list: add new mat-action-list ( #12415 ) ( 69fa762 ) menu: align with 2018 material design spec ( #12331 ) ( c812268 ) ng-add: add x-prompts to install schematics ( #13058 ) ( a5bc79c ) schematics: compatibility with Angular CLI 6.2.0 ( #13078 ) ( 714c205 ), closes #11438 select: align panel appearance and animation with 2018 material design spec ( #12975 ) ( 18d0fa8 ) stepper: Create MAT_STEPPER_GLOBAL_OPTIONS InjectionToken ( #11457 ) ( 9ab2c90 )","title":"Features"},{"location":"site-files/project/0-CHANGELOG/#breaking-changes_3","text":"overlay: The flexibleDiemsions property on CdkConnectedOverlay has been renamed to flexibleDimensions","title":"BREAKING CHANGES"},{"location":"site-files/project/0-CHANGELOG/#700-beta0-2018-08-30","text":"","title":"7.0.0-beta.0 (2018-08-30)"},{"location":"site-files/project/0-CHANGELOG/#highlights_2","text":"Support for drag and drop in @angular/cdk/drag-drop ! Support for virtual scrolling in @angular/cdk/scrolling ! You can now use a native select element in mat-form-field Updated visuals for 2018 Material Design update (in-progress, not all components are done) Note that schematics for v7 are still in-progress. You can view a beta version of the docs at https://beta-angular-material-io.firebaseapp.com.","title":"Highlights"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_18","text":"autocomplete: remove aria-owns attribute while closed ( #12333 ) ( f0a0ab1 ), closes #12332 autocomplete: reopening closed autocomplete when coming back to tab ( #12372 ) ( c2b488e ), closes #12337 autofill: avoid firing unnecessary event on initial render of input ( #12116 ) ( c2fc3f4 ) badge: apply view encapsulation attributes on badge element ( #12870 ) ( db1d51f ) badge: hide badges with no content ( #12239 ) ( 701a0dd ) bidi: default invalid directionality values to ltr ( #12396 ) ( e644350 ) breakpoints: emit only one event for adjacent breakpoint changes. ( #11007 ) ( 2830a64 ) button: allow for non-colored flat button ( #12550 ) ( 8c08bb1 ) button: allow transition for the button focus overlay for all buttons ( #12552 ) ( a080a79 ) button-toggle: clickable area not stretching when custom width is set ( #12642 ) ( ecf8b0d ), closes #8432 button-toggle: forward tabindex to underlying button ( #12538 ) ( 7dff5f8 ) button-toggle: set aria-disabled based on group disabled state ( #12828 ) ( 5969523 ) card: images in title-group overlapping content ( #12205 ) ( 89d16b2 ), closes #10031 card: incorrectly inverting inset divider in rtl ( #12285 ) ( fba4a93 ) cdk-text-field: prevent keyframes from getting stripped by LibSass ( #12567 ) ( 915590e ) checkbox: prevent error when disabling while focused ( #12327 ) ( c4cacce ), closes #12323 chips: chip list removing focus from first chip when adding through the input ( #12840 ) ( c3b2d4f ) chips: dynamic chip input placeholder changes not being propagated to form field ( #12422 ) ( e007c27 ), closes #11861 chips: focus indication not visible in high contrast mode ( #12431 ) ( bcf4c9f ) chips: focus not being restored correctly on chip removal when inside component with animations ( #12416 ) ( 5fb338b ), closes #12374 chips: focus not restored properly if chip has been removed by click ( #12788 ) ( 3da390e ), closes #12416 chips: form field not appearing as blurred when used without an input ( #12858 ) ( f82a94b ) chips: improved image scaling in avatar ( #12843 ) ( f6e787a ), closes #12660 chips: incorrectly handling disabled state ( #12659 ) ( 65ad6ab ), closes #11089 chips: losing focus if active chip is deleted ( #11910 ) ( e13bfe0 ) chips: support focusing first/last item using home/end ( #11892 ) ( 3723191 ) collections: align SelectionModel to changed naming ( #8286 ) ( 27e88c3 ) datepicker: able to open from readonly input using keyboard control ( #12880 ) ( 548d2b7 ) datepicker: add minDate and maxDate validation in demo-app ( #12531 ) ( 2b29c93 ) datepicker: input not picking up changes if datepicker is assigned after init ( #12546 ) ( 3299628 ) datepicker: multiple dialog open if the user holds down enter key ( #12238 ) ( 8e63656 ) datepicker: screenreaders report editable grid cells ( #12275 ) ( a2dcf21 ) datepicker-toggle: forward tabindex to underlying button ( #12461 ) ( 648eb4a ), closes #12456 expansion: respect parent accordion hideToggle binding ( #12725 ) ( 9c184ea ), closes #6529 expansion-panel: elevation transition not working ( #12860 ) ( ac8ed31 ) expansion-panel: focus lost if focused element is inside closing panel ( #12692 ) ( baf6419 ) expansion-panel: implement keyboard controls ( #12427 ) ( 32e5d72 ) form-field: allow for measuring outline gap when label is not in dom ( #12782 ) ( 21095f5 ) form-field: legacy ripple underline jumps in edge ( #12648 ) ( 70d1be8 ), closes #6351 form-field: outline gap not calculated when appearance is provided through DI ( #12767 ) ( 8e49388 ), closes #12765 form-field: remove outline gap for empty labels ( #12637 ) ( 3d4fc82 ) form-field: reset inputs not being reset on safari ( #12413 ) ( 4884dac ), closes #12408 form-field: unable to distinguish disabled form field in high contrast mode ( #12445 ) ( df2b371 ) form-field: update label gap for outline style ( #12555 ) ( 03527c6 ) grid-list: not picking up indirect descendants ( #12823 ) ( c04d2ae ), closes #12809 input: only monitor focus origin on browser platform ( #11604 ) ( 625f792 ) list: disable hover styling on touch devices ( #12520 ) ( 795c956 ) list: improved image scaling in avatar ( #12660 ) ( 9a59c2a ), closes #8131 live-announcer: avoid triggering a reflow when reading directive content ( #12638 ) ( 040f9db ) live-announcer: duplicate live element when coming in from the server ( #12378 ) ( a10bfa4 ), closes #11940 menu: changed after checked error when toggling quickly between triggers for same submenu ( #12209 ) ( b53b66a ) menu: collapse empty menu panel ( #12211 ) ( b23cecd ) menu: focus indication not visible in high contrast mode ( #12201 ) ( 56bce47 ) menu: menu content data being cleared when lazy-loaded content is reused between nested triggers ( #12476 ) ( 1e1751f ), closes #12467 menu: showing scrollbars on first open in Edge if item width is set ( #12141 ) ( 275de51 ) menu: throw better error when trying to open undefined menu ( #12688 ) ( c90dcfb ), closes #12649 moment-date-adapter: not returning utc date when parsing ( #12029 ) ( d431566 ) ng-add: do not incorrectly insert custom-theme into CSS files ( #12711 ) ( 51da6a6 ) ng-add: inserted dependencies should be sorted ( #12847 ) ( 0760dad ) ng-add: material version could not be determined ( #12751 ) ( a027ae5 ) ng-update: do not throw if imports without named bindings are used ( #12866 ) ( cef2e1e ), closes #11571 ng-update: form-field css name incorrectly updated ( #12768 ) ( 4830be8 ) ng-update: support parenthesized directive metadata ( #12314 ) ( c5b87da ) overlay: avoid same overlay being added to the keyboard event stack multiple times ( #12222 ) ( 45d6ae4 ) overlay: flexible overlay with push not handling scroll offset and position locking ( #11628 ) ( f8b70cd ) overlay: flexible overlay with push not handling scroll offset and position locking ( #12624 ) ( e765d8e ), closes #11365 paginator: inconsistently disabling tooltips between browsers ( #12539 ) ( 73a3d4a ) progress-bar: avoid error on SSR if pathname is undefined ( #12807 ) ( f3af763 ) progress-bar: generate correct url on server ( #12813 ) ( 787f31a ) progress-bar: incorrectly handling current path when using hash location strategy ( #12713 ) ( 5727eac ), closes #12710 progress-bar: query animation not working inside routes with named outlets ( #12350 ) ( b9c0d85 ), closes #12014 #12338 progress-bar: query state animation not working ( #11459 ) ( b40967f ), closes #11453 ripple: don't hide directive host in high contrast ( #12168 ) ( 944caf9 ) ripple: don't launch ripple for fake mouse events ( #11997 ) ( 4639a87 ) schematics: do not allow specifying native view encapsulation ( #12632 ) ( 0a823dd ) schematics: fix object iteration error in dashboard ( #12216 ) ( b589828 ) schematics: generated spec files not working ( #12842 ) ( c09da0b ), closes #12778 schematics: properly detect tsconfig files ( #12434 ) ( 08e6653 ) schematics: properly indent inline files ( #12317 ) ( ed4e082 ) schematics: tree schematic not working ( #12281 ) ( ba134f4 ) select: arrow position/animation for appearance=\"standard\" ( #12045 ) ( 58f3c54 ) select: pointing to non-existent element via aria-labelledby ( #12411 ) ( 3b7f0f1 ), closes #12405 select: skip disabled options when using ctrl + a ( #12553 ) ( 559b95e ), closes #12543 select,autocomplete: unable to set custom id on mat-option ( #11573 ) ( 29d5173 ), closes #11572 selection-list: do not allow toggling disabled options ( #12617 ) ( 4cfdb20 ), closes #12608 selection-list: proper styling not being applied when using mat-list-icon ( #12879 ) ( 7bc8670 ) sidenav: content jumping in rtl and blurry text on IE ( #12726 ) ( 4050002 ), closes #10026 sidenav: scrollable instance not exposed when explicitly specifying content element ( #11706 ) ( 441c98e ), closes #11517 #10884 slide-toggle: blended ripples do not match spec ( #12735 ) ( e148414 ) slide-toggle: fix font sizing for slide toggle to match other input methods ( #10688 ) ( 58c1c95 ) slide-toggle: invert the thumb and slide gesture in rtl ( #12284 ) ( 9a191b3 ) slide-toggle: prevent error when disabling while focused ( #12325 ) ( e273a7a ), closes #12323 slide-toggle: remove webkit tap highlight ( #12708 ) ( ba55d04 ) slide-toggle: respect primary palette of theme ( #12698 ) ( dad0ed0 ), closes #11854 slider: thumb label blending in with background in high contrast mode ( #12606 ) ( f1b65b6 ) snack-bar: prevent content from overriding configured aria-live message ( #12294 ) ( 0958cbb ) snackbar: wrap simple snackbar text in span ( #12599 ) ( ef0b84b ) stepper: focus lost if focus is inside stepper while changing step ( #12761 ) ( 8a7ca7f ) stepper: handle removing a step before the current one ( #11813 ) ( 82b35d0 ), closes #11791 stepper: improved alignment for step icons ( #12703 ) ( 37a7056 ), closes #12696 tab-group: focus change event not firing for keyboard navigation ( #12192 ) ( 1b7b8ab ) table: error if row definition is on an ng-container ( #12462 ) ( ef57919 ), closes #12460 table: errors when rendering table with sticky elements on the server ( #12095 ) ( 7e67fe9 ), closes #12094 table: extra elements throwing off table alignment ( #12645 ) ( 3b70d20 ), closes #11165 table: unable to sort large numbers in strings ( #12052 ) ( adda21f ) tabs: animation running after initialization ( #12549 ) ( 4c2f619 ) tabs: changed after checked error when using isActive in view ( #12206 ) ( 499458c ), closes #12197 tabs: content animation in RTL not working (chrome) ( #12215 ) ( c6c68a6 ) tabs: disable focus overlay for touch focus ( #12249 ) ( 1b19b93 ), closes #12247 tabs: enable keyboard wrapping and mark disabled tabs ( #12218 ) ( 7f8fd9f ) tabs: only target direct descendants with mat-stretch-tabs ( #12198 ) ( 592af48 ), closes #12196 tabs: reposition tab body on direction change ( #12229 ) ( 49ec9ca ) tabs: ripple overflow in internet explorer ( #12036 ) ( f35a314 ) tabs: selectedIndex being overwritten if tabs are being added / removed ( #12245 ) ( 569c221 ) tooltip: interfering with native drag drop ( #12200 ) ( 19f64ad ) tooltip: opening after click on android ( #12250 ) ( 2a49532 ), closes #12223 tree: include constructors on MatTree classes to allow es6 builds ( #12556 ) ( 5623c5b ) ensure components work with ES2015 in jit mode. ( #12759 ) ( 2adced1 ), closes /github.com/angular/angular/pull/22356#issuecomment-387756794 #9329 explictly declare types for mixin base classes ( #12876 ) ( 515912b )","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#features_9","text":"autocomplete: add updatePosition() method to MatAutocompleteTrigger ( #11495 ) ( 3ce5b1f ) autocomplete: align with 2018 material design ( #12570 ) ( b9651df ) bottom-sheet: align with 2018 material design spec ( #12625 ) ( ceb2051 ) bottom-sheet: allow autofocusing to be disabled ( #12193 ) ( d6ca3ec ) breakpoint-observer: Emit matching state of each query provided ( #12506 ) ( 5a560b2 ) cdk-scrollable: add methods to normalize scrolling in RTL ( #12607 ) ( 028746a ) chips: allow set in separatorKeyCodes ( #12477 ) ( 170665a ) datepicker: align with 2018 material design spec ( #12693 ) ( 32456e3 ) dialog: allow focus restoration to be disabled ( #12519 ) ( d5c5f31 ) drag-drop: new feature! Too many commits to list. expansion: add animation events for expansion panels ( #12412 ) ( f6b1002 ) expansion-panel: align with 2018 material design spec ( #12670 ) ( ccbae0b ) focus-monitor: support monitoring ElementRef ( #12712 ) ( 932211e ) form-field: support native select element ( #12707 ) ( 4e41985 ) ng-add: respect project default inlineStyle, inlineTemplate and spec option value ( #12888 ) ( 8831a7a ), closes #11874 ng-add: respect project default style extension ( #12618 ) ( 5144aa7 ) ng-add: set up gestures in CLI projects ( #12734 ) ( b919a48 ) overlay: add the ability to set a panelClass based on the current connected position ( #12631 ) ( 765990e ) overlay: support setting panelClass on cdkConnectedOverlay ( #12380 ) ( d7c734c ) paginator: allow form field color to be customized ( #12834 ) ( e18a99f ) portal: allow for custom ComponentFactoryResolver to be associated with portal ( #12677 ) ( 136f5dd ), closes #9712 progress-bar: add transitionend output for value animation ( #12409 ) ( 6a1a707 ) progress-bar: align with 2018 material design spec ( #12394 ) ( b2247f8 ) radio: align with 2018 material design spec ( #12299 ) ( dda8122 ) ripple: no longer require additional setup when using MatRipple directive ( #11913 ) ( d796776 ) ripple: support multi-touch ( #12643 ) ( 8fdc2cf ) schematics: new tree schematic ( #11739 ) ( 1540e2f ) select: allow for option sorting logic to be customized ( #11890 ) ( d54a75a ) sidenav: align with 2018 material design spec ( #12569 ) ( 1f88bd7 ) slide-toggle: align with 2018 material design spec ( #12419 ) ( 5f2e077 ) snack-bar: align with 2018 material design spec ( #12634 ) ( 1e754a0 ) tooltip: align with 2018 material design spec ( #12310 ) ( 4e358c3 ) virtual-scroll: new feature! Too many commits to list.","title":"Features"},{"location":"site-files/project/0-CHANGELOG/#performance-improvements_3","text":"overlay: remove detached overlays from the DOM ( #12414 ) ( 71886f8 ), closes #12341 table: leaking reference through mostRecentCellOutlet ( #12269 ) ( 34a7e38 ), closes #12259 tree: leaking reference through mostRecentTreeNode ( #12334 ) ( 60b9928 ), closes #12269 virtual-scroll: improve scrolling performance ( #12490 ) ( 4a9fe87 )","title":"Performance Improvements"},{"location":"site-files/project/0-CHANGELOG/#breaking-changes_4","text":"sidenav: the constructor signature of the MatDrawerContent and MatSidenavContent has changed.","title":"BREAKING CHANGES"},{"location":"site-files/project/0-CHANGELOG/#647-kryptonite-kombucha-2018-08-29","text":"","title":"6.4.7 kryptonite-kombucha (2018-08-29)"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_19","text":"autocomplete: reopening closed autocomplete when coming back to tab ( #12372 ) ( 8617423 ), closes #12337 badge: apply view encapsulation attributes on badge element ( #12870 ) ( dc8cf46 ) button-toggle: clickable area not stretching when custom width is set ( #12642 ) ( 70aca02 ), closes #8432 button-toggle: set aria-disabled based on group disabled state ( #12828 ) ( 3f67cc5 ) card: images in title-group overlapping content ( #12205 ) ( 22ae587 ), closes #10031 chips: chip list removing focus from first chip when adding through the input ( #12840 ) ( 0e60fb8 ) chips: focus not being restored correctly on chip removal when inside component with animations ( #12416 ) ( d08d8bc ), closes #12374 chips: focus not restored properly if chip has been removed by click ( #12788 ) ( 59a7f28 ), closes #12416 chips: form field not appearing as blurred when used without an input ( #12858 ) ( be1ba9c ) chips: improved image scaling in avatar ( #12843 ) ( 130806b ), closes #12660 chips: incorrectly handling disabled state ( #12659 ) ( 15e7f74 ), closes #11089 chips: support focusing first/last item using home/end ( #11892 ) ( b735e48 ) collections: align SelectionModel to changed naming ( #8286 ) ( 4b30539 ) datepicker: multiple dialog open if the user holds down enter key ( #12238 ) ( c807d74 ) datepicker: screenreaders report editable grid cells ( #12275 ) ( 3328808 ) datepicker-toggle: forward tabindex to underlying button ( #12461 ) ( 09302b6 ), closes #12456 expansion: respect parent accordion hideToggle binding ( #12725 ) ( 803f73f ), closes #6529 expansion-panel: focus lost if focused element is inside closing panel ( #12692 ) ( 3596e9d ) expansion-panel: implement keyboard controls ( #12427 ) ( 04d5955 ) form-field: allow for measuring outline gap when label is not in dom ( #12782 ) ( 9579212 ) form-field: legacy ripple underline jumps in edge ( #12648 ) ( 34d91c7 ), closes #6351 form-field: outline gap not calculated when appearance is provided through DI ( #12767 ) ( 8b9d283 ), closes #12765 form-field: remove outline gap for empty labels ( #12637 ) ( a326ee0 ) grid-list: not picking up indirect descendants ( #12823 ) ( 4f53e4f ), closes #12809 input: only monitor focus origin on browser platform ( #11604 ) ( a30e909 ) list: improved image scaling in avatar ( #12660 ) ( 70cb0a2 ), closes #8131 live-announcer: avoid triggering a reflow when reading directive content ( #12638 ) ( 92f53ce ) menu: throw better error when trying to open undefined menu ( #12688 ) ( f732059 ), closes #12649 progress-bar: avoid error on SSR if pathname is undefined ( #12807 ) ( bb9cfec ) progress-bar: generate correct url on server ( #12813 ) ( b0555b5 ) progress-bar: incorrectly handling current path when using hash location strategy ( #12713 ) ( da3b5e0 ), closes #12710 ripple: don't launch ripple for fake mouse events ( #11997 ) ( 266a159 ) select: pointing to non-existent element via aria-labelledby ( #12411 ) ( 12c6f81 ), closes #12405 select: skip disabled options when using ctrl + a ( #12553 ) ( 2349166 ), closes #12543 select,autocomplete: unable to set custom id on mat-option ( #11573 ) ( 1f78d8a ), closes #11572 sidenav: content jumping in rtl and blurry text on IE ( #12726 ) ( 81e0542 ), closes #10026 slide-toggle: remove webkit tap highlight ( #12708 ) ( 3ce4e8d ) slider: thumb label blending in with background in high contrast mode ( #12606 ) ( a4a79ea ) stepper: focus lost if focus is inside stepper while changing step ( #12761 ) ( fc537af ) stepper: handle removing a step before the current one ( #11813 ) ( 0fcdae4 ), closes #11791 stepper: improved alignment for step icons ( #12703 ) ( 41d0196 ), closes #12696 table: errors when rendering table with sticky elements on the server ( #12095 ) ( 8956d1d ), closes #12094 table: extra elements throwing off table alignment ( #12645 ) ( 13f1c6e ), closes #11165 tabs: disable focus overlay for touch focus ( #12249 ) ( d3af441 ), closes #12247 tabs: only target direct descendants with mat-stretch-tabs ( #12198 ) ( 6bb0ffe ), closes #12196 tooltip: opening after click on android ( #12250 ) ( a6b8a06 ), closes #12223 ensure all components work with ES2015 in jit mode. ( #12759 ) ( 0c4a1b4 ), closes #12760 , #9329","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#646-argon-aftershave-2018-08-20","text":"","title":"6.4.6 argon-aftershave (2018-08-20)"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_20","text":"cdk-text-field: prevent keyframes from getting stripped by LibSass ( #12567 ) ( 4180e72 ) form-field: update label gap for outline style ( #12555 ) ( ffeb779 ) progress-bar: query state animation not working ( #11459 ) ( 948f655 ), closes #11453 selection-list: do not allow toggling disabled options ( #12617 ) ( 3c1995d ), closes #12608 tabs: changed after checked error when using isActive in view ( #12206 ) ( 75632bd ), closes #12197","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#645-mithril-magnet-2018-08-13","text":"","title":"6.4.5 mithril-magnet (2018-08-13)"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_21","text":"button: allow transition for the button focus overlay for all buttons ( #12552 ) ( 0a56cf7 ) button-toggle: forward tabindex to underlying button ( #12538 ) ( dcae875 ) breakpoint-observer: Emit matching state of each query provided ( #12506 ) ( cb3f760 ) datepicker: input not picking up changes if datepicker is assigned after init ( #12546 ) ( d10a6c4 ) drag-drop: add support for sorting animations ( #12530 ) ( 7d0e69b ) drag-drop: ignore self inside connectedTo ( #12626 ) ( 7e7e873 ) drag-drop: remove circular dependencies ( #12554 ) ( fd70c07 ) list: disable hover styling on touch devices ( #12520 ) ( 6048f6f ) overlay: flexible overlay with push not handling scroll offset and position locking ( #11628 ) ( a192907 ) paginator: inconsistently disabling tooltips between browsers ( #12539 ) ( 35bdd00 ) snackbar: wrap simple snackbar text in span ( #12599 ) ( 11b97e4 ) tabs: animation running after initialization ( #12549 ) ( 2798084 ) tree: include constructors on MatTree classes to allow es6 builds ( #12556 ) ( 5b0eed3 )","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#643-monelite-meeple-2018-08-07","text":"","title":"6.4.3 monelite-meeple (2018-08-07)"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_22","text":"bidi: default invalid directionality values to ltr ( #12396 ) ( 58361f1 ) checkbox: prevent error when disabling while focused ( #12327 ) ( 0c746c1 ), closes #12323 chips: dynamic chip input placeholder changes not being propagated to form field ( #12422 ) ( 5053532 ), closes #11861 chips: focus indication not visible in high contrast mode ( #12431 ) ( 3652707 ) drag-drop: account for transition-delay when waiting for the animation to finish ( #12466 ) ( 3580fb5 ) form-field: reset inputs not being reset on safari ( #12413 ) ( 952b553 ), closes #12408 form-field: unable to distinguish disabled form field in high contrast mode ( #12445 ) ( 212bd0b ) live-announcer: duplicate live element when coming in from the server ( #12378 ) ( bf9bc0d ), closes #11940 menu: menu content data being cleared when lazy-loaded content is reused between nested triggers ( #12476 ) ( 747231a ), closes #12467 slide-toggle: prevent error when disabling while focused ( #12325 ) ( 80f6929 ), closes #12323 table: error if row definition is on an ng-container ( #12462 ) ( 39d40f3 ), closes #12460","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#performance-improvements_4","text":"overlay: remove detached overlays from the DOM ( #12414 ) ( 40d8ae4 ), closes #12341","title":"Performance Improvements"},{"location":"site-files/project/0-CHANGELOG/#642-chalk-window-2018-07-30","text":"","title":"6.4.2 chalk-window (2018-07-30)"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_23","text":"autocomplete: remove aria-owns attribute while closed ( #12333 ) ( 2122b18 ), closes #12332 card: incorrectly inverting inset divider in rtl ( #12285 ) ( 8a2dc60 ) progress-bar: query animation not working inside routes with named outlets ( #12350 ) ( 0c526d3 ), closes #12014 #12338 snack-bar: prevent content from overriding configured aria-live message ( #12294 ) ( b46689e ) ng-update: support parenthesized directive metadata ( #12314 ) ( 66416f5 )","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#performance-improvements_5","text":"table: leaking reference through mostRecentCellOutlet ( #12269 ) ( 7c8e892 ), closes #12259 tree: leaking reference through mostRecentTreeNode ( #12334 ) ( b6f7205 ), closes #12269","title":"Performance Improvements"},{"location":"site-files/project/0-CHANGELOG/#641-elm-electrode-2018-07-23","text":"","title":"6.4.1 elm-electrode (2018-07-23)"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_24","text":"autofill: avoid firing unnecessary event on initial render of input ( #12116 ) ( 1fb1fab ) badge: hide badges with no content ( #12239 ) ( 1e847f1 ) chips: losing focus if active chip is deleted ( #11910 ) ( 646e378 ) drag-drop: disable text selection on draggable element ( #12204 ) ( 7a04609 ) drag-drop: make CDK_DROP_CONTAINER public ( #12214 ) ( b9cece4 ) drag-drop: unable to drag last item back into initial container ( #12261 ) ( 3e0e3c5 ) menu: collapse empty menu panel ( #12211 ) ( aed3993 ) menu: focus indication not visible in high contrast mode ( #12201 ) ( 6fb6216 ) menu: showing scrollbars on first open in Edge if item width is set ( #12141 ) ( ff53295 ) moment-date-adapter: not returning utc date when parsing ( #12029 ) ( 0304ac1 ) overlay: avoid same overlay being added to the keyboard event stack multiple times ( #12222 ) ( e587f4b ) ripple: don't hide directive host in high contrast ( #12168 ) ( efedc9b ) schematics: fix object iteration error in dashboard ( #12216 ) ( f2acb51 ) slide-toggle: invert the thumb and slide gesture in rtl ( #12284 ) ( fe193f5 ) tab-group: focus change event not firing for keyboard navigation ( #12192 ) ( 48ece27 ) table: unable to sort large numbers in strings ( #12052 ) ( dd31521 ) tabs: content animation in RTL not working (chrome) ( #12215 ) ( f700897 ) tabs: enable keyboard wrapping and mark disabled tabs ( #12218 ) ( 0e03aae ) tabs: reposition tab body on direction change ( #12229 ) ( 4ac1be3 ) tabs: ripple overflow in internet explorer ( #12036 ) ( 09f439a ) tabs: selectedIndex being overwritten if tabs are being added / removed ( #12245 ) ( 641ec85 ) tooltip: interfering with native drag drop ( #12200 ) ( 8a4f2c3 )","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#640-dimeritium-dandelion-2018-07-16","text":"","title":"6.4.0 dimeritium-dandelion (2018-07-16)"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_25","text":"a11y: allow ListKeyManager wrapping to be disabled ( #11920 ) ( e9e44f6 ) a11y: clear duplicate AriaDescriber container coming in from the server ( #11900 ) ( b041f3f ) autocomplete: don't override native autocomplete attribute ( #11926 ) ( 88efb7e ) autocomplete: error when typing in input with disabled autocomplete and no panel ( #11881 ) ( 6b1a672 ), closes #11876 autocomplete: reposition the panel when the amount of options changes ( #4469 ) ( 2b80dbf ) bottom-sheet: close on page navigation ( #12106 ) ( 5c6f25e ) button: don't show hover overlay on devices that don't support hovering ( #12030 ) ( 947c29a ), closes #12022 button: not resetting all outlines on firefox ( #11911 ) ( 85711aa ) button: unable to set a custom tabindex on a link button ( #12042 ) ( cb6c621 ), closes #12041 button-toggle: allow event bubbling for toggle button clicks ( #11951 ) ( 5e16682 ) button-toggle: parent margin and padding being propagated to underlying button ( #11993 ) ( 3bf10f9 ), closes #11976 card: don't override vertical divider styles ( #11899 ) ( 2d11588 ) checkbox: fix checkbox animation when moved between view containers ( #10589 ) ( fbccfd4 ) chips: ripples still showing up when globally disabled ( #11918 ) ( 69a7f7c ) datepicker: all cells being read out as selected ( #12006 ) ( 32da038 ) datepicker: calendar input changes not being propagated on child views ( #12004 ) ( b1d4fe1 ), closes #11737 datepicker: set role on datepicker popup and aria-haspopup on the datepicker toggle ( #12008 ) ( 57b066a ) datepicker: showing dot in high contrast mode after popup has closed ( #12099 ) ( 6a472eb ) expansion-panel: disable hover highlight on non-hover devices ( #12080 ) ( 25eb43f ), closes #12030 focus-monitor: allow native focus options to be passed through focusVia ( #11962 ) ( 4a02bb1 ) focus-origin: focus origin sometimes invalid in firefox 57 ( #8669 ) ( a1aa9e7 ), closes #6984 focus-trap: not attaching correctly if element is not in the DOM on init ( #7665 ) ( d64f94d ) form-field: clear safari autofill icons ( #12137 ) ( 04934b4 ) form-field: label gap not being calculated when switching to outline dynamically ( #11658 ) ( d75fa75 ), closes #11653 form-field: placeholder not hiding if -webkit-text-fill-color is used ( #12076 ) ( cc5dfb8 ), closes #12074 icon: clearing all content when inserting a new SVG ( #11956 ) ( 8280a76 ) icon: reverse for loop when removing child nodes from mat-icon ( #12078 ) ( dd6aec6 ) menu: scrollable menu not scrolled to top when opened for the first time ( #11859 ) ( 742c226 ) overlay: justifyContent center ignored when direction is RTL ( #11877 ) ( 415c956 ) overlay: account for virtual keyboard offset on mobile devices ( #12119 ) ( a248c18 ), closes #6341 overlay: clear timeout if the backdrop transition completes early ( #11938 ) ( 1a31c4e ) overlay: don't dispatch key events to overlays that don't handle them ( #11810 ) ( c3fdc32 ) overlay: remove panelClass when the overlay is detached ( #12142 ) ( 79bacf2 ), closes #12099 progress-bar: query animation not working on safari ( #12014 ) ( 49119ed ) progress-spinner: circle not rendering correctly when switching modes in Safari ( #12151 ) ( 623cd3d ), closes #12140 radio: circle not being greyed out when disabled ( #12127 ) ( 85b8f32 ), closes #12125 ripple: remove webkit touch highlights from ripple containers ( #12082 ) ( 8e2ff1f ) schematic: parse5 v5.0.0 requires different parse options ( #12028 ) ( 118344e ), closes #12027 schematics: add parse5 dep ( #11647 ) ( 2330c8b ) select: blank option label throwing off alignment ( #11994 ) ( 45b949a ), closes #11969 select: not resuming keyboard selection after clicking on single-select option ( #11882 ) ( 195665f ) select: reset option being marked as selected ( #11934 ) ( d88e021 ) select: support ctrl+a shortcut for multi-select ( #11799 ) ( d5de711 ) selection-list: disabling list doesn't disable ripples of options ( #11955 ) ( d3212a6 ) selection-list: form control disable locks disabled property ( #12113 ) ( fcc8875 ), closes #12107 sidenav: continuously hitting zone when using autosize option ( #12067 ) ( 330176d ), closes #11231 #11986 #11215 sidenav: remove margin from content instead of setting zero ( #11986 ) ( 444fb38 ) slide-toggle: no color demarcation in high contrast black mode ( #12150 ) ( b5fd6de ) slide-toggle: not updating model from toggle method ( #11846 ) ( fc15fa2 ) slider: track not being rendered under some conditions when using a thumb label ( #12079 ) ( d4623ff ), closes #12071 sort: arrow indicator not visible in high contrast mode ( #12159 ) ( eb6c456 ) sort: arrow visible while parent row is being animated ( #11827 ) ( c59abc6 ) stepper: unable to set aria-label on step ( #11989 ) ( ae39535 ), closes #11898 tab-nav-bar: ripples still showing up when globally disabled ( #11865 ) ( fc1d1a4 ) tabs: don't fire change event when amount of tabs changes ( #12097 ) ( 0186a03 ), closes #12084 tabs: don't show focus indication for mouse focus ( #11194 ) ( 89cad3f ), closes #11184 tabs: maintain selected tab when new tabs are added or removed ( #9132 ) ( 78f556a ) tabs: unable to distinguish disabled tab in high contrast mode ( #12160 ) ( 98b9ed1 ) tabs: unable to set aria-label or aria-labelledby on tab ( #11898 ) ( bd3d085 ) toolbar: deprecate unused landscape row-height variable ( #12129 ) ( 6314d15 ) tree: define CdkTree before CdkTreeNode to prevent errors in JIT ( #11870 ) ( 4166d16 ) parse5 not listed as dependency for material ( #11981 ) ( e0bbe07 ) sanity checks throwing an error if scripts are set in the head ( #12068 ) ( c134026 ), closes #12026","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#features_10","text":"autocomplete: allow panel to have a width value of auto ( #11879 ) ( 8a5713e ) docs: show additional type aliases in docs. ( #11901 ) ( 637ef83 ) list: allow avatar in selection list options ( #10316 ) ( 20cbdba ) moment-dateadapter: add option to create utc dates ( #11336 ) ( 9a85b9b ) overlay: expose keydown events on the opened overlay ( #11867 ) ( a831bf6 ) slider: support two-way binding for value ( #12003 ) ( de107b7 ) tree: support array of data as children in nested tree ( #10886 ) ( 825d35c ) support lazy-loading HammerJS w/ Angular 6.1 ( #11960 ) ( eed6110 )","title":"Features"},{"location":"site-files/project/0-CHANGELOG/#633-chrome-tarantula-2018-07-09","text":"","title":"6.3.3 chrome-tarantula (2018-07-09)"},{"location":"site-files/project/0-CHANGELOG/#highlights_3","text":"In the next minor version we will remove the beta versions of Angular 6 as valid dependency versions. This is a change that we intended to make when moving out of beta but was accidentally overlooked. Please note that versions prior to beta.8 don't work properly even today, as they do not have all of the changes we depend on related to tree-shakeable providers. We have added a cdk-experimental package for drag drop. It's not ready for prime time yet, but if you're feeling adventurous and want to give it a spin, feel free!","title":"Highlights"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_26","text":"tabs: don't show focus indication for mouse focus ( #11194 ) ( 1a83bc0 ), closes #11184","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#632-ruby-robot-2018-07-02","text":"","title":"6.3.2 ruby-robot (2018-07-02)"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_27","text":"aria-describer: clear duplicate container coming in from the server ( #11900 ) ( 31c8f6b ) autocomplete: don't override native autocomplete attribute ( #11926 ) ( ee9ddfb ) autocomplete: reposition the panel when the amount of options changes ( #4469 ) ( a7c4d0c ) button: not resetting all outlines on firefox ( #11911 ) ( df80dc6 ) button-toggle: allow event bubbling for toggle button clicks ( #11951 ) ( 79415c4 ) button-toggle: emit change event when button is clicked ( #11886 ) ( 828b3c0 ) button-toggle: use native button and aria-pressed for button-toggle ( #10990 ) ( b959e18 ) card: don't override vertical divider styles ( #11899 ) ( 8a9a8bc ) checkbox: fix checkbox animation when moved between view containers ( #10589 ) ( 0244afc ) chips: ripples still showing up when globally disabled ( #11918 ) ( 8d6a9ae ) focus-monitor: allow native focus options to be passed through focusVia ( #11962 ) ( 8f3b316 ) focus-trap: not attaching correctly if element is not in the DOM on init ( #7665 ) ( 80d9a9a ) GlobalPositionStrategy: justifyContent center ignored when direction is RTL ( #11877 ) ( 6b1f703 ) icon: clearing all content when inserting a new SVG ( #11956 ) ( 96b389c ) list-key-manager: allow withWrap to be disabled ( #11920 ) ( ab14539 ) menu: panel positions not changing if position is updated after first open ( #11707 ) ( 671ad82 ), closes #11668 menu: scrollable menu not scrolled to top when opened for the first time ( #11859 ) ( 548266b ) moment-dateadapter: add option to create utc dates ( #11336 ) ( 3acd2a4 ) overlay: clear timeout if the backdrop transition completes early ( #11938 ) ( c55c0e1 ) overlay: don't dispatch key events to overlays that don't handle them ( #11810 ) ( 2433439 ) overlay: explicitly implement OverlayReference. ( #11824 ) ( 3e99c46 ) progress-spinner: create internal default to force animations to always be on ( #11462 ) ( 11f3993 ) schematics: add parse5 dep ( #11647 ) ( 42dd824 ) schematics: error in generated unit test ( #11884 ) ( 0e5b30e ) select: don't blur label when trigger is blurred while the panel is opened ( #11537 ) ( 6c9c3fe ) select: not resuming keyboard selection after clicking on single-select option ( #11882 ) ( a3dba76 ) select: reset option being marked as selected ( #11934 ) ( cd32d78 ) select: support ctrl+a shortcut for multi-select ( #11799 ) ( 11d7080 ) selection-list: disabling list doesn't disable ripples of options ( #11955 ) ( 4ac64da ) sidenav: remove margin from content instead of setting zero ( #11986 ) ( 82016c2 ) default config check is not checking test builder ( #11816 ) ( c36e6f3 ) parse5 not listed as dependency for material ( #11981 ) ( ce90bed ) slide-toggle: not updating model from toggle method ( #11846 ) ( e69cf76 ) sort: arrow visible while parent row is being animated ( #11827 ) ( de13ec9 ) tab-nav-bar: ripples still showing up when globally disabled ( #11865 ) ( 4f3cbfe ) table: use solid color for sorting arrow ( #11533 ) ( d083d76 ), closes #11340 tabs: maintain selected tab when new tabs are added or removed ( #9132 ) ( 1e164b6 ) tabs: unable to set aria-label or aria-labelledby on tab ( #11898 ) ( 8e44f89 ) tree: fix dynamic tree example and demo not closing children ( #11148 ) #11728 ( 128e2a0 )","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#631-string-sole-2018-06-26","text":"","title":"6.3.1 string-sole (2018-06-26)"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_28","text":"button-toggle: emit change event when button is clicked ( #11886 ) ( 828b3c0 ) button-toggle: use native button and aria-pressed for button-toggle ( #10990 ) ( b959e18 ) menu: panel positions not changing if position is updated after first open ( #11707 ) ( 671ad82 ), closes #11668 overlay: explicitly implement OverlayReference. ( #11824 ) ( 3e99c46 ) progress-spinner: create internal default to force animations to always be on ( #11462 ) ( 11f3993 ) select: don't blur label when trigger is blurred while the panel is opened ( #11537 ) ( 6c9c3fe ) table: use solid color for sorting arrow ( #11533 ) ( d083d76 ), closes #11340 tree: fix dynamic tree example and demo not closing children ( #11148 ) #11728 ( 128e2a0 )","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#630-tourmaline-transom-2018-06-18","text":"","title":"6.3.0 tourmaline-transom (2018-06-18)"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_29","text":"autocomplete: model not being updated when typing in input with disabled autocomplete ( #11695 ) ( 429d3bc ), closes #11678 autofill: listen for animation events outside the zone, but emit autofill events inside ( #11798 ) ( 48dda50 ) badge: remove badge margins ( #11599 ) ( f042068 ), closes #11596 badge, tooltip: Add A11yModule ( #11586 ) ( 75d116d ) checkbox: high contrast accessibility improvements ( #11633 ) ( 6220b72 ), closes #11623 datepicker: inconsistent arrow color between popup and touch modes ( #11535 ) ( bb297c9 ) datepicker: make date range aria-live and fix active date logic ( #11144 ) ( 8063c26 ) dialog: inconsistently resetting dimensions ( #11723 ) ( e95623d ) dialog: not closing correctly when detached externally ( #11516 ) ( be1b5e6 ) expansion: expansion panel blending in with background in high contrast mode ( #11659 ) ( 8842fb2 ) form-field: fix wrong underline color in error state ( #11447 ) ( 3681ddf ), closes #11436 form-field: inaccessible in high contrast mode ( #11736 ) ( 0a39595 ), closes #6257 #6383 #9009 icon: IE/Edge ignoring style tags inside inline SVG ( #11531 ) ( 555d8f4 ), closes #11458 menu: reintroduce panel position classes ( #11612 ) ( 703da89 ), closes #11597 menu: toggle aria-expanded attribute on menu trigger ( #11751 ) ( bf88702 ) overlay: flexible overlay with push not handling scroll offset and position locking ( #11421 ) ( 55aaa03 ) overlay: global overlay incorrectly handling left/right position when RTL is set on body ( #11412 ) ( 2a51565 ), closes #11393 overlay: unable to reset overlay size properties to initial value ( #11592 ) ( ba4f2af ) paginator: page size selections being truncated with outline and fill appearances ( #11722 ) ( 255c10a ), closes #11681 progress-bar: not usable in high contrast mode ( #11651 ) ( ff78ade ), closes #11623 progress-spinner: animation not working when default size is set via token ( #11688 ) ( 7c1db46 ), closes #11687 schematics: add app prefix to components ( #11738 ) ( 84634cc ) schematics: remove temp path #11198 ( #11424 ) ( b349de3 ) scrolling: scrollable elementScrolled stream not being completed on destroy ( #11518 ) ( 9ab6cd0 ) select: disable all animations when using NoopAnimationsModule ( #11594 ) ( fa60fe4 ), closes #10590 select: handle null values in multi-select ( #11792 ) ( dd8c807 ) select: inconsistent openedChange event dispatched between browsers ( #11461 ) ( 4ef9cb0 ) select: label not being read out when using mat-label in mat-form-field ( #11710 ) ( e349fe4 ) select: multi-select checkbox not having an outline in high contrast mode ( #11667 ) ( 082efa3 ) select: unable to use the MatOption select/deselect API to toggle options ( #11528 ) ( 81537af ), closes #9314 selection-list: support selecting all via ctrl + a ( #11502 ) ( e6d9494 ) sidenav: scrollable instance not exposed when explicitly specifying content element ( #11517 ) ( 436ac7d ), closes #10884 slider: value not being rounded when using keyboard and decimal step ( #11574 ) ( 61f0f2a ), closes #10951 stepper: reading out wrong amount of options with NVDA on Firefox ( #11711 ) ( 56e703f ), closes #11694 table: minor styling fix to expandable rows ( #11569 ) ( 3d6f326 ) tabs: Add role to mat-tab-nav-bar and mat-tab-link ( #11410 ) ( fd23c02 ) tabs: Set initial ink bar width as 0 width ( #11585 ) ( c977763 ) tabs: tab position and amount of tabs not being read out by screen reader ( #11694 ) ( 260afcf ), closes #11369 tabs: update mat-tab-link to set aria-current when active ( #11409 ) ( 103acc4 ) tooltip: don't open for mouse and touch focus ( #10728 ) ( 74f4364 ) tooltip: long continuous strings overflowing tooltip container ( #11363 ) ( 2786b34 )","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#features_11","text":"table: support sticky headers, footers, and columns ( #11483 ) ( edbbc1b ) bottom-sheet: switch to providedIn syntax ( 59554c4 ) collections: add isMultipleSelection function to SelectionModel ( #11560 ) ( 0675e05 ) schematics: add address form schematic ( #11425 ) ( 9b80a4c ) snackbar: switch to providedIn syntax ( a21a4f2 )","title":"Features"},{"location":"site-files/project/0-CHANGELOG/#621-crystal-caribou-2018-06-04","text":"","title":"6.2.1 crystal-caribou (2018-06-04)"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_30","text":"datepicker: inconsistent arrow color between popup and touch modes ( #11535 ) ( f974324 ) dialog: not closing correctly when detached externally ( #11516 ) ( bbb1d39 ) tooltip: don't open for mouse and touch focus ( a003b9a ), closes #10709 tooltip: long continuous strings overflowing tooltip container ( #11363 ) ( c5f1293 )","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#620-bamboo-shampoo-2018-05-29","text":"","title":"6.2.0 bamboo-shampoo (2018-05-29)"},{"location":"site-files/project/0-CHANGELOG/#highlights_4","text":"An initial implementation of virtual scrolling is now available in @angular/cdk-experimental. Please note that, since these components are still experimental, they may have bugs and the API is subject to change.","title":"Highlights"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_31","text":"autosize: textarea receiving focus on init ( #11460 ) ( 7d447c2 ), closes #11451 #11308 button: disable all animations when using the NoopAnimationsModule ( #11477 ) ( 1a75152 ), closes #10590 checkbox, radio: remove webkit tap highlights ( #11349 ) ( 4b2cc1a ) form-field: disable all animations when using NoopAnimationsModule ( #11371 ) ( 9062640 ), closes #10590 form-field: infinite loop when using outline appearance and element isn't in the DOM ( #11406 ) ( e592615 ), closes #11329 menu: lazy-rendered content being duplicated when toggling quickly ( #11348 ) ( fb5cdb2 ), closes #11331 nav-schematics: update isHandset$ type and fix template expression ( #11448 ) ( b9041e3 ), closes #11445 #11441 overlay: incorrect position when using flexible positioning and rtl on the body ( #11393 ) ( acc24c4 ), closes #11387 accordion, expansion: prevent nested expansion panels from registering to the same accordion ( #11342 ) ( 9bf720a ) select: panel content blurry in some browsers ( #11434 ) ( 3dc3fcd ) slide-toggle: disable animations when using NoopAnimationsModule ( #11414 ) ( 1d96d5a ), closes #10590 slider: disable animations when using NoopAnimationsModule ( #11422 ) ( cf17ef7 ), closes #10590 table: data source not unsubscribing from render changes subscription ( #11394 ) ( 9313f18 ), closes #11382","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#features_12","text":"a11y: add cdkAriaLive directive ( #11352 ) ( 64a70ad ) expansion: allow expansion indicator positioning ( #8199 ) ( 51d859f ) overlay: allow for Directionality instance to be passed in ( #11411 ) ( be577b1 ) progress-spinner: add injection token for configuring the diameter and stroke globally ( #11493 ) ( c3899cf ), closes #11490 collections: add ArrayDataSource, a DataSource wrapper for Array and Observable ( #11354 ) ( f59658d )","title":"Features"},{"location":"site-files/project/0-CHANGELOG/#performance-improvements_6","text":"overlay: only compute and emit position changes if there are subscribers ( #11431 ) ( c68ccc9 )","title":"Performance Improvements"},{"location":"site-files/project/0-CHANGELOG/#610-plaster-parliament-2018-05-21","text":"","title":"6.1.0 plaster-parliament (2018-05-21)"},{"location":"site-files/project/0-CHANGELOG/#features_13","text":"autocomplete: add the ability to set a different panel connection element ( #11284 ) ( efe37f5 ), closes #11269 autocomplete: allow autocomplete panel to be disabled ( #11142 ) ( e8bc0e9 ) button: add isIconButton and isRoundButton properties ( #11226 ) ( 318d699 ) cdk-input: change autosize to be bindable ( #9884 ) ( #11167 ) ( 2d227b7 ) elevation: add $opacity argument to elevation mixins ( #10877 ) ( fbf5648 ) observe-content: refactor so logic can be used without directive ( #11170 ) ( ba57852 ) overlay: add support for automatically setting the transform-origin based on the current position ( #10868 ) ( d26735c ) overlay: expose flexible overlay features through CdkConnectedOverlay ( #11069 ) ( ef0229c ) table: allow multiple header/footer rows ( #11245 ) ( 641edc3 ) table: enable multiple data rows ( #11116 ) ( c15e307 ) tree: Add support for trackBy ( #11267 ) ( ff34dac )","title":"Features"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_32","text":"animations: prevent animations when in a noopanimations module ( #10881 ) ( 81b6a78 ) autocomplete: panel blending in with background in high contrast mode ( #11190 ) ( 9e9daf8 ) autocomplete: return consistent output from panelClosingActions ( #8533 ) ( 2815607 ), closes #7553 autosize: error thrown by IE in some cases when component is destroyed ( #11109 ) ( af09c8f ) button: ripples not being clipped by button border radius ( #11181 ) ( 6e026d7 ), closes #11160 button-toggle: fix button toggle with 0 value not checked ( #11292 ) ( 9a8cd4d ) checkbox: disable animations when using NoopAnimationsModule ( #11249 ) ( 93b5892 ), closes #11205 checkbox: update MatCheckbox disabled setter to trigger change detection ( #11098 ) ( ce1b517 ) chips: stacked chips overflowing chip list ( #11143 ) ( d3c8cc5 ) datepicker: dateInput event being fired if the value hasn't changed ( #10952 ) ( a62cdb6 ) datepicker: don't autofocus calendar cell if used outside of overlay ( #11049 ) ( 2897797 ) dialog: min-height and max-height not having an effect on dialog container ( #11235 ) ( a20dfd3 ) dialog,bottom-sheet: don't provide directionality if no direction is set ( #11285 ) ( cd37a54 ), closes #11262 expansion-panel: inconsistent margin for nested panels ( #11305 ) ( 1bf5c41 ), closes #11254 focus-monitor: don't null-out focus until after event is finished with capture bubble ( #10721 ) ( 0b7572b ) focus-monitor: reenter ngzone before emitting ( #10549 ) ( 37193d8 ) form-field: error on IE11 when using outline appearance ( #11108 ) ( c9bd05c ) icon: log full error message when icon set fails to load ( #10915 ) ( fbf06bb ) icon: remove duplicate icon registry provider ( #11214 ) ( 67a6aa1 ) nav-schematics: Subscribe to breakpoint observable ( #11310 ) ( d52acc9 ) ng-add: install added packages ( #11163 ) ( be08eb9 ) overlay: injection errors for scroll strategy providers in lazy-loaded modules ( #11213 ) ( 0cda47c ), closes #10820 radio: disable animations when using NoopAnimationsModule ( #11296 ) ( af78b97 ) radio: update set disabled directly on MatRadioButton to trigger change detection ( #11056 ) ( 860ce13 ) ripple: disable ripple animations when using NoopAnimationsModule ( #11205 ) ( 9715928 ) sidenav: disable all sidenav animations when using NoopAnimationsModule ( #11180 ) ( 03e749a ) sidenav-demo: trigger event opened ( #11225 ) ( 853b04c ) snack-bar: snack bar not animating in if no positions are passed in ( #11230 ) ( f5377dd ), closes #11197 stepper: error being thrown if selected step is accessed too early ( #11186 ) ( 4638833 ), closes #11158 stepper: handle keyboard interactions if direction changes after init ( #11067 ) ( 116ee60 ) table: add missing constructors ( #11252 ) ( 8e7dd80 ) tabs: handle long tab labels in mat-tab-nav-bar ( #10903 ) ( 61dd937 ) tooltip: not handling direction changes after the first open ( #11324 ) ( abc3d38 ) add custom theme using string ref in angular.json ( #11189 ) ( 33b5df4 ), closes #11188","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#performance-improvements_7","text":"sidenav: avoid hitting zone continuously when using autosize option ( #11231 ) ( c936bc9 ), closes #11215","title":"Performance Improvements"},{"location":"site-files/project/0-CHANGELOG/#602-chocolate-reality-2018-05-14","text":"","title":"6.0.2 chocolate-reality (2018-05-14)"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_33","text":"autocomplete: panel blending in with background in high contrast mode ( #11190 ) ( 23fca28 ) autosize: error thrown by IE in some cases when component is destroyed ( #11109 ) ( 408134f ) button: ripples not being clipped by button border radius ( #11181 ) ( a1d98a9 ), closes #11160 checkbox: update MatCheckbox disabled setter to trigger change detection ( #11098 ) ( 22baefc ) datepicker: dateInput event being fired if the value hasn't changed ( #10952 ) ( f3d436d ) dialog: min-height and max-height not having an effect on dialog container ( #11235 ) ( 7ea3900 ) icon: remove duplicate icon registry provider ( #11214 ) ( c66d6a5 ) add custom theme using string ref in angular.json ( #11189 ) ( f0b1529 ), closes #11188 ripple: disable ripple animations when using NoopAnimationsModule ( #11205 ) ( 29d7330 ) sidenav: disable all sidenav animations when using NoopAnimationsModule ( #11180 ) ( 0c7998c ) stepper: error being thrown if selected step is accessed too early ( #11186 ) ( 834c6f7 ), closes #11158 stepper: handle keyboard interactions if direction changes after init ( #11067 ) ( b15b8be ) table: add missing constructors ( #11252 ) ( f02bb05 ) tabs: handle long tab labels in mat-tab-nav-bar ( #10903 ) ( f5eda86 )","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#performance-improvements_8","text":"sidenav: avoid hitting zone continuously when using autosize option ( #11231 ) ( 2764ea6 ), closes #11215","title":"Performance Improvements"},{"location":"site-files/project/0-CHANGELOG/#601-glass-spaceship-2018-05-07","text":"","title":"6.0.1 glass-spaceship (2018-05-07)"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_34","text":"chips: stacked chips overflowing chip list ( #11143 ) ( 70ba46e ) datepicker: don't autofocus calendar cell if used outside of overlay ( #11049 ) ( 2a02ce2 ) focus-monitor: don't null-out focus until after event is finished with capture bubble ( #10721 ) ( 71ac0ae ) focus-monitor: reenter ngzone before emitting ( #10549 ) ( 8be7d4e ) form-field: error on IE11 when using outline appearance ( #11108 ) ( 3f87309 ) icon: log full error message when icon set fails to load ( #10915 ) ( f6af40c ) ng-add: install added packages ( #11163 ) ( bf9d5bb ) radio: update set disabled directly on MatRadioButton to trigger change detection ( #11056 ) ( a4597c9 )","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#600-vibranium-vivarium-2018-05-03","text":"","title":"6.0.0 vibranium-vivarium (2018-05-03)"},{"location":"site-files/project/0-CHANGELOG/#highlights_5","text":"MatTree component is now available, @tinayuangao recently gave a talk at ng-conf about the new component mat-table and cdk-table now native table elements in addition to the existing display: flex based layout MatTable now supports having an optional footer row Schematics are now available for Angular Material, @jelbourn recently gave a talk at ng-conf about using schematics MatTabs content can now be lazy loaded MatBadge and MatBottomSheet components are now available @angular/cdk/overlay has a new positioning strategy available, FlexibleConnectedPositionStrategy , which intelligently handles sizing and positioning to ensure that overlay contents always remain on the screen MatIcon now allows SVG icons to be registered from strings @angular/cdk/keycodes now includes most keycodes you might need for building a web application 130+ bug fixes Docs for v5 are now available at v5.material.angular.io A version picker is available material.angular.io to switch between docs versions","title":"Highlights"},{"location":"site-files/project/0-CHANGELOG/#upgrading-to-angular-material-60","text":"With the Angular CLI v6.0+, you can use the ng update command to automatically migrate to the new APIs ng update @angular/material NOTE: There may be some cases where the tool may be unable to automatically migrate, but will notify you of those cases","title":"Upgrading to Angular Material 6.0"},{"location":"site-files/project/0-CHANGELOG/#breaking-changes_5","text":"A number of APIs that were deprecated during beta have been removed, see here for complete list See ng update tooling above to automatically migrate to the new APIs","title":"Breaking Changes"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_35","text":"autocomplete: panel direction not being updated if the trigger direction changes ( #10916 ) ( 8c30cee ) button-toggle: not usable in high contrast mode ( #11097 ) ( dd2f465 ) dialog: add generic parameter for the dialog result to open method ( #11059 ) ( bf1bdc0 ) form-field: inconsistent underline height at different DPIs ( #11062 ) ( 0f7d503 ) form-field: scrollbars appear on autosize textarea in chrome ( #10811 ) ( 385f96d ) form-field,select: handle form field controls inside toolbar ( #10627 ) ( 1a3993e ) list: selection list always firing change event for selectAll and deselectAll ( #11029 ) ( 54c0b00 ) menu: not updating panel direction after init ( #11070 ) ( 294ba3c ) menu: unable to open same sub-menu from different triggers and not picking up indirect descendant items ( #10132 ) ( 5393bfe ) overlay: error when rendering flexible overlay on the server ( #11072 ) ( 422d102 ) paginator: handle negative pageSize and pageIndex correctly ( #11068 ) ( 3f5e481 ) select: losing focus position when tabbing away after clicking inside multi select ( #10905 ) ( c6ad1f8 ) select: unable to toggle multi select option after using the mouse ( #11061 ) ( 01d0993 ) sidenav: box shadow visible while closed when rendering on the server ( #10969 ) ( cfe6c1d )","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#600-rc14-2018-04-30","text":"","title":"6.0.0-rc.14 (2018-04-30)"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_36","text":"card: flat card selector not working ( #11028 ) ( b67813e ), closes #11014 ci: Shard tests on CI across 3 browsers ( #11048 ) ( a647579 ) overlay: always dispatch keyboard events to top overlay in OverlayKeyboardDispatcher ( #10807 ) ( d96fa07 ), closes #10799 schematics: allow more tsconfig locations for ng update ( #11058 ) ( 7bbc040 )","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#600-rc13-2018-04-26","text":"","title":"6.0.0-rc.13 (2018-04-26)"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_37","text":"accordion: complete accordion item emitters on destroy ( #10858 ) ( b8e97b2 ) bottom-sheet: server-side rendering error when opened ( #10487 ) ( 6d9ed8a ) chips: unable to bind to chip input placeholder ( #10855 ) ( acb0bd0 ), closes #10848 datepicker: allow MatCalendarHeader to be re-used inside a custom header ( #10856 ) ( 153dfb8 ) datepicker: calendar stateChanges not being completed ( #10960 ) ( f08a4ec ) datepicker: producing wrong selector for disabled dates for themes inside a selector ( #10904 ) ( 54301da ), closes #10889 examples: add missing module imports and exports ( #10947 ) ( 069e1df ) form-field: inconsistent border width across outline gap in Chrome ( #10956 ) ( a609acf ), closes #10710 form-field: make outline appearance work in situations where the\u2026 ( #10943 ) ( a0c77e2 ) menu: not closing sibling sub-menus when hovering over disabled items ( #10396 ) ( 3b7fe64 ) menu: set proper focus origin when the user starts using the keyboard after opening with the mouse ( #11000 ) ( ec3e3e7 ), closes #10980 overlay: clear element reference on destroy ( #10486 ) ( 0e21443 ) overlay: handle OnDestroy in FullscreenOverlayContainer and use document injection token ( #10773 ) ( d2b183e ) overlay: unable to use overlay provider during app initialization ( #10975 ) ( e4817bb ), closes #10967 overlay: wrong import path in distributed overlay styles ( #10999 ) ( 257a777 ), closes #10908 radio: radios aren't checkable when the value is falsy ( #10315 ) ( 4e48cf4 ) ripple: only persist top ripple on pointer down ( #10976 ) ( a8d99da ), closes #10973 schematics: include 6.0.0 RC releases for migrations ( #11010 ) ( d52bc1d ) schematics: support basic style asset string ( #10989 ) ( 45251ff ), closes #10912 select,autocomplete: mat-option theme not being applied correctly when nested inside a selector ( #10889 ) ( 1a60a7a ) slider: truncate long decimal values ( #10959 ) ( aa752cd ), closes #10951 sort: arrow not centered vertically inside multiline headers ( #10619 ) ( 99af109 ), closes #10604 tab: add flex-basis hack for IE11 ( #10369 ) ( c367e66 ), closes #10237 table: data source can listen for init from sort, page ( #10593 ) ( 99f39ca ) tabs: tab-nav-link disableRipple input not working ( #10643 ) ( 45e1b29 ), closes #10636 text-field: autosize textarea not scrolling to end of input on firefox ( #10403 ) ( d0a4e9f ), closes #10400 toolbar: improved high contrast accessibility ( #10465 ) ( e409ec4 ) tree: add theme typography to angular-material-theme mixin ( #11015 ) ( a292d31 ) tree: remove invalid aria attribute ( #10935 ) ( a275dc1 )","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#features_14","text":"accordion: allow intermediate elements between accordion and expansion panel ( #11016 ) ( 85252b3 ) cdk/keycodes: add missing keycodes ( #10891 ) ( c976040 ) overlay: allow multiple classes to be assigned to the backdrop ( #10531 ) ( 540226c ), closes #10529 paginator: expose previousPageIndex inside PageEvent ( #10759 ) ( 85039ca ), closes #10758 selection-list: add support for compareWith function ( #10501 ) ( 7747e66 ) sidenav: allow for auto focusing to be disabled ( #10933 ) ( 4ae63b3 ), closes #10402 table: add optional footer row ( #10330 ) ( 6df3709 ) tree: add level to tree node context ( #10985 ) ( f1589db )","title":"Features"},{"location":"site-files/project/0-CHANGELOG/#600-rc12-2018-04-17","text":"","title":"6.0.0-rc.12 (2018-04-17)"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_38","text":"breakpoint-observer: split comma separated queries into separte queries ( #10789 ) ( 7c1549a ) datepicker: high contrast accessibility improvements ( #10363 ) ( 4d23b08 ) datepicker: update popup direction if datepicker direction changes ( #10871 ) ( 4cc72b8 ) directionality: complete change event on destroy ( #10826 ) ( b057391 ) form-field: incorrect label position for outline style in prod mode ( #10803 ) ( 7484321 ) menu: svg icons not aligned inside menu item ( #10837 ) ( 2af9c35 ), closes #10832 schematics: correct path to ng-update entry-point ( #10850 ) ( 6a82c65 ) schematics: ignore e2e projects w/ ng add ( #10883 ) ( 5554506 ) schematics: make v6 migration work ( #10853 ) ( c9f5be6 ) scrolling: complete ScrollDispatcher.scrolled on destroy ( #10794 ) ( 41be069 ) select: open method triggered twice on click ( #7619 ) ( 991daac ) selection-list: toggle newly-focused item when pressing arrow key + shift ( #10828 ) ( 975fe7e ) stepper: not resetting to first step when some of the steps aren't editable ( #10804 ) ( 5df8d01 ), closes #10801 table: Allow any iterable to be used as for columns in headerrow and row defs ( #10822 ) ( 92e5f55 ) tree: make toggle non-recursive by default ( #10879 ) ( 5920bc3 ) stepper: add animationDone event ( #10752 ) ( 358a12d ), closes #9087","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#600-rc11-2018-04-13","text":"","title":"6.0.0-rc.11 (2018-04-13)"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_39","text":"schematics: Fix a number of issues with ng-update schematic for v5 - v6 migration","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#600-rc5-2018-04-13","text":"","title":"6.0.0-rc.5 (2018-04-13)"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_40","text":"schematics: move ng-update under correct location ( d98fb35 )","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#600-rc4-2018-04-13","text":"","title":"6.0.0-rc.4 (2018-04-13)"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_41","text":"schematics: add ng-update config to package.json ( #10844 ) ( 0a3cfa7 )","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#600-rc3-2018-04-12","text":"","title":"6.0.0-rc.3 (2018-04-12)"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_42","text":"button-toggle: selected value not being maintained when changing value while toggles are being swapped out ( #10707 ) ( dec91ce ), closes #10690 focus-monitor: server-side rendering error when using focusVia ( #10729 ) ( 44a0a4f ) radio: checked radio button indistinguishable in high contrast mode ( #10753 ) ( a74099f ) schematics: schematics now functioning with Angular CLI v6 ( #10703 ) ( 023e8f4 )","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#600-rc2-2018-04-11","text":"","title":"6.0.0-rc.2 (2018-04-11)"},{"location":"site-files/project/0-CHANGELOG/#features_15","text":"coercion: add utility for coercing CSS values ( #10654 ) ( e30824c ) icon: allow SVG icons to be registered from strings ( #10757 ) ( 57efa13 ), closes #3132 overlay: add the ability to set the default offsets on FlexibleConnectedPositionStrategy ( #10555 ) ( bcff93e ) table: support native table selectors ( #10594 ) ( 7774da2 )","title":"Features"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_43","text":"autocomplete: panel width not being updated on window resize ( #10629 ) ( 2dc4e70 ) badge: incorrectly handling rtl ( #10630 ) ( 9c1f8a9 ) button-toggle: changed after checked error for repeated toggles with a preselected value ( #10612 ) ( 9a3d3e8 ) button-toggle: setting blank aria-label attribute by default ( #10605 ) ( 95dba59 ) datepicker: avoid accidental form submissions through calendar buttons ( #10515 ) ( edb57f9 ), closes #10514 datepicker: close datepicker popup on alt + up arrow ( #10662 ) ( 446ef66 ) datepicker: export MatCalendarHeader ( #10633 ) ( 5df1af6 ) datepicker: nested animation not working ( #10355 ) ( 9fff92f ), closes #9134 datepicker: overly broad selector in theme ( #10372 ) ( 5b7a6a3 ) datepicker: reformat valid values on blur ( #10777 ) ( 603dfa4 ), closes #10645 focus-monitor: hitting ngzone when using focusVia ( #10608 ) ( b38b966 ) focus-trap: wrong element being checked when logging deprecation warning ( #10578 ) ( 52493d1 ) form-field: run change detection when prefix or suffix changes ( #10670 ) ( 515cc06 ) form-field: server-side rendering error with outline appearance ( #10719 ) ( 39887da ) overlay: centered flexible positioning not working in some browsers ( #10701 ) ( dfc3b02 ) overlay: incorrect bottom offset using upward-flowing flexible position with a viewport margin ( #10650 ) ( 306b704 ) platform: change isBrowser check to use Angular PLATFORM_ID ( #10659 ) ( f023579 ) progress-spinner: set spinner width to match diameter. ( #10314 ) ( c64cb7e ) sidenav: remove dependency on OverlayModule ( #10357 ) ( 27ef2dc ) slide-toggle: run timeout outside the NgZone ( #10655 ) ( 6f7765e ) stepper: header icon collapsing with very long labels ( #10341 ) ( 5b5f2ee ), closes #10332 stepper: horizontal stepper cutting off bottom part of content ( #10644 ) ( 4fbde10 ), closes #10634 table: MatTableDataSource incorrectly sorting zero ( #10561 ) ( bcb5697 ), closes #10556 table,sort,paginator: incorrect spacing in rtl ( #10617 ) ( 46ca6ce ) tabs: hide mat-tab-nav-bar ink bar when no link is active ( #9701 ) ( 51206ee ), closes #9671 tabs: tab content portal not being cleaned up on destroy ( #10661 ) ( 2e3393a ) theme: apply base theme classes at location the theme is included ( #10737 ) ( 2aba8ab ) tooltip: error when updating position while closed ( #10704 ) ( 6449ae1 ) tree: fix exported symbol cannot be named error. ( #10626 ) ( 6729b6d ) tree: fix nested node cannot expand/collapse multiple times ( #10671 ) ( 5570beb ) tree: fix nested node is not working ( #10635 ) ( 7857b92 )","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#600-rc1-2018-04-05","text":"","title":"6.0.0-rc.1 (2018-04-05)"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_44","text":"autocomplete: panel width not being updated on window resize ( #10629 ) ( 2dc4e70 ) badge: incorrectly handling rtl ( #10630 ) ( 9c1f8a9 ) button-toggle: changed after checked error for repeated toggles with a preselected value ( #10612 ) ( 9a3d3e8 ) button-toggle: setting blank aria-label attribute by default ( #10605 ) ( 95dba59 ) datepicker: close datepicker popup on alt + up arrow ( #10662 ) ( 446ef66 ) datepicker: export MatCalendarHeader ( #10633 ) ( 5df1af6 ) datepicker: overly broad selector in theme ( #10372 ) ( 5b7a6a3 ) focus-monitor: hitting ngzone when using focusVia ( #10608 ) ( b38b966 ) focus-trap: wrong element being checked when logging deprecation warning ( #10578 ) ( 52493d1 ) form-field: run change detection when prefix or suffix changes ( #10670 ) ( 515cc06 ) overlay: incorrect bottom offset using upward-flowing flexible position with a viewport margin ( #10650 ) ( 306b704 ) progress-spinner: set spinner width to match diameter. ( #10314 ) ( c64cb7e ) sidenav: remove dependency on OverlayModule ( #10357 ) ( 27ef2dc ) slide-toggle: run timeout outside the NgZone ( #10655 ) ( 6f7765e ) stepper: horizontal stepper cutting off bottom part of content ( #10644 ) ( 4fbde10 ), closes #10634 table,sort,paginator: incorrect spacing in rtl ( #10617 ) ( 46ca6ce ) tabs: tab content portal not being cleaned up on destroy ( #10661 ) ( 2e3393a ) tooltip: error when updating position while closed ( #10704 ) ( 6449ae1 ) tree: fix exported symbol cannot be named error. ( #10626 ) ( 6729b6d ) tree: fix nested node cannot expand/collapse multiple times ( #10671 ) ( 5570beb ) tree: fix nested node is not working ( #10635 ) ( 7857b92 )","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#features_16","text":"coercion: add utility for coercing CSS values ( #10654 ) ( e30824c ) overlay: add the ability to set the default offsets on FlexibleConnectedPositionStrategy ( #10555 ) ( bcff93e ) table: support native table selectors ( #10594 ) ( 7774da2 )","title":"Features"},{"location":"site-files/project/0-CHANGELOG/#600-rc0-2018-03-29","text":"","title":"6.0.0-rc.0 (2018-03-29)"},{"location":"site-files/project/0-CHANGELOG/#known-issues","text":"MatButtonToggleGroup causes ExpressionChangedAfterItHasBeenCheckedError ( #10607 ) focus-trap: wrong element being checked when logging deprecation warning ( #10578 )","title":"Known issues"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_45","text":"bottom-sheet: handle overflowing content ( #10533 ) ( cb6d469 ) datepicker: add back MAT_DATE_LOCALE_PROVIDER ( #10602 ) ( 7fd7ad3 ) datepicker: incorrect icon color ( #10458 ) ( 4e298a6 ) datepicker: set canPush to false for position strategy ( #10609 ) ( 67c7348 ) drawer: better handling of high contrast mode ( #10418 ) ( ff2860f ) input: inaccurate textarea check during server-side render ( #10467 ) ( dda1d04 ) overlay: CdkConnectedOverlay ignoring offset from position config ( #10451 ) ( 1659004 ) select: MatOption state change stream not being completed ( #10540 ) ( b8bb62f ) slider: unable to slide to max value under certain conditions ( #10364 ) ( d50fd3d ), closes #10148 sort: add aria-sort to host when sorted ( #6891 ) ( 63f713f ) tree: fix the MatTreeNodeOutlet not exported issue ( #10581 ) ( 0b8240c ) tree: improve nested tree node fix nested tree control ( #10454 ) ( 2ddc257 )","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#features_17","text":"cdk/keycodes: add 0 and 9 numerical keypad codes ( #10562 ) ( d5cd0d6 ) stepper: allow number icon to be customized and expose template context variables ( #10516 ) ( 946fd84 ), closes #10513 tabs: Allow tab ink bar positioning to be determined with a provided method. ( #9972 ) ( 02f5256 ) tooltip: allow for position to be updated while open ( #10362 ) ( 04045d2 )","title":"Features"},{"location":"site-files/project/0-CHANGELOG/#600-beta5-2018-03-23","text":"This release contains many breaking changes due to the deletion of deprecated targets. We are currently working on a tool that will help migrate your app if you are affected by these changes. We expect to have the tool ready when we release version 6.0.0.","title":"6.0.0-beta.5 (2018-03-23)"},{"location":"site-files/project/0-CHANGELOG/#breaking-changes_6","text":"typography: The $mat-font-family variable has been removed. Use the Material typography or redeclare in your project $mat-font-family: Roboto, 'Helvetica Neue', sans-serif; . datepicker: MatDatePicker now requires an animations module to be loaded datepicker: selectedChanged has been removed. Use dateChange or dateInput from MatDatepickerInput . button-toggle: selected is no longer an input and is now readonly. snack-bar: SHOW_ANIMATION has been removed. HIDE_ANIMATION has been removed. icon: The _document parameter in the MatIconRegistry constructor is now required. list: selectionChange on the MatListOption , which was deprecated in 5.0.0 has been removed. Use selectionChange on the MatSelectionList instead. MatListOptionChange which was deprecated in 5.0.0 has been removed. slider: thumb-label which was deprecated in 5.0.0 has been removed. Use thumbLabel instead. tick-interval which was deprecated in 5.0.0 has been removed. Use tickInterval instead. tooltip: tooltip-position which was deprecated in 5.0.0 has been removed. Use matTooltipPosition instead. The _defaultOptions parameter in the MatTooltip constructor is now required. select: onOpen , which was deprecated in 5.0.0, has been removed. onClose , which was deprecated in 5.0.0, has been removed. change , which was deprecated in 5.0.0, has been removed. chips: remove which was deprecated in 5.0.0 has been removed. Use removed instead. destroy which was deprecated in 5.0.0 has been removed. Use destroyed instead. text-field: The _ngZone parameter in the CdkTextareaAutosize constructor is now required. sidenav: The MatDrawerToggleResult class has been turned into an type. The promise returned from open , close and toggle now resolves with the MatDrawerToggleResult type rather than the class. align which was deprecated in 5.0.0 has been removed. Use position instead. open which was deprecated in 5.0.0 has been removed. Use opened instead. close which was deprecated in 5.0.0 has been removed. Use closed instead. align-changed which was deprecated in 5.0.0 has been removed. Use positionChanged . form-field: - dividerColor which was deprecated in 5.0.0 has been removed. Use color instead. floatPlaceholder which was deprecated in 5.0.0 has been removed. Use floatLabel instead. overlay: ConnectedOverlayDirective which was deprecated in 5.0.0 has been removed. Use CdkConnectedOverlay instead. OverlayOrigin which was deprecated in 5.0.0 has been removed. Use CdkOverlayOrigin instead. hasBackdrop which was deprecated in 5.0.0 has been removed. Use cdkConnectedOverlayHasBackdrop instead. open which was deprecated in 5.0.0 has been removed. Use cdkConnectedOverlayOpen instead. scrollStrategy which was deprecated in 5.0.0 has been removed. Use cdkConnectedOverlayScrollStrategy instead. backdropClass which was deprecated in 5.0.0 has been removed. Use cdkConnectedOverlayBackdropClass instead. minHeight which was deprecated in 5.0.0 has been removed. Use cdkConnectedOverlayMinHeight instead. minWidth which was deprecated in 5.0.0 has been removed. Use cdkConnectedOverlayMinWidth instead. height which was deprecated in 5.0.0 has been removed. Use cdkConnectedOverlayHeight instead. width which was deprecated in 5.0.0 has been removed. Use cdkConnectedOverlayWidth instead. offsetX which was deprecated in 5.0.0 has been removed. Use cdkConnectedOverlayOffsetX instead. offsetY which was deprecated in 5.0.0 has been removed. Use cdkConnectedOverlayOffsetY instead. positions which was deprecated in 5.0.0 has been removed. Use cdkConnectedOverlayPositions instead. origin which was deprecated in 5.0.0 has been removed. Use cdkConnectedOverlayOrigin instead. tabs: mat-dynamic-height which was deprecated in 5.0.0 has been removed. Use dynamicHeight instead. selectChange which was deprecated in 5.0.0 has been removed. Use selectedTabChange . checkbox: align which was deprecated in 5.0.0 has been removed. Use labelPosition instead. Note that the values are different. form-field: - The following deprecated CSS classes have been removed: mat-input-container instead use mat-form-field mat-input-invalid instead use mat-form-field-invalid mat-input-wrapper instead use mat-form-field-wrapper mat-input-flex instead use mat-form-field-flex mat-input-prefix instead use mat-form-field-prefix mat-input-infix instead use mat-form-field-infix mat-input-placeholder-wrapper instead use mat-form-field-label-wrapper mat-input-placeholder instead use mat-form-field-label mat-input-suffix instead use mat-form-field-suffix mat-input-underline instead use mat-form-field-underline mat-input-ripple instead use mat-form-field-ripple mat-input-subscript-wrapper instead use mat-form-field-subscript-wrapper mat-input-hint-wrapper instead use mat-form-field-hint-wrapper mat-input-hint-spacer instead use mat-form-field-hint-spacer mat-form-field-placeholder-wrapper instead use mat-form-field-label-wrapper mat-form-field-placeholder instead use mat-form-field-label a11y: The renderer parameter in FocusMonitor.monitor has been removed. cdk-focus-trap which was deprecated in 5.0.0 has been removed. Use cdkTrapFocus instead. autocomplete: The defaults parameter in the MatAutocomplete constructor is now required. form-field: MatFormFieldControl.shouldPlaceholderFloat which was deprecated in 5.0.0 has been removed. * MatFormFieldControl.shouldLabelFloat is no longer optional and should be used instead. FloatPlaceholderType which was deprecated in 5.0.0 has been removed. Use FloatLabelType instead. PlaceholderOptions which was deprecated in 5.0.0 has been removed. Use LabelOptions instead. MAT_PLACEHOLDER_GLOBAL_OPTIONS which was deprecated in 5.0.0 has been removed. Use MAT_LABEL_GLOBAL_OPTIONS instead. snack-bar: extraClasses which was deprecated in 5.0.0 has been removed. Use panelClass instead. portal: The portalHost and cdkPortalHost inputs which were deprecated in 5.0.0 have been removed. Use cdkPortalOutlet instead.","title":"BREAKING CHANGES"},{"location":"site-files/project/0-CHANGELOG/#features_18","text":"button-toggle: general component cleanup and support value input in multiple mode ( #9191 ) ( a403bac ), closes #2773 #2773 #9058 cdk: switch injectables to new scope API ( #10301 ) ( 6405da9 ) cdk-input: move input autofill and autosize utils into cdk ( #9831 ) ( ced9c90 ) chips: allow for separatorKeyCodes to be configured globally ( #10264 ) ( 3c8a498 ), closes #10256 datepicker: add animation to calendar popup ( #8999 ) ( c42549e ) datepicker: Add Custom Header to DatePicker ( #9639 ) ( 4e1bb26 ) form-field: allow setting default appearance via provider ( #9815 ) ( 158b1db ) icon: add input for inline styling of icons ( #9984 ) ( be1fc08 ) icon: add utility to mirror icons in RTL ( #10327 ) ( 11a3fe1 ), closes #10045 material: use scoped injectables ( #10507 ) ( f7b5d34 ) overlay: add support for flexible connected positioning ( #9153 ) ( 27e5f6e ), closes #6534 #2725 #5267 schematics: dashboard schematic ( #10011 ) ( 6273d6a ) schematics: navigation schematic ( #10009 ) ( 279c112 ) schematics: table schematic ( #10012 ) ( e7533a5 ) tabs: support stretched tabs in mat-tab-nav-bar ( #10368 ) ( 89ea485 ), closes #8871","title":"Features"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_46","text":"badge: invalid style declaration and too broad transition ( #10433 ) ( c14cf7c ) bottom-sheet: error when attempting to open multiple instances quickly ( #10147 ) ( 34e96f5 ) button: theme font color being overwritten ( #9771 ) ( c3a8d0c ), closes #4614 #9231 #9634 checkbox: setting blank aria-label by default ( #10281 ) ( c12d7c4 ) chip-list: set key manager active index to -1 when blurred ( #10335 ) ( b10fff4 ) chips: form field label pointing to non-existing elements ( #9908 ) ( 9337ae1 ) datepicker: server-side rendering error for disabled input ( #10249 ) ( af4fc9b ), closes #10248 icon: namespace error when registering an icon on the server ( #10175 ) ( 498534b ), closes #10170 input: setting blank placeholder by default ( #10277 ) ( 889a9f2 ) overlay: clear last calculated position when new set of positions is provided ( #10462 ) ( cdb6e40 ), closes #10457 overlay: incorrect bounding box bottom position when page is scrolled and content is flowing upwards ( #10463 ) ( 1dd8a27 ) overlay: incorrect bounding box styles if position is exactly zero ( #10470 ) ( eefa9c4 ) overlay: opaque backdrop appearing solid in high contrast mode ( #10252 ) ( 8366ec6 ) select: scroll strategy token cannot inject overlay ( #10535 ) ( 3eb71c2 ) table: move padding from rows to cells ( #10499 ) ( e0321db ) tree: fix mat-tree paddings ( #10349 ) ( d065aea ) tree: invalid style declaration during server-side rendering ( #10326 ) ( c205749 ), closes #10131","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#code-refactoring","text":"a11y: remove 6.0.0 deletion targets ( #10325 ) ( 7a42c35 ) autocomplete: remove 6.0.0 deletion targets ( #10319 ) ( 0af5bca ) button-toggle: remove 6.0.0 deletion targets ( #10416 ) ( f0bf6e7 ) checkbox: remove 6.0.0 deletion targets ( #10342 ) ( 9f8eec1 ) chips: remove 6.0.0 deletion targets ( #10311 ) ( 1a8106d ) datepicker: remove 6.0.0 deletion targets ( #10413 ) ( 8bc7ee9 ) form-field: remove deprecated @Inputs ( #10294 ) ( f133da9 ), closes #10164 form-field: remove deprecated CSS classes ( #10296 ) ( aa2356d ) form-field: remove deprecated placeholder options. ( #10291 ) ( 26ee3e7 ) icon: remove 6.0.0 deletion targets ( #10389 ) ( e8af5ae ) list: remove 6.0.0 deletion targets ( #10398 ) ( d8a365e ) overlay: remove 6.0.0 deletion targets ( #10161 ) ( 54252d5 ) portal: remove 6.0.0 deletion targets ( #10257 ) ( 88abd9e ) select: remove 6.0.0 deletion targets ( #10163 ) ( 2b745c4 ) sidenav: remove 6.0.0 deletion targets ( #10279 ) ( c1d4666 ) slider: remove 6.0.0 deletion targets ( #10373 ) ( c8cc414 ) snack-bar: remove 6.0.0 deletion targets ( #10253 ) ( 88bb6f3 ) snack-bar: remove overly broad animation variables ( #10405 ) ( 9f3bf27 ) tabs: remove 6.0.0 deletion targets ( #10309 ) ( 4d05cda ) text-field: make constructor parameters required ( #10431 ) ( 5e5aae3 ) tooltip: remove 6.0.0 deletion targets ( #10344 ) ( 999cb57 ) typography: remove deprecated variable ( #10430 ) ( 9a1ae9c )","title":"Code Refactoring"},{"location":"site-files/project/0-CHANGELOG/#600-beta4-2018-03-05","text":"","title":"6.0.0-beta.4 (2018-03-05)"},{"location":"site-files/project/0-CHANGELOG/#highlights_6","text":"New tree component! The base behavior lives in @angular/cdk with Material Design flavors in @angular/material .","title":"Highlights"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_47","text":"button: hide overflow of buttons to prevent overflow of hover/ripple ( #9424 ) ( 915a2b7 ) avoid layout jumping on elements with ripples in RTL ( #10026 ) ( 900716a ) chips: Update chips in chip list, and add margin to chip input ( #8579 ) ( 67e710c ) datepicker: improve native adapter DST handling ( #10068 ) ( 2fad732 ) dialog: actions not being pulled down when trapping focus ( #10007 ) ( 8a402d0 ), closes #9722 dialog: don't provide directionality if user injector has one already ( #10004 ) ( e3d7aec ) expansion-panel: entire body content being shown on animation start ( #10138 ) ( b4b76bd ), closes #10134 grid-list: default to LTR when Directionality value is empty ( #10111 ) ( 64ef3a8 ) grid-list: invalid style declaration during server-side rendering ( #10131 ) ( a27d9df ) list: align avatar size in dense list with spec ( #10028 ) ( d4a4f61 ), closes #10019 list-key-manager: not ignoring vertical key events in horizontal-only mode ( #10075 ) ( ffbb425 ) menu: detach lazily-rendered content when the menu is closed ( #10005 ) ( bb1803d ), closes #9915 overlay: hide overlay container when there are no attached overlays ( #10139 ) ( 4b528f6 ), closes #6882 #10033 paginator: first/last icons being thrown off on IE and Edge; simplify icon setup ( #9776 ) ( dd082cb ) select: animation jumping on IE11 ( #10050 ) ( a5909db ) selection-list: improve accessibility of selection list ( #10137 ) ( 51fce51 ), closes #9995 selection-list: repeated preselected items not appearing as selected with OnPush parent ( #10100 ) ( cdd224a ), closes #10090 tree: fix type error in tree ( #10095 ) ( 6d94aec )","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#features_19","text":"list-key-manager: accept item references in setActiveItem ( #10029 ) ( 92ed9c8 ) menu: allow for backdrop class to be customized ( #10097 ) ( 2ece035 ), closes #10062 menu: allow for backdrop to be disabled ( #10070 ) ( e42f0bc ), closes #9938 snack-bar: add injection token for overriding the default options ( #9849 ) ( a943b36 ), closes #9821 stepper: require users to visit non-optional steps ( #10048 ) ( 77c8d8f ) tree: merge tree branch to master ( #9796 ) ( c975ca8 )","title":"Features"},{"location":"site-files/project/0-CHANGELOG/#600-beta3-2018-02-27","text":"","title":"6.0.0-beta.3 (2018-02-27)"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_48","text":"select: animation jumping on IE11 ( #10050 ) ( a5909db ) tree: fix type error in tree ( #10095 ) ( 6d94aec )","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#features_20","text":"menu: allow for backdrop class to be customized ( #10097 ) ( 2ece035 ), closes #10062 tree: merge tree branch to master ( #9796 ) ( c975ca8 )","title":"Features"},{"location":"site-files/project/0-CHANGELOG/#600-beta2-2018-02-21","text":"","title":"6.0.0-beta.2 (2018-02-21)"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_49","text":"badge: AoT and server-side rendering errors ( #9935 ) ( 06b4017 ) badge: hard to see in high contrast mode ( #9973 ) ( 1b2f90c ) badge: incorrectly setting aria-describedby ( #9957 ) ( aed7e8a ) badge: move styles into the theme mixin ( #9999 ) ( 00a6c90 ) badge: remove top-level ampersand selectors from theme mixin ( #9991 ) ( bd7a408 ), closes #9990 bottom-sheet: inject correct directionality in child components ( #9996 ) ( 9d784a0 ) button: inconsistent overflow value between browsers ( #9933 ) ( 9d19291 ) chips: Fix chip and chip list selectable ( #9955 ) ( 949a69b ) expansion-panel,menu,select: nested animations not working ( #9134 ) ( 1e2b79a ), closes #8814 #8953 input: AutofillMonitor stream not being completed when stopping monitoring ( #9886 ) ( 87bbfc5 ) overlay: default to global directionality ( #9994 ) ( 47674f1 ), closes #9817 tooltip: memory leak in _setTooltipMessage ( #6782 ) ( 66a01fb )","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#features_21","text":"button-toggle add ripples to button-toggle ( #9891 ) ( 53417d4 ), closes #9442 autocomplete: add opened/closed events to panel ( #9904 ) ( 82c5ff0 ), closes #9894 badge: add badge component ( #7483 ) ( c98d217 ) bottom-sheet: add result param when dismissing bottom sheet ( #9810 ) ( 98a6910 ) datepicker: add theming support ( #9407 ) ( 0383704 ) drawer: allow for backdrop to be disabled ( #9381 ) ( 6d4e052 ), closes #5300 schematics: add material scaffolding schematic ( #9883 ) ( 45399c6 ) typography: add letter-spacing configuration to typography configs. ( #9932 ) ( f30609c )","title":"Features"},{"location":"site-files/project/0-CHANGELOG/#600-beta1-2018-02-12","text":"Fix typo in version name (using a dash instead of a dot) Update Angular peer dependency to 6.0.0-beta.x","title":"6.0.0-beta.1 (2018-02-12)"},{"location":"site-files/project/0-CHANGELOG/#600-beta-0-2018-02-12","text":"","title":"6.0.0-beta-0 (2018-02-12)"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_50","text":"overlay: validate that ConnectedPositionStrategy positions are passed in correctly at runtime ( #9466 ) ( 6a8ce02 )","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#features_22","text":"add bottom sheet component ( #9764 ) ( bbf62cd ) datepicker: @Output for year and month selected in multiyear/year ( #9678 ) ( c2e108e ) expansion: add accordion expand/collapse all ( #6929 ) ( #7461 ) ( 3aceb73 ) form-field, chip: merge new form-field and chip features to master ( #9762 ) ( 4a5287c ), closes #9743 #9759 #9767 schematics: add initial schematics utils ( #9451 ) ( 673d56e ) tabs: add ability to lazy load tab content ( #8921 ) ( 6feaf62 )","title":"Features"},{"location":"site-files/project/0-CHANGELOG/#525-cardboard-kangaroo-2018-04-17","text":"","title":"5.2.5 cardboard-kangaroo (2018-04-17)"},{"location":"site-files/project/0-CHANGELOG/#highlights_7","text":"Tweak peer deps to avoid warnings when updating Angular to 6.0","title":"Highlights"},{"location":"site-files/project/0-CHANGELOG/#524-ash-submarine-2018-03-06","text":"","title":"5.2.4 ash-submarine (2018-03-06)"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_51","text":"chips: Update chips in chip list, and add margin to chip input ( #8579 ) ( 3074b45 ) expansion-panel: entire body content being shown on animation start ( #10138 ) ( 35b66f9 ), closes #10134 menu: detach lazily-rendered content when the menu is closed ( #10005 ) ( 37b1a09 ), closes #9915 menu: Fix #10005 lint error ( c8ca770 ) overlay: hide overlay container when there are no attached overlays ( #10139 ) ( d0bc91d ), closes #6882 #10033 paginator: first/last icons being thrown off on IE and Edge; simplify icon setup ( #9776 ) ( 85f9491 ) selection-list: improve accessibility of selection list ( #10137 ) ( cbe11d4 ), closes #9995","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#523-diamond-silhouette-2018-02-27","text":"","title":"5.2.3 diamond-silhouette (2018-02-27)"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_52","text":"cdk-dialog: decorate dialog as an injectable ( #10052 ) ( 07b4250 ) datepicker: improve native adapter DST handling ( #10068 ) ( 2837196 ) avoid layout jumping on elements with ripples in RTL ( #10026 ) ( c93103b ) dialog: actions not being pulled down when trapping focus ( #10007 ) ( 9a39e24 ), closes #9722 dialog: don't provide directionality if user injector has one already ( #10004 ) ( 6ec0af1 ) grid-list: default to LTR when Directionality value is empty ( #10111 ) ( 65810bc ) grid-list: invalid style declaration during server-side rendering ( #10131 ) ( 1576a99 ) list: align avatar size in dense list with spec ( #10028 ) ( 7d81b6f ), closes #10019 list-key-manager: not ignoring vertical key events in horizontal-only mode ( #10075 ) ( f31a2f1 ) selection-list: repeated preselected items not appearing as selected with OnPush parent ( #10100 ) ( f93d0f4 ), closes #10090 stepper: require users to visit non-optional steps ( #10048 ) ( d26aa6e )","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#522-cork-yacht-2018-02-21","text":"","title":"5.2.2 cork-yacht (2018-02-21)"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_53","text":"aria-describer: better handling of non-string values ( #9959 ) ( d351e33 ) list: list-options require a parent selection list ( #9899 ) ( 8cca2c2 ) list-key-manager: infinite loop if all items are disabled ( #9981 ) ( 775f560 ) menu: not picking up indirect descendant items ( #9971 ) ( 14b21e9 ), closes #9969 overlay: expose backdropClick mouse event in ConnectedOverlayDirective ( #9845 ) ( 5a1e7fe ) platform: potential error if CSS object is undefined ( #9968 ) ( 3212111 ), closes #9801 select: icons inside option not centered ( #9982 ) ( ecc7f53 ), closes #9978 select: lock dropdown position when scrolling ( #9789 ) ( 30b90a2 ) selection-list: incorrect cursor if disabled ( #9963 ) ( 13e809a ), closes #9952 tabs: ink bar not visible in high contrast mode ( #9997 ) ( 1ba04eb ) theming: add aliases for alternate spelling of \"grey\" ( #9903 ) ( 36e1bc0 ) viewport-ruler: fix server-side rendering errors when attempting to measure the viewport ( #9870 ) ( ac4cd91 )","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#521-ghillie-soup-2018-02-12","text":"","title":"5.2.1 ghillie-soup (2018-02-12)"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_54","text":"autocomplete: escape key inconsistency on IE ( #9777 ) ( 180750e ) button: better accessibility for flat buttons in high-contrast ( #9783 ) ( 0d0c6d4 ) datepicker: add max/min filter to multi year and year views ( #9727 ) ( 0793142 ) datepicker: changed after checked error if focused datepicker inputs turn disabled ( #9717 ) ( 01ad7bd ), closes #9559 global-position-strategy: ignoring width and height from OverlayConfig ( #9774 ) ( b425a46 ), closes #9715 overlay: dimension not updated after init ( #8765 ) ( c36b512 ) select: options inside option group not being rendered when wrapped with ng-container ( #9769 ) ( 38fddfe ), closes #9736 selection-list: external changes to selection model not being reflected ( #9846 ) ( 82df181 ), closes #9838 slider: invisible in high contrast mode ( #9792 ) ( 94bbffc ) slider: unable to reset value by setting it back to undefined ( #9768 ) ( c2e2744 ), closes #9740 radio: add aria-describedby passthrough to radio button input ( #9741 ) ( cd159f5 )","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#520-selenium-scramble-2018-02-05","text":"","title":"5.2.0 selenium-scramble (2018-02-05)"},{"location":"site-files/project/0-CHANGELOG/#features_23","text":"autocomplete: add the ability to highlight the first option on open ( #9495 ) ( b42fcb9 ), closes #8423 button: create stroked and flat button variants ( #9365 ) ( b652683 ) button: expose ripple instance ( #9170 ) ( 17e36fe ), closes #4179 checkbox: expose ripple instance ( #9176 ) ( e09c0a6 ) datepicker: allow for mat-datepicker-toggle icon to be customized ( #9487 ) ( 01867ad ) dialog: support using dialog content directives with template dialogs ( #9379 ) ( 99b768e ), closes #5412 drawer: expose CdkScrollable instance ( #9183 ) ( 2d03af0 ), closes #9136 expansion-panel: support two-way binding for the expanded property ( #9327 ) ( a72085b ), closes #9311 layout: add window breakpoints from spec ( #9318 ) ( 1038950 ) list-key-manager: add support for horizontal directions ( #9122 ) ( ab02367 ) menu: support lazy rendering and passing in context data ( #9271 ) ( 9fed87c ), closes #9251 observe-content: allow for the MutationObserver to be disabled ( #9025 ) ( aa2e76c ) overlay: expose reference to the backdrop element ( #9702 ) ( 959a8a1 ), closes #9689 overlay: make it easier to override backdrop color ( #9114 ) ( 3d18006 ), closes #7855 paginator: Add functionality to jump to first and last page ( #9603 ) ( 04cdb13 ), closes #9278 paginator: allow page size selection to be disabled ( #8373 ) ( c8743e7 ), closes #8359 portal: expose attached result in CdkPortalOutlet ( #9326 ) ( b626b13 ), closes #9304 ripple: support animation duration overwrites ( #9253 ) ( 3bc4cd3 ) ripple: support ripple fade-out on pointer up ( #9694 ) ( efb03c9 ), closes #9577 slider: add focus and blur methods do MatSlider ( #9373 ) ( 2d592a5 ) sort: fix animation; show on hover ( #7608 ) ( cde00df ) stepper: add proper type to stepper buttons ( #9401 ) ( b3d2e78 ) stepper: add the ability to reset a stepper ( #8623 ) ( a6f9fc2 ) stepper: allow for header icons to be customized ( #7482 ) ( adc251c ), closes #7384 table: allow data input to be array, stream ( #9489 ) ( 085d805 )","title":"Features"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_55","text":"aria-describer: exception when attempting to describe a non-element node ( #9392 ) ( 4c7a4f3 ) autocomplete: close panel using alt + up arrow ( #9341 ) ( 2c192d0 ) autocomplete: error when closing from a destroyed view ( #7365 ) ( 2b05106 ), closes #7315 autocomplete: expose MatAutocompleteTrigger in template ( #9703 ) ( 8997db0 ), closes #9687 autocomplete: handle optionSelections being accessed early ( #8802 ) ( 4e1a6a8 ), closes #4616 autocomplete: handle attaching autocomplete to a number input ( #9672 ) ( f75fa15 ), closes #9628 autocomplete: panel not closing on IE when selecting an option with an empty string display value ( #9506 ) ( 95ffe37 ), closes #9479 autocomplete: prevent opening using arrow keys on readonly input ( #9229 ) ( 9d152c0 ), closes #9227 block-scroll-strategy: server-side rendering error ( #9665 ) ( 3acbf26 ) button: accent color not set on fab buttons with build optimizer ( #9376 ) ( b3f8a42 ), closes #9360 button: incorrect text color when no color is passed in on dark theme ( #9234 ) ( 6824375 ), closes #9231 button-toggle: inaccurate name passed down to input if no name is assigned ( #9017 ) ( 54d60df ) card: add camel-cased selectors to content projection ( #6818 ) ( d5a7cce ), closes #6816 card,tabs,toolbar: Make media query breakpoints follow Material spec ( #9284 ) ( 7672913 ) checkbox: underlying native checkbox being rendered when parent uses css column layout ( #9258 ) ( eac1512 ), closes #9049 chips: chip list capturing keyboard events from input ( #9651 ) ( a48f75b ) collections: clean up UniqueSelectionDispatcher listeners on destroy ( #9673 ) ( 26b0635 ) datepicker: calendar controls not being inverted in rtl ( #9219 ) ( 8a3e023 ) datepicker: calendar keyboard controls not working if the user clicks on blank area ( #9494 ) ( 0b8955b ) datepicker: gray out filtered years in multi-year view ( #9563 ) ( 403ebbd ) datepicker: highlight datepicker toggle when calendar is open ( #9426 ) ( e3b5e3f ) datepicker: set border radius on calendar popup ( #9509 ) ( 4e7c1a3 ) dialog: server-side rendering error when attempting to trap focus ( #9698 ) ( acbf3c8 ) divider: add inset styles for icons and lists in cards ( #9242 ) ( d587abe ) expansion: define default expansion header heights via css. ( #9313 ) ( c604834 ) expansion-panel: expand animation jumping ( #8779 ) ( 37575c9 ) expansion-panel: improved accessibility labelling and keyboard default action not being prevented ( #9174 ) ( e62afdf ) focus-monitor: implement OnDestroy logic ( #9305 ) ( 8972bf4 ) focus-monitor: set up global listeners in root zone ( #9542 ) ( afcb3ea ) form-field: unable to override font-size through typography config ( #9463 ) ( 66dc73a ) grid-list: tile being pulled outside the grid if no gap can be found ( #9128 ) ( c8127ed ), closes #4515 icon: prevent parsing the same icon set multiple times ( #9635 ) ( e6e4c3c ) input: floating label not reacting when patching the value without emitting an event ( #9260 ) ( ec6678d ), closes #8982 input: respect text-align value from form-field ( #9397 ) ( 5136361 ) interactivity-checker: carefully handle frame elements ( #9340 ) ( 6f7332b ), closes #3372 keycodes: incorrect key code for nine ( #9568 ) ( 637e1b6 ), closes #9567 list: incorrect padding for list-items with avatars, icons ( #9500 ) ( 39a5861 ), closes #9156 list-key-manager: maintain selected index when amount of items changes ( #9164 ) ( 4f65276 ) menu: always focus first menu item ( #9383 ) ( 8430617 ), closes #9252 menu: inconsistent side padding for nested menu items in RTL ( #9124 ) ( cc24c7c ) menu: set appropriate origin when restoring focus ( #9303 ) ( 278e25a ), closes #9292 menu,toolbar: avoid potential server-side rendering errors ( #9423 ) ( dfa68db ) native-date-adapter: avoid error when formatting edge case dates in IE11 and Edge ( #9523 ) ( dd2fbc8 ) overlay: attempting to position overlay if it was detached immediately after being attached ( #9507 ) ( c7ad145 ), closes #9406 overlay: ConnectedOverlayDirective not updating positions after first open ( #9579 ) ( d0011c4 ) overlay: default options not being applied correctly ( #9088 ) ( b153947 ) overlay: expose event object in backdropClick stream ( #9716 ) ( 5611947 ), closes #9713 overlay: onPositionChange stream not being completed ( #8562 ) ( 7fe651b ) overlay: OverlayKeyboardDispatcher not dispatching events when propagation is stopped ( #9546 ) ( e30852a ) overlay: server-side rendering error when creating backdrop element ( #9448 ) ( a1db4e4 ) overlay: transparent overlay not blocking scroll on Firefox 57 ( #9446 ) ( d0ad3b7 ), closes #8924 overlay: unable to change CdkConnectedOverlay origin dynamically ( #9358 ) ( df44767 ), closes #9353 progress-bar: prevent users from tabbing into underlying SVG on IE ( #9638 ) ( 0a1904d ) progress-bar: remove data url for CSP compliance ( #8898 ) ( 0f2ac9b ) progress-spinner: element size not updated when diamater is changed ( #8697 ) ( 6d4c7ae ) radio: add support for tabindex on radio-buttons ( #9467 ) ( f1c3e2c ), closes #9427 scrolling: implement ngOnDestroy in ScrollDispatcher ( #9608 ) ( fd17cf2 ) select: close panel on alt + arrow key presses ( #9250 ) ( 7c78c93 ) select: don't restore focus unless an option was selected ( #8964 ) ( 9dc43de ), closes #8915 select: handle async changes to the option label ( #9159 ) ( 245caae ), closes #7923 select: handle keyboard events from inside panel ( #9361 ) ( 69270ef ) select: support changing the value using left/right arrow keys while closed ( #9578 ) ( 83b369e ) selection-model: incorrect initial value when empty array is passed in single-selection mode ( #9287 ) ( 075464f ), closes #9273 slide-toggle: truncate label content with ellipsis ( #9166 ) ( 68bb44c ), closes #5212 slider: slider emiting changes on slide end when disabled ( #9434 ) ( 1e2fe90 ) snack-bar: indicate in afterDismissed whether dismissal was a result of an action ( #9154 ) ( 829506d ), closes #9147 stepper: header collapsing if box-sizing is set ( #9505 ) ( ffc5381 ), closes #9501 stepper: overriding default completed logic when resetting ( #9650 ) ( 7e352ce ) stepper: support going to first/last steps via home/end keys ( #9632 ) ( 834aecc ) stepper: throw when out-of-bounds value is assigned to selectedIndex ( #9127 ) ( f54377c ) stepper: unable to skip optional steps in linear stepper ( #9245 ) ( 9dba30b ), closes #9239 tab-link: preventDefault action when disabled tab link is clicked. ( #9357 ) ( 8de5e83 ) table: data source should sort empty values correctly ( #8698 ) ( f213f6c ) tabs: move focus to first/last tabs using home/end ( #9171 ) ( 24f62eb ) theming: provide text color through mat-app-background ( #9262 ) ( 1e7eeab ) tooltip: match mobile dimensions from spec ( #9181 ) ( 63a5588 ), closes #9039","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#performance-improvements_9","text":"menu,select: panel repainting on scroll ( #7721 ) ( 13410bd ), closes #7716","title":"Performance Improvements"},{"location":"site-files/project/0-CHANGELOG/#520-beta0-2018-01-30","text":"","title":"5.2.0-beta.0 (2018-01-30)"},{"location":"site-files/project/0-CHANGELOG/#features_24","text":"autocomplete: add the ability automatically keep the first option active ( #9495 ) ( b42fcb9 ), closes #8423 button: expose ripple instance ( #9170 ) ( 17e36fe ), closes #4179 checkbox: expose ripple instance ( #9176 ) ( e09c0a6 ) datepicker: allow for mat-datepicker-toggle icon to be customized ( #9487 ) ( 01867ad ) dialog: support using dialog content directives with template dialogs ( #9379 ) ( 99b768e ), closes #5412 drawer: expose CdkScrollable instance ( #9183 ) ( 2d03af0 ), closes #9136 expansion-panel: support two-way binding for the expanded property ( #9327 ) ( a72085b ), closes #9311 layout: add window breakpoints from spec ( #9318 ) ( 1038950 ) list-key-manager: add support for horizontal directions ( #9122 ) ( ab02367 ) menu: support lazy rendering and passing in context data ( #9271 ) ( 9fed87c ), closes #9251 observe-content: allow for the MutationObserver to be disabled ( #9025 ) ( aa2e76c ) overlay: make it easier to override backdrop color ( #9114 ) ( 3d18006 ), closes #7855 paginator: allow page size selection to be disabled ( #8373 ) ( c8743e7 ), closes #8359 portal: expose attached result in CdkPortalOutlet ( #9326 ) ( b626b13 ), closes #9304 ripple: support animation duration overwrites ( #9253 ) ( 3bc4cd3 ) slider: add focus and blur methods do MatSlider ( #9373 ) ( 2d592a5 ) stepper: add proper type to stepper buttons ( #9401 ) ( b3d2e78 ) stepper: add the ability to reset a stepper ( #8623 ) ( a6f9fc2 )","title":"Features"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_56","text":"aria-describer: exception when attempting to describe a non-element node ( #9392 ) ( 4c7a4f3 ) autocomplete: close panel using alt + up arrow ( #9341 ) ( 2c192d0 ) autocomplete: error when closing from a destroyed view ( #7365 ) ( 2b05106 ), closes #7315 autocomplete: handle optionSelections being accessed early ( #8802 ) ( 4e1a6a8 ), closes #4616 autocomplete: prevent opening using arrow keys on readonly input ( #9229 ) ( 9d152c0 ), closes #9227 button: accent color not set on fab buttons with build optimizer ( #9376 ) ( b3f8a42 ), closes #9360 button: incorrect text color when no color is passed in on dark theme ( #9234 ) ( 6824375 ), closes #9231 button-toggle: inaccurate name passed down to input if no name is assigned ( #9017 ) ( 54d60df ) card: add camel-cased selectors to content projection ( #6818 ) ( d5a7cce ), closes #6816 card,tabs,toolbar: Make media query breakpoints follow Material spec ( #9284 ) ( 7672913 ) checkbox: underlying native checkbox being rendered when parent uses css column layout ( #9258 ) ( eac1512 ), closes #9049 chips: chip list capturing keyboard events from input ( #9651 ) ( a48f75b ) datepicker: calendar controls not being inverted in rtl ( #9219 ) ( 8a3e023 ) datepicker: calendar keyboard controls not working if the user clicks on blank area ( #9494 ) ( 0b8955b ) datepicker: gray out filtered years in multi-year view ( #9563 ) ( 403ebbd ) datepicker: highlight datepicker toggle when calendar is open ( #9426 ) ( e3b5e3f ) datepicker: set border radius on calendar popup ( #9509 ) ( 4e7c1a3 ) expansion: define default expansion header heights via css. ( #9313 ) ( c604834 ) expansion-panel: improved accessibility labelling and keyboard default action not being prevented ( #9174 ) ( e62afdf ) focus-monitor: implement OnDestroy logic ( #9305 ) ( 8972bf4 ) focus-monitor: set up global listeners in root zone ( #9542 ) ( afcb3ea ) form-field: unable to override font-size through typography config ( #9463 ) ( 66dc73a ) grid-list: tile being pulled outside the grid if no gap can be found ( #9128 ) ( c8127ed ), closes #4515 icon: prevent parsing the same icon set multiple times ( #9635 ) ( e6e4c3c ) input: floating label not reacting when patching the value without emitting an event ( #9260 ) ( ec6678d ), closes #8982 input: respect text-align value from form-field ( #9397 ) ( 5136361 ) interactivity-checker: carefully handle frame elements ( #9340 ) ( 6f7332b ), closes #3372 keycodes: incorrect key code for nine ( #9568 ) ( 637e1b6 ), closes #9567 list: incorrect padding for list-items with avatars, icons ( #9500 ) ( 39a5861 ), closes #9156 list-key-manager: maintain selected index when amount of items changes ( #9164 ) ( 4f65276 ) menu: always focus first menu item ( #9383 ) ( 8430617 ), closes #9252 menu: inconsistent side padding for nested menu items in RTL ( #9124 ) ( cc24c7c ) menu: set appropriate origin when restoring focus ( #9303 ) ( 278e25a ), closes #9292 menu,toolbar: avoid potential server-side rendering errors ( #9423 ) ( dfa68db ) native-date-adapter: avoid error when formatting edge case dates in IE11 and Edge ( #9523 ) ( dd2fbc8 ) overlay: attempting to position overlay if it was detached immediately after being attached ( #9507 ) ( c7ad145 ), closes #9406 overlay: ConnectedOverlayDirective not updating positions after first open ( #9579 ) ( d0011c4 ) overlay: default options not being applied correctly ( #9088 ) ( b153947 ) overlay: server-side rendering error when creating backdrop element ( #9448 ) ( a1db4e4 ) overlay: transparent overlay not blocking scroll on Firefox 57 ( #9446 ) ( d0ad3b7 ), closes #8924 overlay: unable to change CdkConnectedOverlay origin dynamically ( #9358 ) ( df44767 ), closes #9353 progress-bar: remove data url for CSP compliance ( #8898 ) ( 0f2ac9b ) progress-spinner: element size not updated when diamater is changed ( #8697 ) ( 6d4c7ae ) radio: add support for tabindex on radio-buttons ( #9467 ) ( f1c3e2c ), closes #9427 scrolling: implement ngOnDestroy in ScrollDispatcher ( #9608 ) ( fd17cf2 ) select: close panel on alt + arrow key presses ( #9250 ) ( 7c78c93 ) select: don't restore focus unless an option was selected ( #8964 ) ( 9dc43de ), closes #8915 select: handle async changes to the option label ( #9159 ) ( 245caae ), closes #7923 select: handle keyboard events from inside panel ( #9361 ) ( 69270ef ) select: support changing the value using left/right arrow keys while closed ( #9578 ) ( 83b369e ) selection-model: incorrect initial value when empty array is passed in single-selection mode ( #9287 ) ( 075464f ), closes #9273 slide-toggle: truncate label content with ellipsis ( #9166 ) ( 68bb44c ), closes #5212 slider: slider emiting changes on slide end when disabled ( #9434 ) ( 1e2fe90 ) snack-bar: indicate in afterDismissed whether dismissal was a result of an action ( #9154 ) ( 829506d ), closes #9147 stepper: header collapsing if box-sizing is set ( #9505 ) ( ffc5381 ), closes #9501 stepper: throw when out-of-bounds value is assigned to selectedIndex ( #9127 ) ( f54377c ) stepper: unable to skip optional steps in linear stepper ( #9245 ) ( 9dba30b ), closes #9239 tab-link: preventDefault action when disabled tab link is clicked. ( #9357 ) ( 8de5e83 ) table: data source should sort empty values correctly ( #8698 ) ( f213f6c ) tabs: move focus to first/last tabs using home/end ( #9171 ) ( 24f62eb ) theming: provide text color through mat-app-background ( #9262 ) ( 1e7eeab )","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#performance-improvements_10","text":"menu,select: panel repainting on scroll ( #7721 ) ( 13410bd ), closes #7716","title":"Performance Improvements"},{"location":"site-files/project/0-CHANGELOG/#511-silk-xylophone-2018-01-29","text":"","title":"5.1.1 silk-xylophone (2018-01-29)"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_57","text":"autocomplete: close panel using alt + up arrow ( #9341 ) ( a1ad82b ) autocomplete: error when closing from a destroyed view ( #7365 ) ( 00820f7 ), closes #7315 autocomplete: handle optionSelections being accessed early ( #8802 ) ( ec6168b ), closes #4616 autocomplete: prevent opening using arrow keys on readonly input ( #9229 ) ( f3b50b0 ), closes #9227 button: accent color not set on fab buttons with build optimizer ( #9376 ) ( f6a59cd ), closes #9360 button-toggle: inaccurate name passed down to input if no name is assigned ( #9017 ) ( fda978a ) card: add camel-cased selectors to content projection ( #6818 ) ( 6e4f90f ), closes #6816 card,tabs,toolbar: Make media query breakpoints follow Material spec ( #9284 ) ( d6b3cc8 ) checkbox: underlying native checkbox being rendered when parent uses css column layout ( #9258 ) ( 58b665e ), closes #9049 datepicker: calendar controls not being inverted in rtl ( #9219 ) ( af38b97 ) datepicker: calendar keyboard controls not working if the user clicks on blank area ( #9494 ) ( 7cea0b6 ) datepicker: highlight datepicker toggle when calendar is open ( #9426 ) ( 37d8716 ) datepicker: set border radius on calendar popup ( #9509 ) ( 3f87dc4 ) expansion-panel: improved accessibility labelling and keyboard default action not being prevented ( #9174 ) ( 444cee8 ) focus-monitor: implement OnDestroy logic ( #9305 ) ( e6cdce5 ) grid-list: tile being pulled outside the grid if no gap can be found ( #9128 ) ( 5535325 ), closes #4515 input: floating label not reacting when patching the value without emitting an event ( #9260 ) ( 4a00499 ), closes #8982 interactivity-checker: carefully handle frame elements ( #9340 ) ( 305a81c ), closes #3372 keycodes: incorrect key code for nine ( #9568 ) ( b489559 ), closes #9567 list: incorrect padding for list-items with avatars, icons ( #9500 ) ( db520cf ), closes #9156 menu: inconsistent side padding for nested menu items in RTL ( #9124 ) ( 53d48f6 ) menu: set appropriate origin when restoring focus ( #9303 ) ( 2bf9ad8 ), closes #9292 native-date-adapter: avoid error when formatting edge case dates in IE11 and Edge ( #9523 ) ( d25ab57 ) overlay: default options not being applied correctly ( #9088 ) ( 6f8f226 ) overlay: server-side rendering error when creating backdrop element ( #9448 ) ( 5c98185 ) overlay: transparent overlay not blocking scroll on Firefox 57 ( #9446 ) ( e2999a8 ), closes #8924 progress-spinner: element size not updated when diamater is changed ( #8697 ) ( 23f0c47 ) select: close panel on alt + arrow key presses ( #9250 ) ( c3ec94d ) select: don't restore focus unless an option was selected ( #8964 ) ( 960b7cf ), closes #8915 select: handle async changes to the option label ( #9159 ) ( 63a5184 ), closes #7923 select: handle keyboard events from inside panel ( #9361 ) ( 0d233b2 ) select: support changing the value using left/right arrow keys while closed ( #9578 ) ( b11523a ) selection-model: incorrect initial value when empty array is passed in single-selection mode ( #9287 ) ( 5d0fb95 ), closes #9273 slide-toggle: truncate label content with ellipsis ( #9166 ) ( 4bd96ce ), closes #5212 stepper: header collapsing if box-sizing is set ( #9505 ) ( ccc8fbb ), closes #9501 stepper: unable to skip optional steps in linear stepper ( #9245 ) ( 517ea57 ), closes #9239 tab-link: preventDefault action when disabled tab link is clicked. ( #9357 ) ( 0b5806b ) theming: provide text color through mat-app-background ( #9262 ) ( 6d66a16 ) overlay: make it easier to override backdrop color ( #9114 ) ( 4ff1fd4 ), closes #7855","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#510-burlap-bezel-2018-01-17","text":"","title":"5.1.0 burlap-bezel (2018-01-17)"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_58","text":"aria-describer: server-side rendering error during cleanup ( #8903 ) ( 8a3b19e ), closes #8901 autocomplete: not implementing setDisabledState from ControlValueAccessor ( #8746 ) ( 92bc503 ), closes #8735 autocomplete: not resetting completely when overlay is detached externally ( #8515 ) ( a8cd033 ) autocomplete: panelClosingActions emitting twice in some cases ( #8998 ) ( 4f97232 ) autocomplete: panelClosingActions emitting when tabbing away from a closed autocomplete ( #8774 ) ( 92dcd76 ), closes #8763 chip,stepper: compile cleanly with \"fullTemplateTypeCheck\" ( #8889 ) ( 50967b6 ) chips: being able to focus disabled chip by clicking ( #8892 ) ( bfd513d ), closes #8883 chips: event propagation not stopped by remove button ( #8772 ) ( c7e2d4e ), closes #8771 connected-position-strategy: allow positions to be updated after init ( #8800 ) ( b7071ba ) datepicker: leaking backdropClick subscriptions ( #8919 ) ( 3728555 ) datepicker: not resetting when detached externally ( #9133 ) ( a0bd162 ) datepicker: typo in MatMonthView export ( #9055 ) ( 2250747 ) datepicker: unable to close calendar when opened on focus in IE11 ( #8918 ) ( a411382 ), closes #8914 dialog: change order of button actions ( #9021 ) ( 230b297 ) dialog: hide all non-overlay content from assistive technology ( #9016 ) ( d82124d ), closes #7787 dialog: improved type safety in dialog ref result ( #8766 ) ( 571ef46 ), closes #8760 directionality: complete dir change observable ( #8874 ) ( 41f5fe2 ) drawer: infinite loop when two-way opened binding is toggled mid-animation ( #8872 ) ( 7c84490 ), closes #8869 drawer: margins not being updated on direction changes ( #9161 ) ( ff1c5f1 ), closes #9158 drawer: unable to close using keyboard if there are no focusable elements ( #8783 ) ( fba3728 ) expansion: accordion emitting closed event while closed ( #9101 ) ( 92ded30 ), closes #9098 focus-trap: server-side rendering error ( #9001 ) ( c77f69f ), closes #8981 form-field: hide required asterisk if control is disabled ( #8799 ) ( 1c2f6b7 ), closes #8251 global-position-strategy: error if disposed before applied ( #8761 ) ( f565560 ), closes #8758 icon: handle values with unnecessary spaces being passed into fontIcon and fontSet ( #9056 ) ( 1a735bc ), closes #9054 icon: server-side error when registering icons ( #8492 ) ( b6da765 ), closes #6787 input: align caret color with spec ( #8692 ) ( b0449ab ) input: allow color inputs in mat-form-field ( #8748 ) ( 982982b ), closes #8686 layout: handle platforms that don't support matchMedia ( #8775 ) ( 4846e4c ), closes #8710 list: prevent list icon shrinking ( #9211 ) ( 5737b9f ), closes #8699 menu: not closing when overlay is detached externally ( #8868 ) ( 4d8c712 ) paginator: coerce string values ( #8946 ) ( 0388202 ) paginator: set default display value ( #8455 ) ( bd50fa6 ), closes #8454 progress-bar: animation tearing in Firefox 57 ( #9123 ) ( 9e47d40 ), closes #7606 select: active item not being updated on click in multiple mode ( #7808 ) ( bc27fea ) select: alt + arrow key not opening in single-selection mode ( #8910 ) ( a4c042b ) select: change event emitted before data binding is updated ( #8740 ) ( 5819385 ), closes #8739 select: complete state change event ( #8777 ) ( 4f78613 ) select: handle optionSelectionChanges being accessed early ( #8830 ) ( 97ebd76 ) select: not marked as touched when clicking away ( #8784 ) ( 984dece ), closes #8573 select: remove aria-owns when options aren't in the DOM ( #9091 ) ( d85c44b ), closes #7023 select: support using shift + arrow key to toggle items in a multi-select ( #9037 ) ( f82bbae ) selection-list: allow jumping to first/last item using home/end ( #9062 ) ( bd36529 ) selection-list: allow users to jump focus to a particular item by typing ( #9026 ) ( af44b9d ) selection-list: options not marked as selected if value is assigned too early ( #9090 ) ( bd7c751 ), closes #9085 selection-list: preselected options not being added to the model value ( #9116 ) ( 91ea1a1 ) selection-list: remove selected option from model value on destroy ( #9106 ) ( f8cd8eb ) selection-list: unable to select using the enter key ( #8595 ) ( 9105302 ), closes #8589 slider: prevent slider thumb from getting cropped ( #8061 ) ( 0b05a1f ) stepper: completed binding not being considered when moving from a step without a stepControl ( #9126 ) ( 32d0dbb ), closes #8110 stepper: use up/down arrows for navigating vertical stepper ( #8920 ) ( 7b78b74 ) table: inaccurate row height ( #8303 ) ( baa8a6e ), closes #8299 too strict peer dependency of angular ( #9355 ) ( 7187670 ), closes #9328 table: row content not centered in IE ( #6820 ) ( 1b79e92 ), closes #6813 table: set height of mat-header-row to 56px ( #8215 ) ( 0c4ee2e ) theming: light text on colored backgrounds should be opaque ( #7421 ) ( 1701b98 ) typography: deprecation warning if null font family is passed in ( #9002 ) ( d8c1392 ), closes #8973 typography: handle inherit being set as a typography value ( #8721 ) ( 139c506 ), closes #8700","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#features_25","text":"autocomplete: allow option ripples to be disabled ( #8851 ) ( ff31ac8 ) close-scroll-strategy: add scroll threshold option ( #8656 ) ( c0ff761 ) datepicker: add animation to calendar popup ( #8542 ) ( c3e267f ) datepicker: add year selection mode ( #8565 ) ( cdbabf7 ) dialog: allow default dialog options to be configurable ( #9113 ) ( 05304f0 ) dialog: allow for closing on navigation to be disabled ( #9024 ) ( c349c58 ), closes #8983 dialog: allow for single dialog scroll strategy to be overwritten ( #8726 ) ( c7de734 ), closes #8706 divider: move divider out of mat-list ( #5862 ) ( bd0ec64 ) elevations: Allow tonal color elevations through mat-elevation mixin. ( #8995 ) ( 21d004a ) expansion-panel: allow for content to be rendered lazily ( #8243 ) ( 60ba0a7 ), closes #8230 table: support directly adding column, row, and header defs ( #8744 ) ( 693c8e8 ) tabs: add animation done event #5238 ( #6811 ) ( 3a52624 ) tooltip: add injection token for specifying the default delays ( #8109 ) ( 3dcf4cd ), closes #7928","title":"Features"},{"location":"site-files/project/0-CHANGELOG/#performance-improvements_11","text":"ripple: do not register events if ripples are disabled initially ( #8882 ) ( 58b93dc ) ripple: use passive event listeners ( #8719 ) ( 12feff7 )","title":"Performance Improvements"},{"location":"site-files/project/0-CHANGELOG/#504-linoleum-wormhole-2018-01-08","text":"","title":"5.0.4 linoleum-wormhole (2018-01-08)"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_59","text":"chips: being able to focus disabled chip by clicking ( #8892 ) ( 699b7c2 ), closes #8883 datepicker: typo in MatMonthView export ( #9055 ) ( 3e99bcc ) dialog: hide all non-overlay content from assistive technology ( #9016 ) ( ef06a9c ), closes #7787 directionality: complete dir change observable ( #8874 ) ( a2438fa ) drawer: margins not being updated on direction changes ( #9161 ) ( f64a857 ), closes #9158 expansion: accordion emitting closed event while closed ( #9101 ) ( 50161ae ), closes #9098 focus-trap: server-side rendering error ( #9001 ) ( 7698193 ), closes #8981 icon: handle values with unnecessary spaces being passed into fontIcon and fontSet ( #9056 ) ( b71d954 ), closes #9054 icon: server-side error when registering icons ( #8492 ) ( 61b12b6 ), closes #6787 input: align caret color with spec ( #8692 ) ( 1eb8450 ) layout: handle platforms that don't support matchMedia ( #8775 ) ( 673a636 ), closes #8710 progress-bar: animation tearing in Firefox 57 ( #9123 ) ( 255f9d8 ), closes #7606 select: active item not being updated on click in multiple mode ( #7808 ) ( ce2487e ) select: not marked as touched when clicking away ( #8784 ) ( c0209fc ), closes #8573 select: remove aria-owns when options aren't in the DOM ( #9091 ) ( 4a03497 ), closes #7023 select: support using shift + arrow key to toggle items in a multi-select ( #9037 ) ( 76055a4 ) selection-list: allow jumping to first/last item using home/end ( #9062 ) ( 6d70f2c ) selection-list: allow users to jump focus to a particular item by typing ( #9026 ) ( 7167113 ) selection-list: options not marked as selected if value is assigned too early ( #9090 ) ( c61a289 ), closes #9085 selection-list: preselected options not being added to the model value ( #9116 ) ( 2235239 ) selection-list: remove selected option from model value on destroy ( #9106 ) ( 02a1334 ) stepper: completed binding not being considered when moving from a step without a stepControl ( #9126 ) ( 9da4e71 ), closes #8110 stepper: use up/down arrows for navigating vertical stepper ( #8920 ) ( a6c7888 ) typography: deprecation warning if null font family is passed in ( #9002 ) ( 497816b ), closes #8973","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#performance-improvements_12","text":"ripple: do not register events if ripples are disabled initially ( #8882 ) ( 4838f02 )","title":"Performance Improvements"},{"location":"site-files/project/0-CHANGELOG/#503-concrete-aeroplane-2018-01-02","text":"","title":"5.0.3 concrete-aeroplane (2018-01-02)"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_60","text":"autocomplete: panelClosingActions emitting twice in some cases ( #8998 ) ( 22c3259 ) dialog: change order of button actions ( #9021 ) ( 7b879a5 )","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#502-flannel-battlestar-2017-12-19","text":"","title":"5.0.2 flannel-battlestar (2017-12-19)"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_61","text":"aria-describer: server-side rendering error during cleanup ( #8903 ) ( b2370ce ), closes #8901 autocomplete: not implementing setDisabledState from ControlValueAccessor ( #8746 ) ( ae639da ), closes #8735 autocomplete: not resetting completely when overlay is detached externally ( #8515 ) ( 8e14343 ) autocomplete: panelClosingActions emitting when tabbing away from a closed autocomplete ( #8774 ) ( 3066929 ), closes #8763 autosize: not updating when window is resized ( #8619 ) ( 97f67c5 ), closes #8610 autosize: remove resize handle ( #8621 ) ( 28452ab ) chip,stepper: compile cleanly with \"fullTemplateTypeCheck\" ( #8889 ) ( eec7c73 ) chips: event propagation not stopped by remove button ( #8772 ) ( 0236623 ), closes #8771 connected-position-strategy: allow positions to be updated after init ( #8800 ) ( c207219 ) datepicker: leaking backdropClick subscriptions ( #8919 ) ( baf22ec ) dialog: improved type safety in dialog ref result ( #8766 ) ( 657f649 ), closes #8760 drawer: infinite loop when two-way opened binding is toggled mid-animation ( #8872 ) ( 241be7a ), closes #8869 drawer: unable to close using keyboard if there are no focusable elements ( #8783 ) ( 9aabb14 ) global-position-strategy: error if disposed before applied ( #8761 ) ( 8d79cc8 ), closes #8758 input: allow color inputs in mat-form-field ( #8748 ) ( 92d198b ), closes #8686 menu: not closing when overlay is detached externally ( #8868 ) ( 534c797 ) overlay: export OverlaySizeConfig ( #8932 ) ( adfa31e ) paginator: set default display value ( #8455 ) ( ccb325e ), closes #8454 portal: inaccurate hasAttahed result and portal being cleared if attached too early ( #8642 ) ( 93e6c53 ), closes /github.com/angular/material2/blob/master/src/lib/dialog/dialog-container.ts#L118 #8628 select: alt + arrow key not opening in single-selection mode ( #8910 ) ( 85f83f9 ) select: change event emitted before data binding is updated ( #8740 ) ( 2493797 ), closes #8739 select: complete state change event ( #8777 ) ( 46411e3 ) safety check for window in common module. ( #8816 ) ( a6cedd2 ), closes #8809 select: handle optionSelectionChanges being accessed early ( #8830 ) ( c98321c ) select,input: inconsistent disabled text color ( #7794 ) ( 4d47750 ), closes #7793 selection-list: unable to select using the enter key ( #8595 ) ( c23853f ), closes #8589 slider: prevent slider thumb from getting cropped ( #8061 ) ( f33c7cf ) tooltip: not closing when scrolling away ( #8688 ) ( e96a847 ) typography: handle inherit being set as a typography value ( #8721 ) ( e45b164 ), closes #8700","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#performance-improvements_13","text":"ripple: use passive event listeners ( #8719 ) ( d67f971 )","title":"Performance Improvements"},{"location":"site-files/project/0-CHANGELOG/#501-ceramic-gravy-2017-12-11","text":"","title":"5.0.1 ceramic-gravy (2017-12-11)"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_62","text":"common: safety check for window in common module. ( #8816 ) ( fb9ea53 ), closes #8809 autosize: not updating when window is resized ( #8619 ) ( b8664b8 ), closes #8610 autosize: remove resize handle ( #8621 ) ( 0d2a419 ) overlay: export OverlaySizeConfig ( #8932 ) ( a626c8f ) portal: inaccurate hasAttached result and portal being cleared if attached too early ( #8642 ) ( b488b39 ), closes #8628 select,input: inconsistent disabled text color ( #7794 ) ( f31be6f ), closes #7793 tooltip: not closing when scrolling away ( #8688 ) ( d5a2fca )","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#500-velvet-cuttlefish-2017-12-06","text":"","title":"5.0.0 velvet-cuttlefish (2017-12-06)"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_63","text":"drawer: avoid initial animation when rendering on the server ( #8828 ) ( 2b1f84e ), closes #6865 tabs: hide tab body content after leaving the tab's view area ( #8827 ) ( 05d726d )","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#features_26","text":"selection-list: support for ngModel ( #7456 ) ( 3fbb28a ), closes #6896","title":"Features"},{"location":"site-files/project/0-CHANGELOG/#500-rc3-ink-sparkler-2017-12-05","text":"","title":"5.0.0-rc.3 ink-sparkler (2017-12-05)"},{"location":"site-files/project/0-CHANGELOG/#breaking-changes_7","text":"overlay: OverlayRef.getConfig returns an immutable version of the config object. overlay: OverlayRef.updateSize now accepts a OverlaySizeConfig rather than being based on the existing config object.","title":"BREAKING CHANGES"},{"location":"site-files/project/0-CHANGELOG/#features_27","text":"checkbox: Support checkbox click action config ( #8521 ) ( 537b8b5 ) datepicker: add opened input binding ( #8098 ) ( 2b9bc57 ), closes #8094 form-field: add support for separate label and placeholder ( #8223 ) ( d6fec35 ), closes #6194 ripple: handle touch events ( #7927 ) ( 65cd1a1 ), closes #7062 sort: add the ability to disable sort toggling ( #8643 ) ( 7576a73 ), closes #8622","title":"Features"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_64","text":"checkbox: don't hide focus indicator on space press. ( #8539 ) ( 9e35bf0 ) chip-list: fix error state changes in chip list ( #8425 ) ( d2c11ca ) chip-list: stateChanges stream not being completed ( #8636 ) ( 61dada8 ) datepicker: calendar overlapping input when in a fallback position ( #8099 ) ( e5b7afe ) datepicker: keyboard fixes (enter matches click behavior corre\u2026 ( #7370 ) ( 0b2757c ) datepicker: placeholder not floating when an invalid value is typed in ( #8603 ) ( f0789eb ), closes #8575 directionality: change event now emit the new value ( #8424 ) ( 841f753 ) drawer: allow for drawer container to auto-resize while open ( #8488 ) ( e7b412a ), closes #6743 form-field: unable to tap on certain types of inputs on iOS ( #8543 ) ( 74c1d01 ), closes #8001 input: Add pure-CSS floating label logic that will work on... ( #8491 ) ( 1a7a61a ) input: stuck in focused state if disabled while in focus ( #8637 ) ( bec4cfe ), closes #8634 list: fix role for list-item ( #8767 ) ( 8f7c7cf ) menu: not closing when overlay is detached externally ( #8654 ) ( dd3094f ) menu: Set menu-item icon color only when not set on mat-icon ( #8614 ) ( d0cb077 ), closes #8594 overlay: add horizontal fallback positions to the connected overlay defaults ( #8689 ) ( e939ea7 ), closes #8318 overlay: make config immutable for existing refs ( #7376 ) ( 2dbc766 ) progress-spinner: value not updated while in indeterminate mode ( #8269 ) ( 9b68b54 ) radio: coerce checked input binding ( #8556 ) ( f41fa8c ) select: option not truncated correctly in multiple mode ( #7857 ) ( d04aa19 ) selection-model: inaccurate selected value when accessed in change subscription ( #8599 ) ( 0f7fbda ), closes #8584 sidenav: remove min-width ( #7748 ) ( 55a9f9a ) slide-toggle: height collapsing if component doesn't have a label ( #8270 ) ( 8205cb2 ), closes #8264 snack-bar: not applying all panel classes in IE ( #8578 ) ( a6d0847 ) stepper: block linear stepper for pending components ( #8646 ) ( 53c94c7 ), closes #8645 stepper: set appropriate aria-orientation ( #8657 ) ( 9582b8b ) tabs: pagination not enabled on init on some browsers ( #8104 ) ( 2c34a7e ), closes #7983 blurry ripples for slide-toggle, radio, checkbox in MS edge. ( #8514 ) ( 8b7a3af ), closes #8392 tooltip: close tooltip if message is cleared while open ( #8544 ) ( d66284d ) tooltip: unable to type in input with tooltip on iOS ( #8534 ) ( 75c665a ), closes #8331","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#500-rc2-2017-11-27","text":"","title":"5.0.0-rc.2 (2017-11-27)"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_65","text":"overlay: disposed overlays not removed from the key event stack ( #8226 ) ( 461dfaf ) tabs: fix accidentally setting top instead of width after removing Renderer use ( #8602 ) ( 6e865b7 )","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#features_28","text":"The examples on material.angular.io are now opened externally via StackBlitz instead of Plunker.","title":"Features"},{"location":"site-files/project/0-CHANGELOG/#500-rc1-2017-11-20","text":"","title":"5.0.0-rc.1 (2017-11-20)"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_66","text":"autosize: incorrect height with long placeholders ( #8024 ) ( ad7cb4a ), closes #8013 cdk-observers: prevent attribute renaming in closure compilers advanced optimizations ( #7894 ) ( 8dfe470 ) checkbox: Set aria-checkbox to mixed for indeterminate checkbox ( #8089 ) ( 3037a90 ) chip: fix placeholder and text overlap ( #8468 ) ( 81db650 ) chips: remove chip bottom margin in sibling chips ( #8198 ) ( d79903a ) chips: use all available space for the input ( #7462 ) ( c725249 ) datepicker: add missing exportAs ( #7782 ) ( d6d9ff8 ) datepicker: correct DST issues on IE 11 ( #7858 ) ( 2f2325a ) datepicker: correct overlay broad style selector ( #8130 ) ( f69c8e6 ) datepicker: prevent matInput from clobbering date value ( #7831 ) ( 4b59ca1 ) drawer: invalid margin declaration when rendering server-side ( #8324 ) ( 5600b80 ) drawer: missing elevation shadow ( #8387 ) ( b0756a2 ), closes #8386 drawer: re-add openedStart and closedStart events ( #7747 ) ( 7610c7c ) expansion: prevent memory leak by calling parent ngOnDestroy ( #8410 ) ( f6bd9b0 ) fab-buttons: vertically align icons inside fab buttons ( #8442 ) ( 43217ef ) form-field: jumping underline in Edge and Firefox ( #8480 ) ( c7ab877 ), closes #8395 icon: remove IDs from source icon set from rendered output ( #8266 ) ( 76806e3 ) input: add aria-required to inputs ( #8034 ) ( 8178d6f ) input: remove native IE reveal icon ( #8439 ) ( 47055a7 ), closes #8390 select: error when attempting to open before init ( #8242 ) ( ba36d3a ) progress-spinner: coerceNumber values ( #7791 ) ( b6712f8 ) list: multi-line list item spacing ( #8339 ) ( bb504ad ), closes #8333 menu: return focus to root trigger when closed by mouse ( #8348 ) ( b085dc6 ), closes #8290 overlay: better handling of server-side rendering ( #8422 ) ( 0f83b20 ), closes #8412 overlay: complete key event stream on dispose ( #8341 ) ( b437b45 ) overlay: remove global keydown listener when there are no open overlays ( #8389 ) ( 131272a ) progress-spinner: default strokeWidth to 10% of the diameter ( #7746 ) ( b997353 ) slide-toggle: drag not working in edge ( #8421 ) ( d6f287e ), closes #8391 snack-bar: complete onAction observable on close ( #8183 ) ( bc8560e ) stepper: update state when steps change ( #8398 ) ( 2bc0b41 ) tabs: detach tab portal when tab hides from view ( #8486 ) ( fbf2987 ) tooltip: allow toolip to reopen when closed by detaching overlay ( #8232 ) ( 0719c38 ) consistently coerce boolean and number properties ( #7283 ) ( 3ca801a ) replace extendObject utility w/ object spread ( #7372 ) ( ea54edb ) using correct global name in rollup bundle ( #8407 ) ( 40be1f2 ) TypeScript interfaces are now documented on https://material.angular.io","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#features_29","text":"a11y: add autoCapture option to cdkTrapFocus ( #7641 ) ( 20b47d7 ) datepicker: dispatch events when datepicker is opened and closed ( #7792 ) ( 998153a ) dialog: add ariaLabel and focusOnOpen config options ( #6558 ) ( dad5922 ) gestures: add injection token for specifying Hammer.js options ( #8106 ) ( f2a0206 ), closes #7097 menu: allow disabling ripples on items ( #8388 ) ( ce23395 ), closes #8261 overlay: add option to re-use last preferred position when re-applying to open connected overlay ( #7805 ) ( f83beb8 ) reposition-scroll-strategy: add option for closing once the user scrolls away ( #8233 ) ( 58598c4 ) slider: support specifying tabindex ( #7848 ) ( 8e9dade ) tab-nav-bar: allow setting tabindex for links ( #7809 ) ( a041253 )","title":"Features"},{"location":"site-files/project/0-CHANGELOG/#500-rc0-cesium-cephalopod-2017-11-06","text":"","title":"5.0.0-rc0 cesium-cephalopod (2017-11-06)"},{"location":"site-files/project/0-CHANGELOG/#highlights_8","text":"First release candidate for Angular Material and CDK! The team now believes that APIs and behaviors are stable and mature enough to exit beta. Please continue to file issues that help us eliminate more bugs from the forthcoming 5.0.0 release. Moving forward, the major version number of Angular Material and CDK will update alongside Angular itself. A moment.js implementation of the DateAdapter for MatDatepicker is now available as @angular/material-moment-adapter Based on Angular 5.0 More consistent naming conventions across the board 60+ bug fixes","title":"Highlights"},{"location":"site-files/project/0-CHANGELOG/#breaking-changes_8","text":"Angular Material now requires Angular 5, which itself requires TypeScript 2.4+ and RxJS 5.5.2+ mat-icon now uses HttpClient from @angular/common/http instead of Http from @angular/http . Any unit tests that faked icon responses should be changed to use an HttpInterceptor . @angular/cdk/rxjs has been removed in favor of RxJS 5.5's lettable operators . toolbar: in previous versions, any content of mat-toolbar not wrapped in a mat-toolbar-row would be rendered inside of an implicitly created mat-toolbar-row . As of rc0, this implicit row will no longer be created. This means that any custom application CSS that targeted this implicitly created mat-toolbar-row will no longer apply. Users can re-add the mat-toolbar-row in their own templates to match the original output structure. This resolves a longstanding issue where display: flex styles were difficult to use on mat-toolbar . accordion: move CdkAccordion to @angular/cdk/accordion CdkAccordion and associated classes live in @angular/cdk/accordion AccordionChild is renamed to CdkAccordionChild CdkAccordion no longer has displayMode and hideToggle @Inputs CdkAccordionItem is now a @Directive table : The argument order for the when property of matRowDef and cdkRowDef has been changed from (rowData, index) to (index, rowData) in order to match trackBy . datepicker: fromIso8601 method on DateAdapter removed in favor of deserialize DateAdapter will return an invalid date instead of throwing an error The userSelection @Output of mat-calendar has been made internal-only cdk/scrolling: ScrollDispatcher.getScrollContainers has been renamed to getAncestorScrollContainers to better match its behavior. The ScrollDispatcher.scrollableReferences property has been renamed to scrollContainers . The ScrollDispatcher.scrollableContainsElement method has been removed. The Scrollable class has been renamed to CdkScrollable for consistency. Any uses of the ScrollDispatcher.scrolled method have to be refactored to subscribe to the returned Observable, instead of passing in the callback . Example ```ts // Before scrollDispatcher.scrolled(50, () = ...); // After scrollDispatcher.scrolled(50).subscribe(() = ...); `` * **unique-selection:** move UniqueSelectionDispatcher to @angular/cdk/collections ( UniqueSelectionDispatcher , UniqueSelectionDispatcherListener , and UNIQUE_SELECTION_DISPATCHER_PROVIDER ) * MATERIAL_COMPATIBILITY_MODE , CompatibilityModule , NoConflictStyleCompatibilityMode , MatPrefixRejector , MdPrefixRejector symbols have been removed. * MAT_CONNECTED_OVERLAY_SCROLL_STRATEGY is renamed to CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY`","title":"BREAKING CHANGES"},{"location":"site-files/project/0-CHANGELOG/#deprecations","text":"The following classes have been renamed. The old names are still available as deprecated: OverlayOrigin - CdkOverlayOrigin ConnectedOverlayDirective - CdkConnectedOverlay PortalDirective - CdkPortal PortalHostDirective - CdkPortalOutlet ObserveContent - CdkObserveContent The following @Output names have been renamed. The old names are still available as deprecated: mat-select onOpen - opened onClose - closed change - selectionChange mat-sidenav / mat-drawer open - opened close - closed mat-menu close - closed matMenuTriggerFor onMenuOpen - menuOpened onMenuClose - menuClosed mat-chip onSelectionChange - selectionChange remove - removed destroy - destroyed mat-tab-group selectChange - selectedTabChange","title":"Deprecations"},{"location":"site-files/project/0-CHANGELOG/#features_30","text":"table: add MatTableDataSource ( #6747 ) ( a9600e7 ) dialog: support minWidth, minHeight, maxWidth and maxHeight ( #7488 ) ( 57f19cd ) overlay: new keyboard dispatcher for targeting correct overlay ( #6682 ) ( a2ca4d6 ) snack-bar: set snack bar to be responsive. ( #7485 ) ( 5b7982f ) sort: use existing intl provider if one exists ( #7988 ) ( c8df2c1 ) dialog: add optional generic param for config data ( #7447 ) ( b29ac45 ), closes #4398 Most directives / components now define an exportAs name ( #7554 ) ( fa441bc )","title":"Features"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_67","text":"block-scroll-strategy: disable smooth scrolling before restoring scroll position ( #8132 ) ( 75bccde ), closes #7139 button: focus styles not applied to programmatically focused buttons ( #5966 ) ( a0bb1a3 ), closes #7510 button-toggle: support two-way binding of value ( #7911 ) ( ee4915c ) card: change image path to https in example ( #7800 ) ( 65d3630 ) chip-list: use role = listbox only if chip list is not empty ( #7664 ) ( dc76c09 ) chips: programmatically selected chip stealing focus ( #7978 ) ( 8168667 ) datepicker: allow DateAdapter authors to have more control ove\u2026 ( #7346 ) ( 9fa075e ) datepicker: use disabled state from FormControl ( #7514 ) ( 66e71c8 ) dialog: don't block other dialogs from opening while animating ( #8051 ) ( cc4fc11 ), closes #6560 drawer: not restoring focus on close ( #7668 ) ( 3041124 ) drawer: unable to toggle while drawer is animating ( #6810 ) ( 085827f ), closes #6376 expansion-panel: prevent content from being clipped ( #7617 ) ( aa77aa1 ) focus-trap: server-side rendering error ( #7635 ) ( f7a12b6 ), closes #7633 focus-trap: update focus trap attrs to camel case #6799 ( #6960 ) ( c663fad ) form-field: fix underline at different zoom levels ( #7567 ) ( 5cffd7c ) form-field: remove 200px width since it messes up flex layouts ( #7083 ) ( 160a511 ) form-field: remove specific mention of matInput in error ( #7727 ) ( f17cb99 ) icon: use SafeResourceUrl in getSvgIconFromUrl ( #7535 ) ( 291a87c ) input: remove IE clear icon ( #8095 ) ( 2fa679b ), closes #8076 menu: add typography mat-font-weight ( 7fe1b81 ) menu: make @Output names consistent #6677 ( #8053 ) ( b2dd17a ) menu: not handling keyboard events when opened by mouse ( #4843 ) ( d822a39 ), closes #4991 menu: wrong offset for nested menu in a fallback position ( #7562 ) ( 074f6ce ), closes #7549 overlay: CloseScrollStrategy not triggering change detection on close ( #7929 ) ( c0ba25a ), closes #7922 overlay: emitting to detachments stream when not attached ( #7944 ) ( 6fdc237 ) overlay: import BidiModule in OverlayModule ( #7566 ) ( 4321f32 ) overlay: overlay class audits #6372 ( #8056 ) ( cd05b54 ) overlay: wait until after change detection to position overlays ( #6527 ) ( f299d25 ) paginator: fix select baseline; support mobile ( #7610 ) ( c12e4b5 ) progress-spinner: fallback animation not working ( #7599 ) ( 4bb696e ) progress-spinner: inaccurate stroke width on really small spinners ( #7725 ) ( f52f078 ), closes #7686 progress-spinner: spinner with narrower stroke not taking up entire element ( #7686 ) ( 2361983 ), closes #7674 scroll: Replace references to scrollableReferences ( #7752 ) ( 9673f63 ) select: errors not shown on submit ( #7640 ) ( d2f41a4 ), closes #7634 select: make @Output names consistent #6677 ( #8052 ) ( f59abdb ) select: not scrolling active option into view when typing ( #7620 ) ( 717f252 ) select: remove inert focus call ( #7729 ) ( 70c349c ) select: support typing to select items on when closed ( #7885 ) ( 8edb416 ) select: unable to preselect array value in single selection mode ( #7603 ) ( d55aa0c ), closes #7584 select: wrong cursor on disabled select ( #7696 ) ( 9b4f435 ), closes #7695 selection-list: fix option value coercion and selection events ( #6901 ) ( 80671bf ), closes #6864 snack-bar: add content fade in animation ( #7504 ) ( 2b9c470 ) snackbar: swap enter and exit animation curves ( #6791 ) ( 4f571b1 ) sort: fix arrow on width-constrained headers ( #7569 ) ( 147ae46 ) spinner: set initial value for spinner to 0. ( #8139 ) ( 9e4c636 ) stepper: don't grey out non-linear steps ( #7479 ) ( 60707b3 ), closes #7260 stepper: error when selectedIndex is pre-set ( #8035 ) ( cf11ff2 ), closes #8031 table: broaden abstraction for filtering ( #8059 ) ( d47b37a ) table: cell content should not stretch width ( #7666 ) ( bb424e2 ) table: empty string should be sorted right ( #8011 ) ( 58627c4 ) table: render cells even if data is falsy ( #7914 ) ( f601e83 ) table: switch when arguments ( #7516 ) ( a2129fc ) table: Provide a provider if exists. ( #7895 ) ( 9a05ecd ), closes #7344 table: throw error when missing row defs ( #7751 ) ( 55476e2 ) table: update implicit when using trackby ( #7893 ) ( f806286 ) tabs: incorrect ripple color for tabs with background ( #8123 ) ( 02d3eb6 ) toolbar: no longer auto-generate toolbar rows ( #6661 ) ( c3405aa ), closes #6004 #1718 tooltip: don't open from programmatic focus ( #7258 ) ( 90a55fa ), closes #7245 viewport-ruler: incorrectly caching viewport size ( #7951 ) ( 0d6d9cc ) consistent names for all cdk directives ( #8088 ) ( f08b3f0 ) don't show sanity check messages in tests ( #8080 ) ( d17f9d2 ) user-select mixin ignores value ( #7992 ) ( eaa4a36 )","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#performance-improvements_14","text":"scroll remove persistent global scroll listener ( #7560 ) ( d6698e1 ), closes #6882 drawer: drawer content repainting on scroll ( #7719 ) ( 131e98f ) focus-monitor: use passive touch listener ( #7957 ) ( ff7a13b ) tabs: avoid repainting while scrolling ( #7889 ) ( 943395e )","title":"Performance Improvements"},{"location":"site-files/project/0-CHANGELOG/#code-refactoring_1","text":"accordion: move CdkAccordion to /cdk ( #7530 ) ( 4d04472 ) remove compatibility mode ( #7689 ) ( dcef604 ) switch to HttpClient ( #6702 ) ( 0ea4370 )","title":"Code Refactoring"},{"location":"site-files/project/0-CHANGELOG/#200-beta12-marble-mustache-2017-10-05","text":"","title":"2.0.0-beta.12 marble-mustache (2017-10-05)"},{"location":"site-files/project/0-CHANGELOG/#highlights_9","text":"Progress spinner is now entirely css-based. Fixed sidenav: the sidenav can now be configured to use fixed positioning. This resolves a longstanding issue where sidenav-container would always introduce a scrolling region. mat-select is now used inside mat-form-field . This makes all of the existing form-field features available with mat-select , including hints, errors, prefixes, and suffixes. This also ensures that mat-select and matInput have a consistent presentation. mat-form-field mat-select placeholder= State mat-option *ngFor= let state of states [value]= state {{ state }} /mat-option /mat-select /mat-form-field a name= 2.0.0-beta.12 /a # [2.0.0-beta.12 marble-mustache](https://github.com/angular/material2/compare/2.0.0-beta.11...2.0.0-beta.12) (2017-10-05)","title":"Highlights"},{"location":"site-files/project/0-CHANGELOG/#breaking-changes_9","text":"All \"md\" prefixes have been removed. See the deprecation notice in the beta.11 notes for more information . All cdk re-exports in @angular/material have been removed. See the the beta.10 notes for more information . Previously the ScrollDispatcher.scrolled subscription would react both on scroll events and on window resize events. Now it only reacts to scroll events. To react to resize events, subscribe to the ViewportRuler.change() stream. UniqueSelectionDispatcher , UniqueSelectionDispatcherListener and UNIQUE_SELECTION_DISPATCHER_PROVIDER are no longer available from @angular/material and instead must be imported from @angular/cdk/collections isFocusTrapEnabled is now properly marked internal. The OverlayRef.getState method has been renamed to OverlayRef.getConfig . defaultErrorStateMatcher has been replaced by ErrorStateMatcher . For more info, see the input docs .","title":"Breaking Changes"},{"location":"site-files/project/0-CHANGELOG/#features_31","text":"autocomplete: add md-autocomplete classes to overlay panel ( #7176 ) ( f8cd790 ), closes #4196 dialog: add datepicker dialog and popup classes for easy styling ( #7013 ) ( 0ff8d5d ) menu: support typeahead focus ( #7385 ) ( f0d20ca ) nav-tabs: add mat-tab-label-active class to active nav tab labels ( #7508 ) ( 00e9338 ) progress-spinner: switch to css-based animation ( #6551 ) ( 630dfad ) select: add support for custom error state matcher ( #7443 ) ( a774688 ), closes #7419 select: make select work inside form-field ( #6488 ) ( d914cc4 ) selection-model: de/select multiple values at the same time ( #7001 ) ( e52beeb ) sidenav: Add support for fixed sidenavs ( #6712 ) ( 61579bc ) sort: add enter and leave arrow animations ( #7180 ) ( 2d350a0 ) table: add row when predicate ( #6795 ) ( 0875b85 ) viewport-ruler: add common window resize handler ( #7113 ) ( 3b0915a )","title":"Features"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_68","text":"add exportAs to missing components ( #7392 ) ( 31e9775 ), closes #7361 remove all md prefixes ( #7241 ) ( 20a23f1 ) slide-toggle: report change to model before firing a change event ( #7076 ) ( c82fca8 ), closes #7074 remove cdk re-exports from @angular /material ( #7112 ) ( f9b5ccd ) autocomplete: don't open panel for readonly inputs ( #7271 ) ( 5f8615f ), closes #7269 autocomplete: emit closing action for escape keydown event ( #6250 ) ( f4673a5 ) autocomplete: empty not cleaning up on tab ( #7270 ) ( 6be0462 ), closes #7268 autocomplete: error if panel is added asynchronously ( #7078 ) ( 504ba70 ), closes #7069 autocomplete: remove invalid aria markup ( #7107 ) ( 6bd6b9f ), closes #7100 button: allow for elevation to be overwritten ( #7305 ) ( 92a868e ), closes #7264 calendar: not reacting to min/max boundary changes ( #7234 ) ( eb012cc ), closes #7202 checkbox: defaulting to invalid name and value attributes ( #7130 ) ( 26788f1 ) checkbox: support native tabindex attribute ( #6793 ) ( 0270cf5 ) chips: do not set chips value if there's no ngControl or value ( #7285 ) ( d9ba13f ) chips: fix chip list focus and keyboard behaviors ( #7319 ) ( f166468 ) common: don't log doctype warning when rendering server-side ( #6833 ) ( f8ed442 ) common-module: check if computed styles are available ( #7003 ) ( 5da9e64 ), closes #7000 datepicker: make sure _datepickerInput exists before accessing its ( #7033 ) ( 2129b7a ) dialog: directionality not injected into child components ( #7111 ) ( daa3880 ) drawer: backdrop not transitioning on close ( #6651 ) ( 80310a5 ) drawer: drawer container animating when open by default ( #7129 ) ( 4d278dd ), closes #7007 drawer: drawer container not reacting to drawer removal ( #7060 ) ( b0b91f4 ), closes #6271 drawer: open event not firing on init ( #7214 ) ( ba5653d ), closes #7208 input: apply readonly attribute when readonly ( #7439 ) ( 01622b1 ) input: don't highlight container when readonly input is focused ( #7273 ) ( f076390 ) input: make autosize work inside tabs stepper ( #7341 ) ( c6824d5 ) list-key-manager: align matching logic with native listbox ( #7212 ) ( 846cc13 ) list-key-manager: don't focus disabled items in typeahead mode ( #7382 ) ( 1823b2f ) menu: multiple close events for a single close ( #7037 ) ( 2dcb76c ) menu: nested menu error when items are rendered in a repeater ( #6766 ) ( 7a96570 ), closes #6765 overlay: detach method returns undefined ( #7449 ) ( 0584cdf ), closes #7408 paginator: page size selector not working ( #7263 ) ( 2b3d795 ) radio: defaulting to invalid name attribute ( #7131 ) ( c5e162b ) ripple: handle touch events ( #7299 ) ( fe0864b ), closes #7062 ripple: remove unused ScrollDispatchModule ( #7528 ) ( 4a1a68d ) ripple: use element coordinates instead of page coordinates ( #7446 ) ( 7714a5c ), closes #7436 select: losing focus when selecting values through binding ( #7296 ) ( 86bea91 ), closes #7092 select: multiple change events emitted when changing options of a closed select ( #7232 ) ( c7ab828 ), closes #7227 select: prevent nbsp from getting butchered in AOT ( #7363 ) ( 2e71cac ) select: theme not being transferred to the panel ( #7342 ) ( 6b70ca6 ) selection-list: model not updated when option is selected programmatically ( #7334 ) ( f40a7cc ), closes #7318 selection-list: restore focus if active item is destroyed ( #7125 ) ( e05f939 ) selection-list: tabIndex should respect disabled state ( #7039 ) ( c2a9516 ) sidenav: change content from md- to mat- ( #7307 ) ( d05dcfa ) slider: change event is not being emitted ( #7278 ) ( 39543a3 ), closes #7207 snack-bar: positioned snack bar animation not starting off-screen ( #7453 ) ( 58d3bb8 ) snack-bar: subsequent snack bars not opening; animation issues ( #7086 ) ( 8e77261 ), closes #7063 sort: fix incorrect conditional grouping ( #7427 ) ( f5e916d ) sort: style changes to fix IE ( #7375 ) ( 75f26e8 ) sort: throw error on invalid direction ( #7378 ) ( cc6f39e ) stepper: align appearance with spec ( #7279 ) ( 4122ae2 ), closes #7260 stepper: avoid blurry content on IE ( #6992 ) ( 6f48710 ) stepper: selected is always undefined ( #7213 ) ( 217840c ) stepper: switch to OnPush change detection ( #7119 ) ( c2c6e04 ) stepper: unable to internationalize labels ( #7122 ) ( 6e3bbcb ) tabs: blurry content in IE ( #6954 ) ( 7a354a0 ), closes #6944 tabs: update tab output names ( #7134 ) ( 38268d3 ) theming: incorrect green-500 contrast color ( #7492 ) ( c1f6ea1 ), closes #7490 tooltip: ensure tooltip stays within viewport ( #6659 ) ( c8ddd39 ), closes #5428 tooltip: minification issue ( #7430 ) ( b121e32 )","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#200-beta11-carapace-parapet-2017-09-21","text":"","title":"2.0.0-beta.11 carapace-parapet (2017-09-21)"},{"location":"site-files/project/0-CHANGELOG/#highlights_10","text":"Each @angular/material component is now bundled into its own javascript file. This will allow tools like webpack to more easily load only the components being used in an application. New stepper component! The base behavior lives in @angular/cdk with Material Design flavors in @angular/material .","title":"Highlights"},{"location":"site-files/project/0-CHANGELOG/#breaking-changes_10","text":"Angular Material now requires Angular 4.4.3 or greater MaterialModule has been removed. ( cf1ece0 ) (#6803) See the deprecation notice from beta.3 for more information . MdCoreModule has been removed. Most of its functionality has been moved to @angular/cdk over the last few releases. FocusOriginMonitor has been renamed to FocusMonitor and moved to @angular/cdk . chip-list: The outputs select and deselect have been removed in favor of a single onSelectionChange output. overlay: OverlayState has been renamed to OverlayConfig overlay: Now that the Overlay is part of the cdk rather than Angular Material directly, the themeClass property has been removed. To add a class to the overlay for theming, you can do overlayContainer.getContainerElement().classList.add('my-theme-class'); DateAdapter method getISODateString has been renamed to toIso8601 and a new method fromIso8601 has been added. sort: The sort-change stream mdSortChange has been renamed to sortChange .","title":"Breaking changes"},{"location":"site-files/project/0-CHANGELOG/#deprecation-of-md-prefix","text":"In earlier betas, we've had a compatibility mode that allowed people to use either \"md\" or \"mat\" as the selector for Angular Material components. This was created so that these components could live side-by-side with AngularJS Material without CSS from the two libraries colliding. For beta.11, we've made the decision to deprecate the \"md\" prefix completely and use \"mat\" moving forward. This affects all class names, properties, inputs, outputs, and selectors (CSS classes were changed back in February). The \"md\" prefixes will be removed in the next beta release. You can automatically update your projects with the angular-material-prefix-updater tool. Check out the tool's page for instructions on how to run.","title":"Deprecation of \"md\" prefix."},{"location":"site-files/project/0-CHANGELOG/#why-are-we-doing-this","text":"We like the \"md\" prefix too! We added compatibility mode in order to keep \"md\" around, but over time we found that there were too many downsides to continue supporting both prefixes at the same time: Many users found the fact that the CSS used \"mat\" while templates used \"md\" confusing. Users in compatibility mode found that having \"mat\" in their templates while TypeScript class names remained \"Md\" to be unfriendly. Making both prefixes available consistently through templates required adding many getters/setters that aliased the \"true\" property . This ends up increasing payload size and complexity of the source code. Compatiblity mode itself used broad directive selectors to enforce that only one prefix was used at a time. This causes a problem where this broad selector prevents Angular from throwing an error if an application uses a component without importing its NgModule .","title":"Why are we doing this?"},{"location":"site-files/project/0-CHANGELOG/#why-not-change-the-styles-in-angularjs-material","text":"We explored this option early on (before creating compatibility mode). We found that changing the library's styles such that they wouldn't affect the Angular Material components would increase the specificity. This would have been a significant breaking change, as it would have potentially broken countless custom styles that relied on a particular specificity working.","title":"Why not change the styles in AngularJS Material?"},{"location":"site-files/project/0-CHANGELOG/#other-deprecations","text":"StyleModule is deprecated. FocusOriginMonitor (the only thing it contained) has been renamed to FocusMonitor and moved to @angular/cdk/a11y ( A11yModule ).","title":"Other deprecations"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_69","text":"autocomplete,select: inconsistent disabled option coloring ( #6640 ) ( 454781d ), closes #6638 autosize: not resizing on programmatic changes ( #6654 ) ( 89fea50 ), closes #5247 button-toggle: border radius ignored if option is selected ( #6699 ) ( 82e14f8 ), closes #6689 checkbox: label content should not wrap ( #6674 ) ( 9acab86 ), closes #6671 chips: set appropriate aria-orientation ( #6464 ) ( a37aa6a ) datepicker: allow date or datetime strings in fromIso8601 ( #7220 ) ( 8436f8c ) datepicker: allow ISO 8601 strings as inputs ( #7091 ) ( d2ceb2c ) datepicker: backdrop class should be mat- ( #7056 ) ( 2b61eb6 ) datepicker: Create a new injection token to avoid overriding LOCALE_ID ( #6708 ) ( 2635cad ) datepicker: fix wrong datepicker-input value for non MM/DD/YYYY locales ( #6798 ) ( 29399b8 ) datepicker: makes sure the datepickerInput is registered ( #7049 ) ( e4d48d7 ) datepicker: toggle not reacting to disabled state changes in datepicker or input ( #6964 ) ( 85993d3 ) expansion-panel: dark theme header hover color ( #6616 ) ( 21c68ad ) form-field: add aria-owns to label element ( #6683 ) ( 4191b4d ) form-field: placeholder not floating if autofilled ( #6839 ) ( 602a861 ), closes #6837 grid-list: avoid unnecessary calc declarations ( #6745 ) ( 255611b ) grid-list: styles not cleared when switching to a different styling mode ( #6660 ) ( 87d607e ), closes #4047 input: remove resize handle from non-textarea inputs ( #6768 ) ( 1272f03 ), closes #6757 list: subheader margin being overwritten by typography ( #6735 ) ( efe483a ) menu: multiple close events for a single close ( #6961 ) ( 1cccd4b ) menu: nested menu hover not working when trigger is added lazily ( #6807 ) ( 6b5100b ), closes #6731 menu: nested trigger staying highlighted after click ( #6853 ) ( 04bf3d1 ), closes #6838 overlay: rename OverlayState to OverlayConfig ( #6972 ) ( 1cfce8d ) progress-bar: query mode not reversing direction in rtl ( #6922 ) ( 8a21881 ) select: extra whitespace around placeholder ( #6955 ) ( 9fe6386 ), closes #6923 selection-list: do not coerece option value to boolean ( #6983 ) ( dfe01f2 ) selection-list: proper style for disabled options ( #6829 ) ( 547d11f ) slide-toggle: remove side-margin if slide-toggle label is empty ( #6881 ) ( a1ec81a ), closes #6868 slide-toggle: support native tabindex attribute ( #6613 ) ( 8f9f3c8 ) slider: thumb disappearing on disabled element with thumb label ( #6641 ) ( 8243b16 ), closes #6631 slider: update styles when focus and dir change ( #6700 ) ( 8c49422 ) slider, drawer: unsubscribe from directionaly change subject ( #6907 ) ( a7ce31e ), closes #6892 #6903 snack-bar: animation not starting for subsequent snack bars ( #6649 ) ( 730e7ae ), closes #6222 sort: reverse directions and better animation ( #6802 ) ( 6fa9e6f ) table: gracefully handle undefined/null columns ( #6862 ) ( 3ddf65b ) tabs: fix infinite tab loop ( #6663 ) ( 67e02b0 ), closes #4639 tabs: tab spacing on desktop incorrect ( #6681 ) ( b678119 ), closes #3347 tooltip: closing immediately when triggered on click ( #6590 ) ( bcd026f ) tooltip: ensure tooltip never passes undefined message to ( #7018 ) ( f6d1078 ) add mat exportAs and class aliases ( #7106 ) ( a96b545 ) tooltip: error on trigger escape presses while closed ( #7028 ) ( dcf3b27 ), closes #7009","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#features_32","text":"chip-list: implement FormFieldControl and ControlValueAccessor ( #6686 ) ( 7a42706 ) datepicker: Add Moment.js adapter ( #6860 ) ( 9545427 ) dialog: add afterOpen to MdDialogRef ( #6887 ) ( 27cbe47 ) expansion-panel: allow for the panel header height to be customized ( #6643 ) ( 11e2239 ), closes #5641 overlay: replace OverlayContainer themeClass w/ addClass/removeClass methods ( #6975 ) ( a944f6e ) selection-list: add selectAll and deselectAll functions ( #6971 ) ( dc9679d ), closes #6969 sort: add sorting indicator animation ( #5831 ) ( 70bd5fc ) stepper: Add e2e test ( #6776 ) ( bef6271 ) stepper: add moduleId to components ( #6780 ) ( f375f92 ) stepper: Address previous comments + add directionality support ( #6775 ) ( c396596 ) stepper: initial version of stepper ( #6594 ) ( 87318bc ) viewport-ruler: add common window resize handler ( #6680 ) ( 881630f ) add preserveWhitespaces: false to all components ( #7115 ) ( 2b0315d ) move FocusMonitor into cdk ( #6921 ) ( 6cfe5c4 )","title":"Features"},{"location":"site-files/project/0-CHANGELOG/#performance-improvements_15","text":"dialog: avoid repaintin dialog content element on scroll ( #6890 ) ( 51396d0 ), closes #6878 memory leak when subscribing to zone events ( #6918 ) ( f6c9172 ), closes #6905","title":"Performance Improvements"},{"location":"site-files/project/0-CHANGELOG/#200-beta10-decoupage-panjandrum-2017-08-29","text":"","title":"2.0.0-beta.10 d\u00e9coupage-panjandrum (2017-08-29)"},{"location":"site-files/project/0-CHANGELOG/#highlights_11","text":"Over 140 bug fixes Nested menus Nested menus Nested menus! Autocomplete supports md-optgroup Overlay moved to @angular/cdk New component MdSelectionList md-input-container renamed to md-form-field (while still being backwards compatible) Almost all components now use OnPush change detection (dialog being the exception) You can now get back the EmbeddedViewRef when attaching a TemplatePortal MdSidenav has been split into MdSidenav and MdDrawer . The MdSidenav is now meant to be used for top-level application navigation, while the drawer is meant to be used for more local split views. While there are no differences introduced between the two in this release, future releases will see different features added to each","title":"Highlights"},{"location":"site-files/project/0-CHANGELOG/#breaking-changes_11","text":"Imports from @angular/cdk are now scoped to a specific sub-package. For example, if you previously had: import {LiveAnnouncer, Overlay, Directionality} from '@angular/cdk'; You will now need to write: import {LiveAnnouncer} from '@angular/cdk/a11y'; import {Directionality} from '@angular/cdk/bidi'; import {Overlay} from '@angular/cdk/overlay'; This helps ensure you're only pulling in the pieces of the cdk being used as well as providing more context about what an imported symbol is being used for. The current set of public @angular/cdk subpackages are: a11y, bidi, coercion, collections, keycodes, observers, overlay, platform, portal, rxjs, scrolling, table. If you are using SystemJS, each package you use must be added to the SystemJS configuration. All Overlay code has been moved from @angular/material to @angular/cdk . The symbols are still re-exported through @angular/material , but these re-exports will be removed in a subsequent release. cdkScrollable , ScrollDispatcher , and ViewportRuler have been moved from overlay into its own scrolling subpackage in @angular/cdk . input: Inputs have a width of 200px by default (similar to native input elements). The width can be overridden by via the mat-form-field css class. input: CSS classes have changed from mat-input-container- to mat-form-field- . input: md-prefix and md-suffix are now mdPrefix and mdSuffix . portal: TemplatePortal now requires a generic type (C) to align with TemplateRef . This will usually be any . portal: Attaching a template portal will now return an EmbeddedViewRef C instead of an empty Map . observe-content: ObserveContentModule has been renamed to ObserversModule overlay: PositionStrategy now has an attach method and no longer passes the overlay DOM element to apply . datepicker: You must now use a date object (of whatever type your DateAdapter uses) rather than a string when setting the value of the datepicker programmatically (through value, ngModel, or formControl). datepicker: mdDatepickerToggle is now an element md-datepicker-toggle with a for property that points to the MdDatepicker instance datepicker: NativeDateAdapter will now use Angular's LOCALE_ID instead of the browser's locale. sidenav: CSS classes have changed from mat-sidenav- to mat-drawer- theming: The nonstandard 0 and 1000 hues have been removed from the mat-gray palette * chips: The selectable property of the md-chip-list has now been moved to md-chip to maintain consistency with the new removable option. If you used the following code, md-chip-list [selectable]= selectable md-chip My Chip /md-chip /md-chip-list you should switch it to md-chip-list md-chip [selectable]= selectable My Chip /md-chip /md-chip-list","title":"Breaking changes"},{"location":"site-files/project/0-CHANGELOG/#deprecations_1","text":"All dash-case @Directive selectors are deprecated in favor of the camelCase equivalent. The dash-case selectors will be removed in a subsequent release. Some examples include: Old New md-line mdLine md-tab-link mdTabLink md-tab-label mdTabLabel md-card-avatar mdCardAvatar md-input-container has been renamed to md-form-field . The old selector will be removed in a subsequent release. This is in preparation to making md-select a child of md-form-field such that both select and input share the same features and appearance. For camelCased directives, each corresponding @Input() is now also prefixed. For example, cdkConnectedOverlay now has inputs for cdkConnectedOverlayOrigin , cdkConnectedOverlayPositions , etc. The class members themselves are unchanged. The unprefixed inputs will be removed in a subsequent release. Affected directives are cdkPortalHost , cdkConnectedOverlay , mdTooltip , mdTextareaAutosize , and mdMenuTriggerFor . MdCoreModule is deprecated and will be removed in a subsequent release now that most of its functionality has been moved to @angular/cdk Reminder that MaterialModule is deprecated and will be removed in a subsequent release (see changelog from beta.3 for more information).","title":"Deprecations"},{"location":"site-files/project/0-CHANGELOG/#features_33","text":"autocomplete: emit event when an option is selected ( #4187 ) ( 2dd5c7c ), closes #4094 #3645 autocomplete: support for md-optgroup ( #5604 ) ( e41d0f3 ), closes #5581 cdk: move cdkScrollable, ScrollDispatcher, and ViewportRuler out of overlay ( #6547 ) ( 0f6a2ec ) cdk: move overlay into cdk ( #6100 ) ( 4d82f83 ) chip: add aria-selected to chip ( #5920 ) ( 281de25 ) chips: Add removal functionality/styling. ( #4912 ) ( c82aca9 ), closes #3143 chips: add user defined tab index to chip list ( #6073 ) ( 9eb9ddf ) datepicker: close calendar after choose the same date again ( #6323 ) ( 9ba5d84 ) datepicker: export unexported components for potential extension ( #6314 ) ( 7bc648b ) dialog: add beforeClose method ( #6377 ) ( cdbf305 ) dialog: expose backdrop clicks ( #6511 ) ( df28c3d ) dialog: open dialog API improvements ( #6289 ) ( 8b54715 ), closes #6272 expansion-panel: add the ability to disable an expansion panel ( #6529 ) ( 921432a ), closes #6521 focus-trap: return whether shifting focus was successful ( #6279 ) ( 7626c51 ) menu: add indicator to menu items that trigger a sub-menu ( #5995 ) ( a51f82f ) menu: add injection token for overriding the default options ( #5483 ) ( 3cb3945 ), closes #5479 menu: add nested menu functionality ( #5493 ) ( 1e0c1fc ) menu: increase nested menu elevation based on depth ( #5937 ) ( 91f7bf7 ) native-date-adapter: use default locale from LOCALE_ID ( #5419 ) ( c09e8a7 ), closes #5393 option: support for disableRipple binding ( #5915 ) ( addf1ce ) overlay: add maxWidth and maxHeight ( #6508 ) ( 9904e56 ) overlay: add providers for overriding the scroll strategies per component ( #5134 ) ( 184a6e4 ), closes #4093 overlay: support setting multiple panel classes ( #6326 ) ( a190de7 ), closes #6318 paginator: default page size to first option ( #5822 ) ( 42c50b6 ) portal: support context in TemplatePortal ( #6408 ) ( 90a6ac9 ) radio: add required attribute to radio-group ( #5751 ) ( f06fe11 ) select: add ability to customize the select trigger ( #3341 ) ( 72c5d39 ), closes #2275 select: allow disabling ripples for options ( #5967 ) ( 34ec068 ) select: allow focusing items by typing ( #2907 ) ( 5ebca5e ), closes #2668 select: implement compareWith for custom comparison ( #4540 ) ( 054ea4d ), closes #2250 #2785 select: support basic usage without @angular /forms ( #5871 ) ( 9a90eaf ) selection-list: Selection-list initial version ( #5562 ) ( dccce1c ) snack-bar: inject data and MdSnackBarRef into custom snack-bar component ( #5383 ) ( baba6ef ), closes #5371 tab-nav-bar: allow disabling ripples for links ( #6273 ) ( 4ae1b0f ), closes #6245 table: support dynamic column definitions ( #5545 ) ( 66e222f ) tabs: add isActive flag on the individual tabs ( #6424 ) ( 4d36ee0 ), closes #6422 add change emitters to the Intl providers ( #5867 ) ( 0a5489f ), closes #5738 tabs: add theming and ability to set background color ( #5287 ) ( 374aaff ) typography: allow font-family to be set per typography level ( #5905 ) ( 3b41c0c ), closes #5563 typography: allow typography config to be passed via mat-core ( #5625 ) ( 72148c0 ), closes #5589 expose version object in releases ( #4962 ) ( 3bfe7f0 ) rename cdk/keyboard - keycodes cdk/observe-content - observers ( #6039 ) ( 9df292f ) update to Angular 4.3 ( #6483 ) ( 66da597 )","title":"Features"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_70","text":"autocomplete: attach overlay to a more accurate input element ( #6282 ) ( 667a4e4 ) autocomplete: don't darken select option ( #6425 ) ( 67e91a3 ), closes #6407 autocomplete: don't prevent default enter action if panel is closed ( #5977 ) ( fdded66 ), closes #5976 autocomplete: error when closing destroyed panel ( #5446 ) ( 880e6d5 ), closes #5413 autocomplete: highlighted option not reset when closed with escape or enter key ( #6403 ) ( bf59468 ), closes #6258 autocomplete: panel not resetting properly in certain scenarios ( #5911 ) ( ebb5e9e ), closes #5910 autocomplete: placeholder not animating on focus ( #3992 ) ( ff54969 ), closes #5755 autocomplete: placeholder not resetting properly ( #6141 ) ( e4e7ee9 ) autocomplete,datepicker,menu: closing parent dialog by pressing escape ( #6226 ) ( 916d1f3 ), closes #6223 autosize: properly detect line-height in firefox ( #6190 ) ( 3a766f1 ), closes #6179 bidi: make dir and changes readonly ( #5645 ) ( 8c13325 ) button-toggle: add aria-label for button-toggle ( #5919 ) ( eabe2cb ) button-toggle: button-toggle module depends on forms module ( #5542 ) ( 9ab0c90 ) button-toggle: remove emit change event when value changes ( #6034 ) ( f8c5be8 ) card: prevent content from overlapping footer ( #5583 ) ( a394418 ), closes #5486 card: unable to bind to align attribute ( #5495 ) ( 243b97d ), closes #5490 checkbox: Add RequiredTrue validator for md-checkbox ( #6006 ) ( 59319d0 ) checkbox: remove checkmark from tab order ( #6137 ) ( 735ffb5 ), closes #6125 checkbox: server-side rendering error when checking textContent ( #5470 ) ( 0314bd8 ), closes #5453 checkbox, radio: setting id to null causes invalid id for input ( #5398 ) ( bcf4826 ), closes #5394 chips: add exportAs for chip and chip list ( #6084 ) ( e7da1e4 ), closes #6070 chips: cursor on remove button and box-shadow transition ( #6019 ) ( 8253503 ) chips: invalid aria-selected value for non-selectable chip ( #6544 ) ( 90fc300 ) chips: mark onFocus as internal ( #6519 ) ( 449ed19 ) chips: not visible in high contrast mode ( #5338 ) ( a5a8ff2 ) chips: remove background from unstyled chip ( #5777 ) ( 0f7be2e ) compat: add camelCase selectors to tab label wrapper ( #5955 ) ( a7e75da ) compat: add element selector for cdk-accordion ( #5954 ) ( 3c46001 ) connected-position-strategy: position change event not emitting for fallback positions ( #5978 ) ( 63505dc ) datepicker: allow disabling calendar popup ( #5305 ) ( 2294ea2 ) datepicker: better support for input and change events ( #4826 ) ( 35eb294 ) datepicker: center date text properly on android ( #5923 ) ( bbadd01 ) datepicker: deprecate selectedChanged output ( #6025 ) ( ee73d2c ), closes #6000 datepicker: fix error when selecting month with fewer days in year ( #6129 ) ( 9cff8c7 ) datepicker: force Intl.DateTimeFormat to use UTC time zone ... ( #5747 ) ( 76cc6f0 ) datepicker: make height of calendar constant in non-touch mode ( #5694 ) ( 5bcba85 ) datepicker: make touch UI calendar use 80% of width in portrait ( #5943 ) ( 641a38f ) datepicker: mark input tocuhed on calendar date selected ( #6007 ) ( 21e9768 ) datepicker: refactor datepicker toggle to support theming ( #5317 ) ( 4255476 ) datepicker: remove aria-expanded on datepicker input ... ( #5746 ) ( 4ea4baa ) datepicker: remove toggle icon from tab order on IE ( #6405 ) ( ea17d3d ) datepicker: use 3 rows to display months of year (consistent with internal mocks) ( #5427 ) ( da1d1ca ), closes #5202 datepicker: use correct viewContainerRef for dialog. ( #6026 ) ( 08037f9 ) datepicker: validate that input actually parses ( #5711 ) ( 8bb54ca ) dialog: add config option for aria-describedby ( #5365 ) ( 68241a8 ) dialog: better handling of custom ViewContainerRef with OnPush change detection ( #6164 ) ( 5967f6e ) dialog: move focus into container if no focusable elements are found ( #6524 ) ( 4e12072 ), closes #6513 dialog: prevent dialog from opening while another dialog is animating ( #5769 ) ( 36f708c ), closes #5713 dialog: set margin on buttons inside md-dialog-actions ( #5778 ) ( 643023d ) dialog: support passing in dialog result through all MdDialogClose selectors ( #6293 ) ( 4a1f10e ), closes #6278 expansion: use correct expanded line-height ( #5744 ) ( a921948 ) expansion: animation not working in Angular 4.3 ( #6442 ) ( f9bd5d4 ) expansion: only highlight keyboard-focused panel headers ( #6148 ) ( 49a0d7b ) expansion: remove closed panel contents from tab order ( #5441 ) ( 1efa594 ), closes #5432 expansion: remove margin from top and bottom panels in accordion ( #6546 ) ( 7f0e58e ) expansion: set up typography styles ( #5739 ) ( e21b64c ) expansion: standalone panel shouldn't override margins ( #5962 ) ( 81f1f97 ), closes #5949 expansion: toggle not being updated when set programmatically ( #5650 ) ( 41c804b ), closes #5549 #5623 expansion: wrong margins in rtl ( #5800 ) ( 106ded4 ) grid-list: figure not expanding to full width ( #6578 ) ( ea143a0 ), closes #6586 grid-list: invalid inline styles when rendering server-side ( #6052 ) ( 22ce1da ), closes #6048 icon: error when toggling icon with binding in IE11 ( #6102 ) ( 0795432 ), closes #6093 icon: icon element not removed when svgIcon is reset ( #6502 ) ( 5e3228f ), closes #6495 input: add overflow:hidden when calculating autosize height ( #5773 ) ( e0fc526 ) input: don't highlight container when readonly input is focused ( #5776 ) ( 349121d ), closes #5749 input: fix input/placeholder alignment on safari ( #6072 ) ( 9ac5d13 ) input: input module depends on forms module ( #5579 ) ( 44ca46a ) input: invalid font declaration ( #5154 ) ( 92d8368 ), closes #5262 input: make sure 1-line hint is fully contained by input container. ( #5912 ) ( ca3a3b8 ) input: placeholder covering value when using OnPush ( #5660 ) ( 219a8ae ) input: prevent input caret from sticking on iOS ( #6128 ) ( 94bf5e9 ) input: prevent textarea from resizing beyond input container ( #5333 ) ( 36dc75a ) input: required asterisk being read out by screen readers ( #6277 ) ( 0850981 ) input: set default width of 200px on input-container ( #5833 ) ( e9ab9b4 ) input: set proper role on md-error ( #6259 ) ( 3df4d72 ) input: underline should only be thicker if focused ( #6152 ) ( 68e2f46 ) input: update aria-describedby to also include errors ( #6239 ) ( 2af284c ) input,select: align colors with spec ( #5155 ) ( 266f237 ), closes #5114 list: :empty selector did not catch in mat-list-text ( #6124 ) ( 846899d ) list: properly align contents in subheader ( #6221 ) ( 4e6e42e ), closes #6214 list: subheader margin being overwritten by typography ( #5652 ) ( 5bc97ec ), closes #5639 list-key-manager: increase typeahead range to include more characters ( #6543 ) ( 1f4a962 ) list-key-manager: typehead not handling non-English input ( #6463 ) ( 08a6673 ) live-announcer: remove announcer element on destroy ( #5404 ) ( b7efe48 ) menu: align appearance with spec ( #5361 ) ( c20bec8 ) menu: close child menus when parent is closed programmatically ( #6329 ) ( 66b1ff5 ) menu: complete close stream on destroy ( #5368 ) ( d810138 ) menu: make it easier to override elevation ( #5873 ) ( 6f5dcd5 ), closes #5870 menu: prevent user from accidentally opening a sub-menu while animating ( #5996 ) ( eaa6099 ) menu: wrong animation in Angular 4.2+ ( #5836 ) ( 39c3e42 ) overlay: add prefixed inputs, deprecate old ones ( #5957 ) ( 2bf6b57 ) overlay: error when removing empty string theme ( #6306 ) ( faa7601 ) overlay: remove overlay container on destroy ( #5378 ) ( 154bb55 ) paginator: add type button to next / prev buttons ( 5bd655b ) paginator: expose MdPaginatorIntl ( #5716 ) ( 93789cf ), closes #5715 paginator: remove dependency on @angular /forms ( #6080 ) ( 953b38e ), closes #5717 paginator: underlying select vertical alignment ( #6354 ) ( 0d2ea10 ), closes #6338 progress-spinner: prevent users from tabbing into underlying SVG on IE ( #6142 ) ( 235f664 ) radio: animation looking off on IE ( #5620 ) ( d263ca2 ) radio: forward focus to native input ( #6274 ) ( cea4d9f ) radio-group: coerce disabled property ( #5837 ) ( 23ec30f ) select: bigger height for underline on focus ( #5510 ) ( 78f0cec ), closes #5499 select: consistent error behavior to md-input-container ( #4754 ) ( 6f73b35 ), closes #4611 select: disabled select being set to touched state on click ( #5328 ) ( 6b4f9c8 ) select: don't shift option focus when multi-select value is changed programmatically ( #5401 ) ( 6422640 ), closes #5381 select: error if triggerValue is accessed from an empty select ( #6575 ) ( 0526689 ) select: floating label overlapping elements above select ( #6228 ) ( a780052 ), closes #6171 select: lint issue ( #6497 ) ( 1807c5b ) select: required asterisk should use warn color ( #5498 ) ( 97494f7 ), closes #5496 select: server-side rendering error with preselected value ( #6049 ) ( 2388d91 ), closes #6045 select: set aria-multiselectable for multi-select ( #6110 ) ( ce31113 ) select: throwing additional errors if ngModel fails to initialize ( #5405 ) ( 372549c ), closes #5402 select: wrong option amount being read out by NVDA ( #5181 ) ( b8c900c ) select,autocomplete: darken selected option ( #6302 ) ( 504b5df ), closes #6229 sidenav: container not reacting to changes to sidenavs added after init ( #6161 ) ( 0d80a77 ), closes #6127 sidenav: first animation not working in Angular 4.2+ ( #5821 ) ( 804f4c0 ), closes #5673 slide-toggle: invalid model change event ( #4220 ) ( dfe10c3 ), closes #4124 slide-toggle: slide-toggle module depends on forms module ( #5523 ) ( d716b00 ) slider: fix change input emit logic. ( #6234 ) ( 9d3c405 ) slider: set proper font family on label ( #5772 ) ( 1cba2dc ) slider: slider module depends on forms module ( #5578 ) ( c14978b ) slider: work around slidestart event sometimes not firing on iOS ( #6009 ) ( a87a000 ) snack-bar: align theming with spec ( #6506 ) ( 363562f ) snackbar: make closeWithAction public method ( #5686 ) ( f4f64ac ) table: column class names should be css friendly ( #6173 ) ( 1748397 ) table: eliminate need for second change detection ( #5775 ) ( 388494f ) table: Fix change det issue with http example ( #6169 ) ( 4afcc0a ) table: set font family ( #5741 ) ( 5d5ce83 ) tabs: add module dependency on MdCommonModule ( #5304 ) ( 738b6be ) tabs: allow for tabs to be selected using the space key ( #6426 ) ( b5f4caf ), closes #6406 tabs: check if the subscription is defined before unsubscribe ( #5667 ) ( 0eedb5f ) tabs: improved vertical alignment of tab label ( #5771 ) ( b105039 ) tabs: server-side rendering error when aligning ink bar ( #5455 ) ( 448db8b ) add camelCase ng-content selectors ( #5953 ) ( f52c7f4 ) theming: Light green 700 contrast should be white ( #6346 ) ( b4e2488 ) deprecate CoreModule ( #6588 ) ( 377a3bb ) improved key manager typings ( #6443 ) ( 18c6dec ) remove ripples in high contrast mode ( #6355 ) ( fd5e5ff ) textarea: server-side rendering error when using mdTextareaAutosize ( #6050 ) ( 05ca4a7 ), closes #6047 theming: remove non-standard grey palette hues ( #6605 ) ( 3b46360 ) tooltip: panel element blocks hover effects ( #5514 ) ( d04230c ), closes #4691 tooltip: remove native event listener on component destroy ( #5144 ) ( 32db2ba ), closes #4499 tooltip: remove unnecessary tooltip whitespace ( #6531 ) ( 6cdbf36 ) xxx-intl: replace misused EventEmitter with Subject ( #6313 ) ( c20bcf9 )","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#performance-improvements_16","text":"observe-content: run outside Angular zone ( #6352 ) ( 5ccf25d ) sidenav: avoid recalculating the inline styles while sidenav is open ( #6189 ) ( 57a2f29 ) table: cell references not being cleaned up on destroy ( #5809 ) ( df1ddee ) tabs: avoid extra resize handler and reflow ( #6434 ) ( 1df79e9 )","title":"Performance Improvements"},{"location":"site-files/project/0-CHANGELOG/#200-beta8-plasma-abacus-2017-07-06","text":"","title":"2.0.0-beta.8 plasma-abacus (2017-07-06)"},{"location":"site-files/project/0-CHANGELOG/#highlights_12","text":"This version marks the release of @angular/cdk (component dev kit)! This package contains general building blocks for UI components decoupled from the visuals of Material Design. In the initial release, code from Angular Material's core/ have been moved for a11y/ , bidi/ , coercion/ , observe-content/ , platform/ , portal/ . The @angular/material package now re-exports these symbols, marked as deprecated. The re-exports will be removed in a subsequent release. Initial version of data-table component. There is both a cdk-table (the core) and the md-table (with Material Design styles). See the documentation on material.angular.io for more information. Initial version of md-paginator and md-sort-header components, which can be used either with md-table or any other table. Both @angular/material and @angular/cdk are now strict null compliant.","title":"Highlights"},{"location":"site-files/project/0-CHANGELOG/#breaking-changes_12","text":"@angular/material now depends on @angular/cdk as a peer dependency. Some types have expanded to include | null or | undefined for strict null compatibility. If your application uses strict null checks, you may have to update the types in your app to match up with the more accurate types coming from Angular Material. Angular Material no longer adds RxJS operators to the prototype of Observable . If your app depended on these operators being added by Angular Material, you will need to import them explicitly.","title":"Breaking changes"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_71","text":"autocomplete: allow number zero as value ( #5364 ) ( 9137fd9 ), closes #5363 autocomplete: don't scroll panel when option is visible ( #4905 ) ( d3af57d ) autocomplete: not closing when tapping away on mobile ( #5260 ) ( 1dcaca7 ) autocomplete: reopening when clicking an option in IE ( #5172 ) ( fe31210 ), closes #5165 autosize: resize when form value changes. Fixes #4657 ( #5315 ) ( 8c9c11a ) button-toggle: fix standalone button toggle style ( #5121 ) ( 3d8c833 ) datepicker: pass layout direction to touchUi dialog ( #5052 ) ( 8b6efb1 ) datepicker: use theme foreground color ( #5290 ) ( 51bf26e ) dialog: set aria-labelledby based on the md-dialog-title ( #5178 ) ( aee984a ) directionality: error on platform-server ( #5234 ) ( 49dfe60 ) input: theming mixin error ( #5254 ) ( 37efb54 ), closes #5232 input: underline showing at end if text-align is set ( #5280 ) ( 5c9391d ), closes #5272 memory: Unsubscribe event listeners when using Observable.fromEvent ( #5325 ) ( 1b351cd ) menu: role being set on the wrong element ( #5191 ) ( 2239668 ) overlay: remove webkit tap highlight from backdrop ( #5258 ) ( 8feddd4 ) select: align first option to trigger when it is inside a group ( #5153 ) ( d39cb12 ) select: expose focus method ( #5255 ) ( 7b2d4ae ), closes #5251 select: md-optgroup not using typography styles ( #5193 ) ( b5bf6f5 ) select: page scrolling down when selecting option with space ( #5192 ) ( 2361385 ) snackbar: clear timeout upon dismiss ( #4860 ) ( 146160c ) tabs: server-side rendering error ( #5348 ) ( 0174377 ) unique-selection-dispatcher: remove listeners on destroy ( #5164 ) ( f9bbbe7 )","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#features_34","text":"data-table: initial version. Too many commits to list. directionality: a provider to get directionality ( #4044 ) ( 61d979e ), closes #3600 input: add custom error state matcher ( #4750 ) ( f73cc97 ) pagination: initial pagination component ( #5156 ) ( 85fb00a ) sort: add ability to manage and display sorting ( #5307 ) ( b328d36 ) tab-nav-bar: support disabling tab links ( #5257 ) ( fc809ed ), closes #5208 add support for strict null checks ( #5094 ) ( 2bf7024 ) remove uses of rxjs patch operators ( #5314 ) ( e488e3f ), closes #2622 move a11y, bidi, platform, rxjs, and portal to cdk ( #5386 ) ( fde35e4 ) move observe-content to cdk ( #5438 ) ( b00f838 )","title":"Features"},{"location":"site-files/project/0-CHANGELOG/#200-beta7-glass-delicatessen-2017-06-19","text":"","title":"2.0.0-beta.7 glass-delicatessen (2017-06-19)"},{"location":"site-files/project/0-CHANGELOG/#highlights_13","text":"New md-expansion-panel and md-accordion components! Documentation for these will be coming soon. New typography extension to the theming API! Angular Material should generally work much better with @angular/platform-server. There are still a few bugs, but things should mostly work.","title":"Highlights"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_72","text":"autocomplete: handle escape key ( #4703 ) ( 9e2a66c ) autocomplete: show hover style on selected options ( #4724 ) ( b3b6fda ) autocomplete: throw better error when autocomplete doesn't have a panel ( #4851 ) ( 70b31f1 ), closes #4844 button: remove webkit tap highlight ( #4953 ) ( 3ad80e4 ) button-toggle: remove redundant blocking touchstart listener ( #4947 ) ( 1e92545 ), closes #4221 button, tabs: potential clash with typography styles ( #4915 ) ( 615fa2a ) checkbox: margin for empty checkboxes incorrectly added ( #4730 ) ( 8d9bbbf ), closes #4720 checkbox, radio: fix checkbox label not read in JAWS ( #4610 ) ( 5c48949 ) datepicker: focus trap not working inside popup ( #4839 ) ( 157bda1 ) datepicker: generate api docs ( #4756 ) ( be8d3b2 ) datepicker: inert calendar arrow direction in rtl ( #4960 ) ( 22f0ea0 ) datepicker: minValidator maxValidation false errors ( #4649 ) ( b2c3ed0 ) datepicker: restore focus to trigger element ( #4804 ) ( 8860090 ) datepicker: switch to typography api ( #4950 ) ( 7f298f7 ) dialog: add flex wrap to style ( #4846 ) ( 9d4a34a ) dialog: blurry content and slow animation in IE ( #4809 ) ( c8b1e20 ) dialog: componentInstance unavailable in afterClose ( #4827 ) ( cedf219 ), closes #4815 dialog: invalid text color in dark themes ( #4849 ) ( 3e993b6 ) dialog: partial keyframes animation error ( #5020 ) ( 9c45865 ), closes #5019 focus-trap: focus initial element when zone stabilizes ( #4867 ) ( ce9d253 ), closes #4864 icon: remove automatic aria labelling and add a11y guidance ( #4665 ) ( 657f0e8 ) input: correct invalid colors ( #4771 ) ( 2103907 ) input: IE always adding scrollbar to textarea ( #4917 ) ( 6aaddbf ) input: make input spacing match spec ( #4788 ) ( 16b65e8 ) input: set aria-invalid on mdInput element ( #4757 ) ( 0c03946 ) input: remove align input binding ( #5141 ) ( 0aaeb69 ), closes #5140 input, cdk: a couple of server-side rendering errors ( #5066 ) ( 97e35df ) list: set aria attributes to md-divider ( #4925 ) ( a240c9c ) menu: remove classes from inert element ( #4800 ) ( 93a21c7 ), closes #4484 navbar: update ink bar when links change ( #4897 ) ( 41c43cc ) overlay: emit attach and detach at appropriate times ( #4880 ) ( e98372e ), closes #4871 portal: detect changes for portal hostview while before attaching. ( #4370 ) ( 28d2ddd ) radio: label vertical alignment ( #5120 ) ( d3d6d26 ) radio: make MdRadioButton change detection strategy OnPush ( #2526 ) ( 97a9bdc ) select: consider value changes via arrow keys on closed select as user actions ( #5112 ) ( 73aa43e ), closes #5084 select: panel in multiple mode not overlapping trigger ( #4952 ) ( 638a34a ), closes #4943 select: unable to programmatically select falsy values ( #4868 ) ( 2e3910c ), closes #4854 sidenav: don't restore focus if focus isn't inside sidenav ( #4578 ) ( 3bc82f6 ) slide-toggle: switch typography level to body-1 ( #5000 ) ( 436858e ) snack-bar: test error in IE ( #5048 ) ( 79092bd ) tabs: fix tab translation animation in IE 11 ( #4982 ) ( #4986 ) ( 40f92c5 ) tooltip: not rendering in IE and Edge without web animations polyfill ( #4937 ) ( 22746ce ), closes #4935 make material work with noUnusedParameters ( #4946 ) ( 4b98f21 ), closes #4443","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#features_35","text":"autocomplete: extend selector to match textarea ( #4945 ) ( 223a27b ) datepicker: popup positioning improvements ( #4696 ) ( eadccc2 ), closes #4406 dialog: allow disableClose option to be updated ( #4964 ) ( 66629cf ), closes #3938 dialog: allow setting the layout direction ( #4778 ) ( 4658c85 ) dialog: custom class option #4718 #4012 ( #4722 ) ( 28c936f ) expansion-panel: introduce expansion panel ( cac7610 ) input: autosize sets default amount of rows to one ( #4906 ) ( 1055720 ), closes #4852 add camelCase selectors where they were missing ( #4901 ) ( 3eb0681 ) integrate typography api into all components ( #4375 ) ( e650b04 ) overlay: more flexible scroll strategy API and ability to define/override custom strategies ( #4855 ) ( 7e91270 ) placeholder: add global placeholder options ( #4681 ) ( #4681 ) ( d0d79fd ), closes #4311 radio: support for color binding ( #5068 ) ( 82d752b ), closes #4677 select: add input for adding classes to the panel ( #4629 ) ( 99293d9 ), closes #4485 select: add md-optgroup component ( #4432 ) ( d09aa89 ), closes #3182 tooltip: add mdTooltipClass for customizing ( #4893 ) ( 734eccc )","title":"Features"},{"location":"site-files/project/0-CHANGELOG/#breaking-changes_13","text":"input: The align input from the md-input-container component has been removed. Developers instead should use plain CSS to achieve the same effect (using text-align: end for example).","title":"BREAKING CHANGES"},{"location":"site-files/project/0-CHANGELOG/#200-beta6-amber-ansible-2017-05-25","text":"","title":"2.0.0-beta.6 amber-ansible (2017-05-25)"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_73","text":"autocomplete: error when clicking outside instance without mdInput ( #4573 ) ( e6f7ace ), closes #4555 autocomplete: restore focus to input when click on option ( #4702 ) ( eecf897 ), closes #4645 block-scroll-strategy: collapsing root node when enabled ( #4638 ) ( f11d46e ) button: complete ripple when button becomes disabled ( #4372 ) ( fce2868 ) button: ripples blocking mouse events on user content ( #4526 ) ( 9c4d601 ) checkbox, radio: make disabled label disabled match spec color ( #4507 ) ( 8159fcc ) chips: unable to tab out of chip list ( #4605 ) ( 07a82ed ), closes #4593 datepicker: calendar toggle submitting parent form ( #4531 ) ( 84ea8b2 ), closes #4530 datepicker: export MD_DATE_FORMATS and MD_NATIVE_DATE_FORMATS ( #4541 ) ( 58c252f ), closes #4534 datepicker: make datepicker work in compatibility mode ( #4686 ) ( b5b762a ) datepicker: set cursor on clickable elements ( #4542 ) ( d2d67f5 ), closes #4533 datepicker: use default cursor on toggle when disabled ( #4604 ) ( 1319355 ) dialog: enable smooth scrolling on md-dialog-content ( #4608 ) ( 3ae0dc6 ) focus-origin: missing rxjs of operator ( #4497 ) ( 05dbb90 ) icon: handle icons as nodes ( #4699 ) ( 3212411 ), closes #4680 input: continue checking for input child after initialization ( #4569 ) ( 73d6814 ), closes #4551 input: thicken underline in error state, add underline animation ( #4506 ) ( 0666207 ) list-key-manager: remove handling for home and end keys ( #4544 ) ( 2d16345 ), closes #3496 menu: close menu panel on escape ( #4666 ) ( 210e57c ), closes #3601 overlay: overlays potentially being rendered behind browser UI ( #4664 ) ( 96549e8 ), closes #4650 platform: don't shadow window ( #4622 ) ( e8ab0da ) progress-bar: buffer animation not working on user-generated themes ( #4525 ) ( 61f3987 ) select: allow option with undefined or null value to clear selection ( #3141 ) ( 13524c1 ), closes #3110 #2634 select: deselect old options when programmatically setting value ( #4658 ) ( db72b06 ) select: option text color blending in with background on dark theme ( #4568 ) ( 43e207c ), closes #4560 slider: add aria-orientation ( #4602 ) ( 0b5b624 ) slider: make slider work with dark themes ( #4489 ) ( af48bb0 ) snack-bar: remove text-transform uppercase ( #4567 ) ( 82e53c5 ) tabs: dynamic tab scrollbar showing while animating ( #4524 ) ( 2a15cd7 ) tooltip: not using trigger's text direction ( #4413 ) ( d8aeeaa ), closes #4411 universal: gate platform checks on being on browser ( #4635 ) ( e4c7601 )","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#features_36","text":"core: expose ScrollDispatchModule ( #4501 ) ( caee5a5 ) dialog: add result to MdDialogClose directive ( #4332 ) ( c45dee2 ) focus-trap: allow setting initially focused element ( #4577 ) ( c946631 ) overlay: add scroll blocking strategy ( #4500 ) ( 6842046 ) snack-bar: allow setting the layout direction ( #4726 ) ( 0e24345 ), closes #4721","title":"Features"},{"location":"site-files/project/0-CHANGELOG/#200-beta5-taffeta-admiral-2017-05-13","text":"","title":"2.0.0-beta.5 taffeta-admiral (2017-05-13)"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_74","text":"list, option: fix ripples blocking mouse events on user content ( #4503 ) ( c4b3625 ), closes #4480","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#200-beta4-unobtainium-sunglasses-2017-05-12","text":"","title":"2.0.0-beta.4 unobtainium-sunglasses (2017-05-12)"},{"location":"site-files/project/0-CHANGELOG/#breaking-changes_14","text":"MdIconModule no longer imports HttpModule . If your application depended on Http being provided through MdIconModule , you should now directly import HttpModule into your application. The forRoot method on all Angular Material modules has been removed. It was previously deprecated and a no-op. Importing the modules directly will have the same effect. Angular Material now requires TypeScript 2.2, which adds support for mixins.","title":"Breaking Changes"},{"location":"site-files/project/0-CHANGELOG/#highlights_14","text":"New datepicker component! This is still very new, so please try it out and file any issues you encounter on Github. You can now disable Material's global sanity checks (at your own risk). These checks include whether your theme file is included, that you have a doctype, and more. See the PR here . Our support for Angular Universal should be much improved! Expect further improvements in subsequent releases.","title":"Highlights"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_75","text":"autocomplete: not scrolling to active option when pressing home/end ( #3709 ) ( 8d0cd04 ) autocomplete: not updating the size while the panel is open ( #4346 ) ( bfeb515 ) autocomplete: panel not being shown with delay and OnPush change detection ( #3977 ) ( efd3485 ), closes #3955 autocomplete: reposition panel on scroll ( #3745 ) ( 81a6f8d ) autocomplete: unable to click to select items in IE ( #3188 ) ( 78985b7 ), closes #3351 button: ripple color for raised buttons ( #3829 ) ( 7f65f31 ), closes #2901 card: update color property to use theme's text color. ( #3952 ) ( 5e7af26 ) cdk: add camelCase selectors for cdk directives ( #4054 ) ( cb98270 ) checkbox: do not set indeterminate when set checked programmatically ( #4024 ) ( de8b97f ) checkbox: no side margin if label has no content ( #2121 ) ( 4e8d806 ), closes #2011 checkbox: set pointer cursor for checkbox ( #4473 ) ( b2f93b5 ), closes #4185 checkbox: support OnPush for disabled with forms module ( #4087 ) ( efb39da ) checkbox, radio: ripple error on focus event ( #3869 ) ( e22b55e ), closes #3856 chips: wrong margin on single chip ( #4366 ) ( 5d03c1a ), closes #4359 compatibility: error in theme check with angular universal ( #3872 ) ( a65d2f4 ), closes #3870 compatibility: throw better error when wrong prefix is used ( #3871 ) ( 2d50044 ) connected-overlay: better handling of dynamic content ( #4250 ) ( 525ce1e ), closes #4155 core: remove deprecated forRoot functions ( #3539 ) ( c94f471 ) core: export MdOptionSelectionChange ( #4285 ) ( af978cd ) dialog: capture previously focused element immediately ( #3875 ) ( 29968b8 ) dialog: close all dialogs on popstate/hashchange ( #2742 ) ( 85bc3a6 ), closes #2601 dialog: fire afterClosed callback after all dialog actions are done ( #3892 ) ( ee1a5a7 ) dialog: provide default value for MD_DIALOG_DATA token ( #4120 ) ( d1128fe ), closes #4086 dialog: restoring focus too early ( #4329 ) ( afaa2dc ), closes #4287 dialog: unable to press escape to close in lazy-loaded module ( #3788 ) ( 3796f69 ), closes #3737 focus-trap: import rxjs first operator ( #4400 ) ( 2c8faf6 ) grid-list: export MdGridTile. Fixes #2408 ( #4000 ) ( 9d719c5 ) input: add back pointer-events none removed in #3878 ( #4206 ) ( fb1fabc ) input: allow pointer events on placeholder ( #3878 ) ( 32b7426 ) input: incorrect height with autosize ( #4084 ) ( 21f8899 ), closes #4070 input: input placeholder not being hidden in IE under certain conditions ( #4478 ) ( fc73a4b ), closes #4464 input: make start and end hints interact well when their text needs to wrap ( #3979 ) ( 21cbf34 ) input: placeholder not rendering in Chrome under certain conditions ( #4405 ) ( 5e349d9 ) input: single-line hints overflowing the parent ( #4107 ) ( 0b9b582 ), closes #4051 input-container: new attribute hideRequiredMarker ( #4237 ) ( 6c31adb ), closes #3681 list: fix padding for list items ( #4486 ) ( d1d2e18 ) list: icon size in dense mode ( #3913 ) ( f412499 ), closes #3886 list: remove overflow hidden from content ( #4426 ) ( 078aa19 ) list: set explicit box-sizing on icon ( #3876 ) ( e263fb7 ), closes #3863 menu: incorrect panel max height ( #4214 ) ( d3210e7 ) menu: unable to bind to xPosition and yPosition ( #4213 ) ( 1fd50aa ), closes #4169 menu: wrong icon margin in rtl ( #4225 ) ( ba6b9bb ) overlay: no longer export internal type ( #4390 ) ( 136f7ff ) overlay: render the templates before placing them in the overlay. ( #2989 ) ( da33c03 ) progress-spinner: not working with server-side rendering ( #4020 ) ( aebbd8a ), closes #3988 ripple: explicit type for global ripple options ( #4240 ) ( 115e901 ) ripple: global ripple configuration on init ( #4238 ) ( 9a2c4d6 ), closes #4235 select: missing rxjs filter import ( #4407 ) ( 1ec88e0 ) select: prevent the panel from going outside the viewport horizontally ( #3864 ) ( e10bb18 ), closes #3504 #3831 select: reposition panel on scroll ( #3808 ) ( 5983a2b ) select: tab opening multiple select and space scrolling page ( #4210 ) ( 24a762f ) select: unable to hide via visibility ( #4264 ) ( f16affc ), closes #4247 select: wrong panel width if element is hidden initially ( #3647 ) ( eaf16c8 ), closes #3639 #3244 slide-toggle: invalid model change event ( #4140 ) ( 317952a ), closes #4124 slide-toggle: remove unused mousedown listener ( #4184 ) ( e82d0f1 ) slider: correct typo in MdSliderChange description ( #4216 ) ( #4217 ) ( 4bdceed ) slider,slide-toggle: use the grab cursor ( #3821 ) ( cc8f871 ), closes #3778 snack-bar: allow multi-line text ( #3626 ) ( eef57f6 ), closes #1951 snack-bar: leaking object references ( #4403 ) ( 4ca16d7 ), closes #2942 tabs: animation error with nested tab groups ( #4315 ) ( 1766649 ), closes #4277 tabs: apply dark theme to header font ( #4326 ) ( c37a2de ), closes #4320 tabs: re-align the ink bar when the viewport size changes ( #3877 ) ( 7942948 ), closes #3845 #3044 #2518 #1231 tabs: remove forRoot that was missed ( #4328 ) ( b4e8c7d ) tabs: unnecessary scrollbar if content has a margin ( #4062 ) ( 7336bdc ), closes #3162 #4035 textarea: fix change detection error on autosize ( #4180 ) ( bccf8d2 ) theming: fix broken sass expressions nested in theme classes ( #4145 ) ( 355f8b7 ), closes #4077 tooltip: wrong position when using OnPush change detection ( #3671 ) ( edf01c0 ), closes #3497 universal: gate several browser-specific bits on being on the browser ( #4251 ) ( f27df86 )","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#features_37","text":"datepicker: add initial datepicker ( #4404 ) ( 123d7ec ) card: allow md-card-title and subtitle to be used as attributes ( #4122 ) ( a200024 ) core: allow users to disable the sanity checks ( #4178 ) ( 16bba72 ), closes #4125 dialog: add hasBackdrop and backdropClass options to dialog config ( #2822 ) ( 7428c49 ), closes #2806 list: option to disable ripples for all items ( #4159 ) ( 7f0f473 ), closes #4149 observe-content: add debounce option and other improvements ( #2404 ) ( 244aece ) overlay: add scroll handling strategies ( #4293 ) ( c8ec981 ) overlay: expose interface for custom positions ( #4374 ) ( ea8241a ) progress-spinner: add support for custom stroke-width ( #4113 ) ( b846a27 ), closes #3934 select: add ability to cycle through options with arrow keys when closed ( #3313 ) ( 66e65c4 ), closes #2990 select: allow setting the theme color ( #3928 ) ( 3a29d67 ), closes #3923 select: close the panel when pressing escape ( #3879 ) ( 94a2855 ) add initial sass typography API ( #4162 ) ( 7de316f ) remove hard dependency on @angular /http ( #3792 ) ( b011b45 ), closes #2616 sidenav: open all sidenavs from MdSidenavContainer ( #2870 ) ( 79306ad ), closes #2591 tabs: allow disabling ripples ( #4466 ) ( e4789c7 )","title":"Features"},{"location":"site-files/project/0-CHANGELOG/#performance-improvements_17","text":"dialog: switch dialog animations to translate3d ( #3905 ) ( 857c217 )","title":"Performance Improvements"},{"location":"site-files/project/0-CHANGELOG/#200-beta3-cesium-cephalopod-2017-04-07","text":"","title":"2.0.0-beta.3 cesium-cephalopod (2017-04-07)"},{"location":"site-files/project/0-CHANGELOG/#breaking-changes_15","text":"","title":"Breaking changes"},{"location":"site-files/project/0-CHANGELOG/#package-structure","text":"The package structure for Angular Material has changed to match that of Angular itself. This has a few ramifications on applications consuming Angular Material: Deep imports will no longer work, e.g., @angular/material/core/a11y . All public symbols should be imported directly from @angular/material . Deep imports have always been an anti-pattern, but our previous package structure inadvertently allowed them. The imports for theming have changed. ** For prebuilt themes, you can now find the CSS files in the prebuilt-themes/ directory in the package root. For angular-cli projects, this will look something like @import '~@angular/material/prebuilt-themes/deeppurple-amber.css'; ** For custom themes, you can now import theming.scss directly from the package root. Again, with angular-cli, this will look something like: @import '~@angular/material/theming';","title":"Package structure"},{"location":"site-files/project/0-CHANGELOG/#removal-of-deprecated-symbols","text":"The deprecated, Md -prefixed aliases for LiveAnnouncer , Platform , and UniqueSelectionDispacther have been removed.","title":"Removal of deprecated symbols"},{"location":"site-files/project/0-CHANGELOG/#materialmodule","text":"MaterialModule (and MaterialRootModule ) have been marked as deprecated. We've found that, with the current state of tree-shaking in the world, that using an aggregate NgModule like MaterialModule leads to tools not being able to eliminate code for components that aren't used. In order to ensure that users end up with the smallest code size possible, we're deprecating MaterialModule, to be removed in the a subsequent release. To replace MaterialModule , users can create their own \"Material\" module within their application (e.g., GmailMaterialModule ) that imports only the set of components actually used in the application.","title":"MaterialModule"},{"location":"site-files/project/0-CHANGELOG/#angular-4","text":"Angular Material now depends on Angular 4. Now that animations have been refactored into a separate package, users of @angular/material need to explicitly import BrowserAnimationsModule (or NoopAnimationsModule ) from @angular/platform-browser/animations as well as installing @angular/animations .","title":"Angular 4"},{"location":"site-files/project/0-CHANGELOG/#other-changes","text":"The DomProjection service was removed. This was an experimental, undocumented service that we ultimately found did not provide a good approach to composing components. The config property was removed from MdDialogRef . If you were using this to access the data property, you can instead inject that value using the MD_DIALOG_DATA of the opened component.","title":"Other changes"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_76","text":"autocomplete: \"undefined\" being displayed on empty control with ngModel ( #3535 ) ( 675c9df ), closes #3529 autocomplete: aria-expanded should be updated when panel hides ( #3494 ) ( 932b4a0 ) autocomplete: do not trigger submit on ENTER ( #3727 ) ( bedf5a1 ), closes #3159 autocomplete: fix down arrow use with ngIf ( #3493 ) ( a4e2de7 ) autocomplete: fix key manager instantiation ( #3274 ) ( c21ff40 ) autocomplete: not showing panel on first focus in certain cases ( #3775 ) ( 75996b5 ) autocomplete: prevent opening on load in IE ( #3190 ) ( a4da08b ), closes #3183 autocomplete: remove max width for autocomplete panel ( #3297 ) ( 738e9bf ), closes #3198 autocomplete: update overlay ref width on menu trigger ( #3573 ) ( 6915e8a ) button: add transition to focus overlay ( #2850 ) ( 6cdd8db ) button: persist theme color of button when leaving hover state ( #3629 ) ( 3ad6ff0 ) button: square ripple in compatibility mode ( #3167 ) ( ceb472b ), closes #3164 button: use FocusOriginMonitor for focus styles ( #3294 ) ( 5d6920d ) button-toggle: fix color for selected button toggle and selected disabled button toggle ( #3418 ) ( be167c9 ), closes #3382 button-toggle: only show focus style when focused via keyboard ( #3232 ) ( d744a5f ) card: removed header height ( #3450 ) ( 17bf5e5 ), closes #3288 card: unable to override elevation ( #3139 ) ( 4ee16a9 ), closes #3123 checkbox: add focus indication ( #3403 ) ( 01188d9 ), closes #3102 checkbox: create ripple on label mousedown ( #3206 ) ( 3edf105 ), closes #3030 checkbox: focus origin for focus method ( #3763 ) ( 7a60489 ) checkbox: show checkbox animation only if user click or indeterminate state ( #3137 ) ( f4323b2 ), closes #2783 checkbox: switch checkbox behaviors for click and change events ( #3146 ) ( 8aa9857 ) chips: Fix adding new chips on demo page ( #3426 ) ( 2d16a24 ) compatibility: remove ink bar from compatibility check ( #3267 ) ( c203589 ) connected-overlay: direction not being updated ( #3293 ) ( 817dcfd ), closes #3241 connected-position: error if none of the initial positions fit in viewport ( #3189 ) ( a306a8e ) core: log warning if doctype is missing ( #2849 ) ( 22b0660 ), closes #2351 demo: remove input route from demo app ( #2922 ) ( 6bac315 ) dialog: delay focus until animation is done ( #3774 ) ( d7d2b16 ), closes #3722 dialog: leaking component instance references ( #2875 ) ( e120e8d ), closes #2734 dialog: leaking MdDialogContainer references ( #2944 ) ( 8e6720b ), closes #2876 docs: only rewrite relative links ( #3339 ) ( cb57660 ), closes #3147 focus-trap: avoid closure compiler issues when adding anchors ( #3448 ) ( 8b2ae0d ) focus-trap: enabled property not being coerced ( #3417 ) ( d81445b ) focus-trap: exception when element contains SVG on IE ( #3432 ) ( d06ad75 ), closes #3410 input: baseline alignment on textarea ( #3714 ) ( 7cff349 ) input: change dividerColor to color ( #3726 ) ( 2ccf0ae ) input: don't add empty prefix suffix wrappers ( #3724 ) ( 6d6c12d ) input: don't animate label when value is set programmatically ( #3691 ) ( dc5c869 ) input: fix blank aria-describedBy ( #3713 ) ( cb85eeb ) input: fix chrome autofill style ( #3366 ) ( f40b1b2 ) input: label animation shifting sibling labels ( #3568 ) ( f8cdd92 ), closes #3541 input: make all icons in input containers the correct size ( #3489 ) ( 359c9bb ) input: make icons in prefix/suffix the right size ( #3342 ) ( 63d4359 ) input: make sure injected NgControl belongs to the input ( #3700 ) ( 220163e ) input: overflow-y scrollbar is displayed (IE) ( #3571 ) ( 7ffaf9e ), closes #3570 input: remove jitter that occurs on focus ( #3343 ) ( eba7641 ) interactivity-checker: cast node name to lowercase for isInputElement function ( #3281 ) ( 8f76f96 ) list: add font-family style to subheader ( #3056 ) ( 3464011 ) list-key-manager: exception when no initial active item ( #3431 ) ( 842896b ), closes #3317 menu: incorrect text alignment in IE/Edge ( #3268 ) ( 5ef3084 ), closes #3254 menu: not emitting close event when closing via the backdrop ( #3300 ) ( 0f28daf ), closes #3295 menu,tooltip: Ensure subscription exists before unsubscribing. ( #3078 ) ( 84b5c3b ) aot runtime issues ( #3807 ) ( f40296e ) change selectors for MdCardXlImage and MdCardAvatar ( #3134 ) ( 6e1f50b ) coverage issue with saucelabs ( #3540 ) ( 4d4a63e ) select: allow custom aria-label ( #3765 ) ( 038a337 ), closes #3762 deprecate MaterialModule ( #3840 ) ( 3f5894e ) overlay: ensure proper stacking order when attaching ( #3581 ) ( aa5925b ), closes #3574 package.json: Fix failing npm run api command ( #3462 ) ( bf2b615 ) portal-host: unable to clear and portal reference not being set ( #3302 ) ( 7fcb93b ) progress-spinner: not redrawing when changing modes ( #3672 ) ( 1ae81a4 ), closes #3648 pseudo-checkbox: alignment issue and border color ( #3144 ) ( 1f19ef0 ) radio: add focus indication ( #3402 ) ( c934753 ), closes #3102 ripple: different durations for ripple elements ( #3136 ) ( 5c7a96b ), closes #3109 ripple: fade-out-all should hide all ripples ( #3400 ) ( 5cc50d2 ) ripple: fix ripple color in dark theme ( #3094 ) ( a91ae72 ) ripple: rename selector for the ripple ( #3482 ) ( 58c5d17 ) scripts: change all paths in docs pushing script to relative paths ( #3091 ) ( 60aa9e9 ) scroll-dispatcher: unable to unsubscribe from global listener ( #3729 ) ( 68db6ba ) scrollable: check if scrollable exists before unregistering ( #3050 ) ( b358c6c ) select: animation jump in Chrome and blurry text in IE ( #3328 ) ( 09c6386 ), closes #3327 #1953 select: exception if selected value is accessed on init ( #3785 ) ( e82457c ), closes #3750 select: initial value not being displayed with FormControl and OnPush ( #3434 ) ( 819fa0b ) select: show focus indicator even with validation errors ( #3743 ) ( e964734 ), closes #3742 select: unable to set a tabindex ( #3479 ) ( 11dec36 ), closes #3474 select: wrong item order in label in rtl ( #3567 ) ( 52ea7a3 ) sidenav: throw error when sidenav has 2 sidenavs on the same side at the same time ( #3369 ) ( 324da5b ) sidenav: use vw instead of percentage for sidenav min width ( #3046 ) ( c638e20 ) slide-toggle: fix unavailable unmonitor call ( #3862 ) ( 904c71e ) slide-toggle: input not updated after drag ( #3067 ) ( 5cdeb75 ) slide-toggle: invalid change events with no new value ( #3555 ) ( 5346353 ), closes #3526 slide-toggle: occasional element jumping ( #3311 ) ( beb0edf ) slide-toggle: remove host element margin ( #3761 ) ( cd0b853 ) slide-toggle: ripple fade-in too slow ( #3170 ) ( 369931e ) slider: unable to reset tickInterval after it has been set ( #3488 ) ( b9b014a ), closes #3452 tab: use MD_RIPPLE_GLOBAL_OPTIONS in tab ( #3553 ) ( ee853b9 ) tab-nav: add constructor back for ripple ( #3537 ) ( f27617a ) tabs: change color for disabled tab label ( #3483 ) ( 290f710 ), closes #3481 tabs: missing mat class on tab group ( #3038 ) ( d97debe ) tabs: re-align ink bar on direction change ( #3622 ) ( 07793a4 ), closes #3615 tabs: remove body and header from compatibility ( #3168 ) ( b939cd8 ) tabs: remove flex; bring ink into same parent as links ( #3331 ) ( 00de2d7 ) tabs: set tab body content to 100% ( #3162 ) ( cbd1ff9 ), closes #3153 toolbar: incorrect height for soft-keyboards ( #3312 ) ( d1abc9e ), closes #3233 tooltip: avoid capturing the initial tap on mobile ( #2423 ) ( 85ba82a ), closes #2326","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#features_38","text":"autocomplete: support static placeholders ( #3115 ) ( 8482bbf ) button-toggle: Add a focus overlay for button-toggle ( #3119 ) ( 0544deb ) checkbox: add value attribute to md-checkbox ( #2701 ) ( fb565c0 ), closes #2583 dialog: add enter/exit animations ( #2825 ) ( 5492225 ), closes #2665 dialog: allow for the dialog dimensions to be updated ( #2940 ) ( a71a5af ), closes #2930 FocusOriginMonitor: support monitoring subtree focus as well as element ( #3113 ) ( 3b39bd2 ) input: add directive for displaying error messages ( #3560 ) ( c29f8ca ) input: add invalid state styling ( #3114 ) ( bc9d25b ) list: add ripples to list items that are links ( #930 ) ( aa3360a ) overlay: allow theming overlay-based components ( #2967 ) ( cbd42f0 ), closes #2662 ripple: add option for persistent ripples ( #3315 ) ( e3ba1e1 ), closes #3169 ripple: add way to globally disable ripples ( #3383 ) ( 3ff383c ) ripple: expose ripple directive in template ( #3165 ) ( 6595ad8 ) ripple: support for global ripple options ( #3463 ) ( fb75a13 ) select: add floatingPlaceholder option ( #2571 ) ( bb2392f ), closes #2569 #2963 select: add multiple selection mode ( #2722 ) ( dcc8576 ), closes #2412 slide-toggle: add option to disable ripple ( #3195 ) ( f8fde13 ) upgrade to angular 4 ( #3608 ) ( cd55082 ), closes #3357 #3336 #3301 slide-toggle: add ripple focus indicator ( #3739 ) ( c4ec662 ) slide-toggle: use ripple service ( #3068 ) ( 8541f8e ), closes #2900 slider: add theme color support ( #3766 ) ( 28f1ec3 ) slider: differentiate sliders focused via keyboard vs other means ( #3487 ) ( bcb16c6 ) snack-bar: add dismiss method to MdSnackBar service ( #3069 ) ( 83b5842 ) theming: log a warning if core theme isn't loaded ( #3781 ) ( 4282917 ), closes #2828 tooltip: allow tooltip be disabled ( #3578 ) ( 4e38f69 )","title":"Features"},{"location":"site-files/project/0-CHANGELOG/#performance-improvements_18","text":"ripple: avoid triggering change detection ( #3066 ) ( 1a67107 ) scroll-dispatcher: avoid triggering change detection on scroll ( #3687 ) ( 5c2b449 ) scroll-dispatcher: lazily subscribe to global events ( #3270 ) ( c1004cb ), closes #3237","title":"Performance Improvements"},{"location":"site-files/project/0-CHANGELOG/#200-beta2-flannel-papaya-2017-02-15","text":"","title":"2.0.0-beta.2 flannel-papaya (2017-02-15)"},{"location":"site-files/project/0-CHANGELOG/#breaking-changes-from-beta1","text":"Styling is no longer prefixed by md- . All styling is now prefixed by mat- so that apps can upgrade from AngularJS Material to Angular Material without styling conflicts between the two library components. See ( #2790 ) for the details on the code change and some useful regular expressions that can help migrate styles. Checkbox tab index @Input has been changed from tabindex to tabIndex . ( #2953 ) Ripple no longer has the mdRippleBackgroundColor input to change the background color. ( #2859 ) The deprecated use of md-input and md-textarea has been removed. Use mdInput on an input or textarea within a md-input-container . md-prefix and md-suffix are now mdPrefix and mdSuffix . ( #2788 ) html md-input-container input mdInput name=\"value\" ngModel /md-input-container The deprecated use of md-sidenav-layout has been removed. Use md-sidenav-container instead. ( #2283 ) Input floating placeholder @Input has changed from a boolean ( true and false ) to a state ( always , never , and auto ) and was renamed from floatingPlaceholder to floatPlaceholder . For details on when to use which state, see ( #2585 ) The use of Module forRoot has been deprecated and will be removed in the next release. Instead, just simply import MaterialModule directly: ts @NgModule({ imports: [ ... MaterialModule, ... ] ... });","title":"Breaking changes from beta.1"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_77","text":"autocomplete: add mat version of autocomplete @Input ( #2928 ) ( e5521a8 ) autocomplete: allow basic use without forms directives ( #2958 ) ( 4ee2980 ) autocomplete: close panel when options list is empty ( #2834 ) ( 8a3b6fd ) autocomplete: double-clicking input shouldnt close the panel ( #2835 ) ( 18969f4 ) autocomplete: hide instead of close when options empty ( #2997 ) ( a022035 ) autocomplete: placeholder should float while panel is open ( #2730 ) ( eec4dc6 ) autocomplete: scroll options below fold into view ( #2728 ) ( 6c84603 ) autocomplete: support rtl ( #2648 ) ( 4f59ad0 ) autocomplete: up arrow should set last item active ( #2776 ) ( fd5e4d9 ) autosize: export md-autosize directive ( #2432 ) ( f2d73da ), closes #2419 button: add default color for mat-raised-button ( #3052 ) ( 6fe1d9a ) button: only flat button and icon buttons should inherit the color ( #2561 ) ( ac363df ), closes #2539 button: raised buttons in dark theme ( #3070 ) ( 87ab712 ) button: reuse _getHostElement() to avoid redundant elementRef.nativeElement calls ( #2625 ) ( c7d1c17 ) button-toggle: add the setDisabledState from ControlValueAccessor ( #2430 ) ( fb750b4 ) button-toggle: conflict with radio component ( #2343 ) ( 9e99374 ), closes #2274 button-toggle: make conform with design specs ( #2570 ) ( fed5d7b ) card: fix padding for md-card-actions in xs screens ( #2567 ) ( ad0df31 ) checkbox: Emit event when checkbox's indeterminate value changes ( #2130 ) ( f11c5eb ) checkbox: rename tabindex to tabIndex ( #2953 ) ( b91964a ) checkbox: ripple color does not change ( #2857 ) ( 7ac29f8 ) checkbox, radio: not using theme border color ( #2744 ) ( 07ec765 ) compatibility: add missing mat- selectors ( #2923 ) ( f29f7ab ) connected-position-strategy: wrong logic when determining whether element is on screen ( #2677 ) ( e055d05 ), closes #2102 #2658 dialog: escape key not working once element loses focus ( #3082 ) ( a08dc55 ), closes #3009 dialog: prevent error when restoring focus on IE ( #2771 ) ( 153fcd3 ), closes #2760 dialog: prevent the close button from submitting forms ( #2659 ) ( 29f939a ), closes #2599 dialog: use injector from viewContainerRef if provided ( #2655 ) ( be0da09 ) docs: properly create links in guide files ( #2770 ) ( 60f03ed ) icon: add caching of md-icon aria-label ( #2649 ) ( 08e9d70 ), closes #2642 input: add more padding so that the hint doesn't overflow the container ( #2246 ) ( d7831d9 ) input: camel-case md-prefix and md-suffix ( #2639 ) ( 7562322 ), closes #2636 input: disable underline with reactive forms ( #2565 ) ( f9dd34f ), closes #2558 input: disabled inputs should be grayed out ( #2513 ) ( ed3ffe0 ) input: ensure that property bindings work ( #2431 ) ( b4b4224 ), closes #2428 input: fix chrome 56 warning ( #2906 ) ( 62189a3 ) input: fix placeholder for number input with bad input. ( #2362 ) ( 52aa715 ) input: hints not being read out by screen readers ( #2856 ) ( f899b5f ), closes #2798 input: horizontal overflow in IE and Edge ( #2784 ) ( e0fe635 ) input: properly determine input value ( #2455 ) ( 3a11927 ), closes #2441 #2363 input: remove md-input and md-textarea in favor of md-input-container ( #2788 ) ( 7b30fdc ) input: vendor-prefix ::placeholder ( #2547 ) ( 3b16648 ) input-container: prefix and suffix stretching together with parent ( #2496 ) ( 64f6d1b ), closes #2493 #1881 #1421 input-container: reduce redundancy when forwarding the NgControl classes ( #2442 ) ( 8c0eef2 ) option: revert duplicate prop ( #3051 ) ( 516720f ) overlay: disable pointer events if overlay is detached ( #2747 ) ( 453fa7f ), closes #2739 overlay: fix pointer events for ie11 ( #3023 ) ( 597e3de ), closes #3022 progress-bar: buffer animation not working in IE ( #2941 ) ( ab8f98f ), closes #2881 progress-bar: unable to apply visibility in indeterminate mode and reduce CSS ( #2417 ) ( eb96b0c ), closes #2413 progress-spinner: fix color input on md-spinner ( #2396 ) ( 6cb6576 ), closes #2393 radio: change radio button trigger element to input element ( #2838 ) ( 2f10a95 ) ripple: camel-cased CSS classes ( #2340 ) ( c67f4e5 ) ripple: make ripples conform with specs ( #2859 ) ( 6381948 ) select: avoid going into infinite loop under certain conditions ( #2955 ) ( 998a583 ), closes #2950 select: don't open menu if there are no options ( #2924 ) ( cc77ef4 ) select: fix select panel animation ( #2699 ) ( 15eb33a ), closes #2695 select: fix selection color ( #2697 ) ( 4e94da4 ), closes #2696 select: selected option not being highlighted when options are added asynchronously ( #2499 ) ( 7fc38b9 ), closes #2497 select: set default font size ( #2976 ) ( 40bc486 ) select: set select value to trigger height and center text ( #3021 ) ( ac9c090 ) select: support use inside a custom value accessor ( #2704 ) ( 651440f ), closes #2609 select: transparent background when overscrolling ( #2117 ) ( d9b2d85 ) select: trim long labels inside md-option ( #2444 ) ( 416f56f ), closes #2440 select: view not updating when using OnPush detection strategy ( #2894 ) ( 3bcb7c3 ), closes #2663 #2269 select: parent align affects placeholder ( #2572 ) ( a1c90b3 ) sidenav: animate content resizing for side mode. ( #2486 ) ( 4d33449 ) sidenav: fix animation issue for initially open sidenav ( #3045 ) ( 37e4bad ) slide-toggle: consistent naming of aria attributes ( #2688 ) ( 10bd6da ) slider: fire change event on value change via keyboard. ( #2807 ) ( 7f50d11 ) slider: hide ticks when slider is disabled ( #2687 ) ( e9ec8ab ) apply font-family to text components ( #2821 ) ( d11673a ) slider: make disabled state look like mocks ( #2604 ) ( 8263ffb ) slider: make min value style match mocks ( #2641 ) ( 737b608 ) slider: round decimals in the thumb label ( #2527 ) ( 987897c ), closes #2511 snack-bar: improper button styling and improved handling of long text ( #2991 ) ( 93937e6 ), closes #2979 snack-bar: prevent error when opening multiple snack bars in fast succession ( #2392 ) ( 161f319 ), closes #2390 snack-bar: SimpleSnackBar not being exported ( #3016 ) ( a7a3967 ), closes #3010 tabs: crashing on chrome under certain conditions ( #2411 ) ( 727ce53 ), closes #2151 tabs: fix ink not showing on chrome 57 ( #3041 ) ( f24832c ) tabs: infinite loop when selectedIndex is set to NaN ( #2389 ) ( f4cfc2d ) toolbar: add toolbar role to host element ( #2914 ) ( 67032ca ), closes #2909 toolbar: correct font-weight ( #2485 ) ( 1b44880 ) toolbar: prevent content overflow and line-wrapping ( #2454 ) ( e728771 ), closes #2451 tooltip: better handling of multi-line text ( #2472 ) ( 7863e38 ), closes #2205 tooltip: not working properly with ChangeDetectionStrategy.OnPush ( #2721 ) ( 632b964 ), closes #2713 tooltip: provide a maximum width ( #2678 ) ( fb5e1d4 ), closes #2671","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#features_39","text":"autocomplete: add autocomplete panel toggling ( #2452 ) ( d4ab3d3 ) autocomplete: add fallback positions ( #2726 ) ( 8fc7706 ) autocomplete: add keyboard events to autocomplete ( #2723 ) ( fcea9d4 ) autocomplete: add screenreader support ( #2729 ) ( bd7f240 ) autocomplete: add value support ( #2516 ) ( 5def001 ) autocomplete: allow use of obj values ( #2792 ) ( 55e1847 ) button-toggle: Show selected option when md-button-toggle is disabled ( #3012 ) ( 1547440 ), closes #3007 compatibility: remove conflicts with material1 css styling ( #2790 ) ( 210ff02 ) dialog: add a config option for passing in data ( #2266 ) ( 29cbe61 ), closes #2181 dialog: add events (observables) for open closeAll ( #2522 ) ( 23ab152 ) dialog: add the ability to align the content of md-dialog-actions ( #2557 ) ( e18ab5d ), closes #2483 dialog: support open with TemplateRef ( #2910 ) ( bf0f625 ) focus-classes: expose focus origin changes through observable ( #2974 ) ( d4ba648 ) FocusOriginMonitor: add support for touch events ( #3020 ) ( ec7e2e4 ) input: option to imperatively float placeholder ( #2585 ) ( fb0cf8a ), closes #2466 list-key-manager: active descendant support ( #2606 ) ( e2ad3a0 ) menu: Added ability to show the menu overlay around the menu trigger ( #1771 ) ( 592f33f ) overlay: add fullscreen-enabled overlay class ( #1949 ) ( 0640302 ) screenshot: Add screenshot function to e2e test (button and checkbox) ( #2532 ) ( 8ba8deb ) scripts: push generated docs to material assets repo ( #2720 ) ( ba12f44 ) select: emit change event ( #2458 ) ( e5bd15c ), closes #2248 sidenav: add disableClose option ( #2501 ) ( 52ade97 ), closes #2462 slide-toggle: add support for labelPosition ( #2836 ) ( 68a0c90 ), closes #2820 slider: emit input event when slider thumb moves ( #2325 ) ( 99963c4 ), closes #2296 snack-bar: allow addition of extra css classes ( #2804 ) ( e783494 ), closes #2664 style: add directive to determine how elements were focused. ( #2646 ) ( 8a6d902 ) tabs: add the ability to invert the header ( #2391 ) ( a494c92 ), closes #2387 theming: provide a content wrapper attribute ( #2170 ) ( 4bf4b87 ), closes #1938 #2106 tooltip: reposition on scroll ( #2703 ) ( bc52298 ) viewport-ruler: cache document client rect ( #2538 ) ( d0c8f18 ) add a common class to be used when dealing with selection logic ( #2562 ) ( c295fa9 ) add simplified checkbox component for usage in other components ( #2619 ) ( 3b6cab0 ) remove the need for forRoot on material NgModules ( #2556 ) ( b49bfce )","title":"Features"},{"location":"site-files/project/0-CHANGELOG/#performance-improvements_19","text":"tabs: reduce amount of reflows when aligning the ink bar ( #2372 ) ( dab742f )","title":"Performance Improvements"},{"location":"site-files/project/0-CHANGELOG/#200-beta1-rebar-teacup-2016-12-23","text":"","title":"2.0.0-beta.1 rebar-teacup (2016-12-23)"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_78","text":"Remove MdAutocompleteModule that was accidentally included in beta.0 Correct path to umd bundle in package.json ( #2368 ) ( d286e6d ), closes #2366","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#200-beta0-velvet-pizza-2016-12-22","text":"","title":"2.0.0-beta.0 velvet-pizza (2016-12-22)"},{"location":"site-files/project/0-CHANGELOG/#breaking-changes-from-alpha11","text":"The svgSrc propert of md-icon has been removed. All SVG URLs must now be explicitly marked as trusted using Angular's DomSanitizer service. The md-input element is deprecated in favor of md-input-container . This new component allows for direct access to the native input element. All @Input properties have been changed to use their camelCase names for binding. The old names are still available as deprecated but will be removed in the next release. All @Directive selectors are now camelCase to be consistent with Angular core. For example, [md-tooltip] is now [mdTooltip] The old selectors are still available as deprecated but will be removed in the next release. md-progress-circle has been renamed to md-progress-spinner . The old selector and symbols are still available as deprecated but will be removed in the next release. md-sidenav-layout has been renamed to md-sidenav-container . The old selector is still available as deprecated but will be removed in the next release. Several components in core/ , such as Overlay, have had their prefix changed to cdk- (short for \"component dev kit\"). This signifies that these are general-purpose tools for building components that are not coupled to Material Design.The old selectors are still available as deprecated but will be removed in the next release. The CSS classes have been changed. The align property for md-checkbox and md-radio-button has been changed to labelPosition with values before and after . MdTooltip properties are now prefixed, e.g., mdTooltipPosition , mdTooltipHideDelay , etc.","title":"Breaking changes from alpha.11"},{"location":"site-files/project/0-CHANGELOG/#note-on-hammerjs","text":"HammerJS is now optional. It is still necessary for gestures to work within certain components, but should no longer throw an error if it is missing.","title":"Note on HammerJS"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_79","text":"a11y: add all providers to forRoot ( #2222 ) ( 9272b4b ), closes #2189 add re-exports for symbols needed by Aot ( #2149 ) ( c324142 ) icon: remove svgSrc, only allow trusted urls ( #1933 ) ( 4571561 ) input: copy input state classes to md-input-container ( #2191 ) ( f0c4148 ) input: fix underline color to match spec ( #2167 ) ( b850fed ), closes #2126 input: label alignment in rtl ( #2047 ) ( 7b3a059 ), closes #2034 input: treat number 0 as non-empty ( #2245 ) ( a818579 ) input: unable to focus input in IE 11 ( #2233 ) ( 8ec3a19 ) overlay: proper backdrop stacking with multiple overlays ( #2276 ) ( b16031a ), closes #2272 platform: Remove assumption of `window' in MdPlatform ( #2221 ) ( e436775 ) positioning: fallback positions should work while scrolled ( #2193 ) ( 8df30db ) progress-circle, progress-bar: bind color via [color] rather than [attr.color] ( #2299 ) ( e4d2bef ) progress-spinner: Rename ProgressCircle to ProgressSpinner ( #2300 ) ( 221c234 ) select: clear select if no option matches value ( #2110 ) ( 2855cc3 ), closes #2109 select: make invalid selector more specific ( #2166 ) ( a7c88c5 ) sidenav: make focus-trap occupy full height of sidenav ( #2145 ) ( 13223df ) sidenav: Rename md-sidenav-layout to md-sidenav-container. ( #2183 ) ( 8f1c5a9 ) slider: prevent thumb from getting stuck on Mobile Safari ( #2142 ) ( 4adee46 ) snack-bar: clean up element when associated viewContainer is destroyed ( #2219 ) ( db9608f ), closes #2190 tabs: observing tab header label changes to recalculate width ( #2186 ) ( 7ab4430 ), closes #2155 TSError: ? Unable to compile TypeScript when running 'gulp:build' ( #2132 ) ( 714c2a4 ) tests: snackbar ref has unnecessary observable.of ( #2298 ) ( d076bd3 ) tooltip: add missing rxjs import ( #2288 ) ( ba7053f )","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#features_40","text":"make hammerjs optional ( #2280 ) ( 28691ca ) chips: initial version of md-chip-list. ( #2242 ) ( f45c315 ) ( #2046 ) ( ba85883 ) ( #2332 ) ( 3f2db27 ) dialog: add dialog content elements ( #2090 ) ( cac72aa ), closes #1624 #2042 checkbox, radio: change align to labelPosition (inverted) ( #2289 ) ( a1f9028 ) connected-position: apply the fallback position that shows the largest area of the element ( #2102 ) ( 4f5b9c5 ), closes #2049 core: add scrollable view properties to connected pos strategy ( #2259 ) ( b60d33f ) input: create md-input-container to eventually replace md-input ( #2052 ) ( ca2046b ) scroll: provide directive and service to listen to scrolling ( #2188 ) ( 9b68e68 ) sidenav: close via escape key and restore focus to trigger element ( #1990 ) ( a1331ec ) tooltip: add input for delaying show and hide ( #2101 ) ( e85d108 ) toolbar add responsive heights as per spec ( #2157 ) ( 78d54fc )","title":"Features"},{"location":"site-files/project/0-CHANGELOG/#performance-improvements_20","text":"sidenav: avoid extra repaints while scrolling ( #2156 ) ( b967712 )","title":"Performance Improvements"},{"location":"site-files/project/0-CHANGELOG/#200-alpha11-polyester-golem-2016-12-08","text":"NOTE: Be sure to delete your previous install of @angular/material and install it fresh, as npm sometimes doesn't see that there is a more recent alpha release.","title":"2.0.0-alpha.11 polyester-golem (2016-12-08)"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_80","text":"a11y: improved accessibility in high contrast mode ( #1941 ) ( 5cf7d17 ), closes #421 #1769 button: ensure icons are aligned vertically. ( #1736 ) ( d3a50b3 ), closes #1093 button: improved tap responsiveness on mobile ( #1792 ) ( 4183fbc ), closes #1316 button: remove disabled attribute when disabled value is false for MdAnchor ( #1789 ) ( 716372b ) checkbox: fix native checked not being checked when MdCheckbox initial checked value is true ( #2055 ) ( 3fd3117 ) checkbox, input, radio, slide-toggle: implement setDisabledState from ControlValueAccessor ( #1750 ) ( 77a960c ), closes #1171 dialog: add border radius ( #1872 ) ( 6aa7e22 ), closes #1868 dialog: avoid subpixel rendering issues and refactor GlobalPositionStrategy ( #1962 ) ( 1ea6d34 ), closes #932 dialog: backdrop not being removed if it doesn't have transitions ( #1716 ) ( accab20 ), closes #1607 elevation: change elevations to match spec ( #1857 ) ( c2597b6 ) interactivity-checker: improve robustness of isTabbable ( #1950 ) ( 4b7e52d ) list: prevent list item wrapper elements from collapsing ( #2075 ) ( 27f9c99 ), closes #2012 list-key-manager: prevent the default keyboard actions ( #2009 ) ( a8355e4 ) menu: reposition menu if it would open off screen ( #1761 ) ( 7572e34 ) overlay: prevent blurry connected overlays ( #1784 ) ( 303dd69 ) overlay-directives: update offsets if they change after overlay creation ( #1981 ) ( b36db15 ) radio: fix radio group behavior on change ( #1735 ) ( bbc5f6a ) ripple: Always remove ripple after a certain period ( #1915 ) ( 62cc830 ) ripple: don't create background div until ripple becomes enabled ( #1849 ) ( d7a54ef ) ripple: Fix the ripple position when page is scrolled ( #1907 ) ( dd508ea ) sidenav: resolve promise as false rather than ( #1930 ) ( 7816752 ) slider: emit change event after updating value accessor ( #1901 ) ( 8caf9a6 ) slider: support for RTL and invert ( #1794 ) ( 5ac29dd ) spinner: animation not being cleaned up when used with AoT ( #1838 ) ( 83de14f ), closes #1283 tab-link: avoid potential memory leak ( #1877 ) ( e332f15 ) tabs: tabs should update when tabs are added or removed ( #2014 ) ( dfc580d ) tooltip: check tooltip disposed on animation hidden ( #1816 ) ( 9c0d82a ) tooltip: don't show tooltip if message is empty or not present ( #2081 ) ( 2701aae ), closes #2078 tooltip: throw a better error when an invalid position is passed ( #1986 ) ( 539e44e )","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#features_41","text":"select initial version of md-select (too many commits to list) textarea: add md-autosize directive (this will be more useful once the md-input refactoring is complete) ( #1846 ) ( 9ec17c0 ) tabs: paginate tab header when exceeds width ( #2084 ) ( 92e26d7 ) tabs: add ripples to the tab group and nav bar links ( #1700 ) ( b9fe75a ) tabs: animate tab change, include optional dynamic height ( #1788 ) ( f6944e4 ) tabs: md-stretch-tabs ( #1909 ) ( 78464a2 ), closes #1353 button-toggle: add option for vertical toggle groups ( #1936 ) ( cb0d6fc ), closes #1892 dialog: add configurable width, height and position ( #1848 ) ( bc6cf6e ), closes #1698 dialog: add the ability to close all dialogs ( #1965 ) ( b2999c9 ) focus-trap: add the ability to specify a focus target ( #1752 ) ( 72ac7a0 ), closes #1468 icon: added color attribute to md-icon for icon theming ( #1896 ) ( da5febc ) overlay: emit position change event ( #1832 ) ( b79c953 ) overlay: support min width and min height ( #2063 ) ( a695574 ) overlay-directives: attach and detach events ( #1972 ) ( a5eab75 ) overlay-directives: support fallback positions ( #1865 ) ( aa472a0 ) sidenav: emit event when backdrop is clicked ( #1638 ) ( 93807ed ), closes #1427 sidenav: focus capturing ( #1695 ) ( b9c3304 ) slider: keyboard support ( #1759 ) ( 13b7dd0 ) slider: vertical mode ( #1878 ) ( deb940f ) snackbar: add onAction to snackbar ref ( #1826 ) ( a40cae9 ) snackbar: add timeout for snackbar ( #1856 ) ( 6ce6396 ) tooltip: show tooltip on longpress; remove delay on mouseleave ( #1819 ) ( 1552d70 ) a11y: add wrap mode to key manager ( #1796 ) ( 3d4abac )","title":"Features"},{"location":"site-files/project/0-CHANGELOG/#200-alpha10-mithril-hoverboard-2016-11-10","text":"","title":"2.0.0-alpha.10 mithril-hoverboard (2016-11-10)"},{"location":"site-files/project/0-CHANGELOG/#breaking-changes_16","text":"MdSnackbarConfig no longer takes a ViewContainerRef as a contructor argument because the ViewContainerRef is now optional. Tabs no longer use an md-tab-content directive. Instead, the non-label content of the tab is used as its content. Labels can also be specified via attribute, so the tabs can now be given as: html md-tab-group md-tab label=\"Overview\" This is the overview tab /md-tab md-tab label=\"Details\" This is the details tab /md-tab /md-tab-group You can still use md-tab-label to provide a label template.","title":"Breaking Changes"},{"location":"site-files/project/0-CHANGELOG/#features_42","text":"tab-nav-bar: new component! Provides a tab-bar for use with a router-outlet ( #1589 ) ( 572b36e ) a11y: manager for list keyboard events ( #1599 ) ( 95b2a34 ) checkbox: add color attribute. ( #1463 ) ( 333b11e ) checkbox: add ripple ( #1611 ) ( ef4c3c9 ) dialog: add disableClose option ( #1678 ) ( 93f8e04 ), closes #1419 dialog: allow for an object literal to be passed on init ( #1679 ) ( f525db1 ) dialog: don't require a ViewContainerRef ( #1704 ) ( f59030e ) menu: add animations ( #1685 ) ( 7fcf511 ) menu: allow menu-trigger to take a menu interface. ( #1564 ) ( 96d196a ), closes #1560 menu: support icons ( #1702 ) ( 982cdaa ) overlay: add custom classes for backdrop ( #1532 ) ( 0b54668 ) overlay: set overlay size ( #1583 ) ( ffbc295 ) overlay: support all overlay config properties ( #1591 ) ( 6f322cf ) overlay: support custom offsets ( #1660 ) ( 1738d24 ) overlay: support rtl in overlays ( #1593 ) ( b56f520 ) radio: add ripple ( #1553 ) ( d83b3e0 ) slider: fire change event ( #1618 ) ( 780a654 ) slider: implement ControlValueAccessor setDisabledState ( #1603 ) ( 437ec8e ) snack bar: add enter and exit animations. ( #1320 ) ( 6df29dc ) snackbar: don't require a ViewContainerRef ( #1783 ) ( 9115538 ) tabs: simplify api ( #1645 ) ( ea6c817 ) textarea: initial md-textarea. Does not yet support auto-size. ( #1562 ) ( aff22e5 ) tooltip: add tooltip animations ( #1644 ) ( 52582f4 )","title":"Features"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_81","text":"aot: export dialog/snackbar containers through index ( #1378 ) ( bb61928 ) aot: fix aot error w/ live announcer ( #1355 ) ( 276d07d ) button: Changed button corner radius from 3px to 2px ( #1441 ) ( ec48b34 ) button: set vertical alignment for md-button and md-raised-button ( #1565 ) ( f10ac7c ) button-toggle: add exportAs ( #1528 ) ( d2c288d ) button-toggle: disable user-select in button-toggle ( #1720 ) ( 83f6efc ) checkbox: disable for all non-false values ( #1631 ) ( 80491a9 ) checkbox: prevent checkbox being squished ( #1713 ) ( 6601949 ) checkbox: vertically align for when there's no text ( #1721 ) ( 7fd0fcd ) gestures: don't clobber native drag events ( #1458 ) ( b09465c ) ( #1744 ) ( 4af3cd3 ), closes #1025 input: correctly position md-hint in IE11 when position start ( #1674 ) ( ecefb89 ) input: remove invalid aria-target attribute ( #1513 ) ( 601c036 ), closes #929 input: set line-height to normal ( #1734 ) ( f1f660e ) list: ensure multi-line lists expand to fill space ( #1466 ) ( e7b872a ) list: prevent default black border from applying ( #1548 ) ( 4086b32 ), closes #1336 list: set flex-shrink for avatar ( #1464 ) ( 5a528aa ), closes #1403 menu: improve a11y for screenreaders ( #1715 ) ( 267e323 ) menu: make menu open idempotent ( #1478 ) ( a5b3296 ) menu: properly handle spacebar events ( #1533 ) ( cfe3e98 ), closes #1175 menu: update menu to use overlay rtl ( #1687 ) ( 2b913de ) menu: update to use overlay backdrop ( #1534 ) ( add0d23 ) overlay: ensure container covers entire screen ( #1634 ) ( af39236 ) overlay: fix connected position calculation while scrolled ( #1732 ) ( 2de461e ) overlay: not taking up entire viewport if body is scrollable ( #1661 ) ( 16cbbab ), closes #1633 overlay: raise z-index for overlay-container ( #1614 ) ( 8f50c35 ) portal: cleanup PortalHost on directive destroy ( #1703 ) ( 7e08468 ) progress-bar: bar being thrown off by parent's text-align ( #1717 ) ( 309d54c ), closes #1165 progress-circle: allow value to be set to 0 ( #1536 ) ( 25c7fd5 ) progress-spinner: animation expanding parent element ( #1742 ) ( 4203d09 ), closes #1259 radio: only call change callback with user input ( #1521 ) ( 920c875 ) radio: only emit change event on user interaction ( #1680 ) ( 0d552f5 ) radio: only fire group change if there is a group ( #1622 ) ( 065469a ) radio: Uncheck radio group if uncheck radio button programmatically ( #1561 ) ( c108607 ), closes #609 ripple: disable pointer events on ripple ( #1623 ) ( f91ea21 ) ( #1684 ) ( 7336b90 ) ripple: prevent color flicker on radio/checkbox ( #1705 ) ( 8ce65ca ) sidenav: resolve the promise when sidenav is initialized opened. ( #1666 ) ( a0d85d8 ), closes #1382 slide-toggle: disabled theme not working and dragging works if disabled ( #1268 ) ( 8908366 ) slide-toggle: emit change event after drag end ( #1405 ) ( 0b5b6f2 ) slide-toggle: remove view encapsulation ( #1446 ) ( cbecbce ), closes #1343 slide-toggle: thumb spacing at end for rtl ( #1659 ) ( ad3100e ) slide-toggle: update colors to match spec ( #1612 ) ( 596d994 ) slider: clamp thumb between min and max ( #1617 ) ( 783dbb3 ), closes #1557 slider: correctly detect when sidenav align changes. ( #1758 ) ( 5ffdea6 ) slider: update thumb pos ticks when min/max change ( #1598 ) ( ff84842 ) slider: update thumb position when value changes. Closes #1386 ( #1610 ) ( 8e7f80d ) slider: use percent values for the track ( #1663 ) ( 8815846 ), closes #1389 #1304 #1234 snackbar: add explicit box-sizing ( #1413 ) ( 580da74 ), closes #1412 snackbar: always clear ref when dismissing ( #1773 ) ( 3c5b632 ) snackbar: remove even if still animating open ( #1797 ) ( 523a48e ) snackbar: snackbars sometimes don't get removed ( #1795 ) ( fcd29c8 ) tabs: make @Output not private ( #1636 ) ( 04e2201 ) tabs: set correct min-width on mobile devices ( #1351 ) ( e270e50 ), closes #1350 tooltip: remove tooltip component after its parent destroyed ( #1470 ) ( 92ac392 ), closes #1111 correct EventEmitter generic type across lib ( #1620 ) ( 0174fa9 ) disable ripples when parent component is disabled ( #1778 ) ( 6b9e11c )","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#performance-improvements_21","text":"progress-circle: improved rendering performance ( #1635 ) ( 0883fb2 )","title":"Performance Improvements"},{"location":"site-files/project/0-CHANGELOG/#200-alpha9-cobalt-kraken-2016-09-26","text":"","title":"2.0.0-alpha.9 cobalt-kraken (2016-09-26)"},{"location":"site-files/project/0-CHANGELOG/#breaking-changes_17","text":"Angular Material has changed from @angular2-material/... packages to a single package under @angular/material . Along with this change, there is a new NgModule, MaterialModule , that contains all of the components. Build tools such as rollup.js can perform tree-shaking to eliminate the code for components that you aren't using. The addition of theming as also changed the directory structure for bringing the core css into your application. See the new theming guide for more information.","title":"Breaking Changes"},{"location":"site-files/project/0-CHANGELOG/#features_43","text":"theming: add initial version for theming ( #1239 ) ( e0726e1 ) dialog: initial version of dialog ( #1041 ) ( 7ecda22 , #1321 ) ( 74dc5b2 , #1330 ) ( 23143b9 ) snack-bar: initial version of MdSnackBar. ( #1296 ) ( a732e88 ) packaging: move packaging to a single \" @angular /material\" ( #1286 ) ( b5c8c63 ) a11y: add basic focus-trap directive ( #1311 ) ( 3e8b9d9 ) a11y: initial interactivity checker ( #1288 ) ( 8a4b69d ) card: add md-card-footer ( #1178 ) ( 1c2a3f1 )","title":"Features"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_82","text":"aot: change @Inputs to not be private ( #1289 ) ( b284dd4 ) checkbox, slide-toggle: forward required attribute to input. ( #1137 ) ( 0e9383a ), closes #1133 gestures: add hammer types by default ( #1309 ) ( 1a824d2 ) grid-list: darken grid footer ( #1310 ) ( f9116f3 ) grid-list: hide overflow on tiles ( #1299 ) ( 06a6076 ) input: input should not be treated as empty if it is a date field. ( #846 ) ( fe2b493 ), closes #845 #845 #845 sidenav: align text at start ( #1297 ) ( 0e0ff0e ) sidenav: fix dark theme ( #1319 ) ( 332a4a2 ) sidenav: fix Promise type to match ( #1188 ) ( 3d5ceab ) theming: set input default color to currentColor in input theme ( #1260 ) ( #1262 ) ( fa78f72 )","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#200-alpha8-ectoplasm-helicopter-2016-09-01","text":"","title":"2.0.0-alpha.8 ectoplasm-helicopter (2016-09-01)"},{"location":"site-files/project/0-CHANGELOG/#breaking-changes_18","text":"all: we've updated our packaging to match angular/angular's packaging. If you're using SystemJS in your project, you will probably want to switch to using our UMD bundles. Example config: '@angular2-material/core': { format: 'cjs', main: 'core.umd.js' } You can see a more detailed example in our demo app's system config . In addition to this, each component now has an index.js file, so you should now have imports like import {MdButtonModule} from '@angular2-material/button' Instead of import {MdButtonModule} from '@angular2-material/button/button' all: material modules must be included with forRoot() when bootstrapping. See the ngModules guide for more information. @NgModule({ imports: [ MdCoreModule.forRoot(), MdRadioModule.forRoot(), MdIconModule.forRoot() ] ... }); all: material now depends on TypeScript 2.0 input: md-input attributes now match the casing of native attributes. Previously they were camel-cased; now they are all lowercase. Example: autoComplete is now autocomplete . See #1066 for a full list. overlay: overlays are now synchronous. This means actions like creating an overlay no longer return a promise.","title":"Breaking Changes"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_83","text":"button: hover styles no longer applied to disabled buttons ( #909 ) ( 21e419d ), closes #866 button: stop using Type from @angular ( #991 ) ( 97d3ed3 ) button-toggle: toggle group should not emit an initial change event. ( #1144 ) ( e5830d1 ) card: remove unnecessary intermediate div ( #1068 ) ( b5e1e33 ) checkbox: export TransitionCheckState enum ( #1147 ) ( cda90f3 ) input: make attributes match native ones ( #1066 ) ( f3a7b91 ), closes #1065 ngc: _onDragStart/End are called with one param ( #1113 ) ( 6e5d260 ), closes #1112 ngc: don't emit HTMLElement in JS files ( #1061 ) ( 32eacd2 ) rc6: add directives for custom elements that are part of the APIs. ( #1121 ) ( 2c0dfcb ) sidenav: turn off view encapsulation and refactor css ( #1114 ) ( 97fe211 ) tabs: change missed md-active to md-tab-active ( #1044 ) ( 87b6193 )","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#features_44","text":"menu: add keyboard events and improve accessibility ( #1132 ) ( 3669f06 ) modules: add forRoot() to material modules with providers ( #1122 ) ( 9ff6196 ) modules: add forRoot() to all modules ( #1166 ) ( 21dc44a ) overlay: make overlays synchronous ( #1079 ) ( cdad90b ) slider: add thumb-label ( #976 ) ( 22d70ae ) slider: support ngModel ( #1029 ) ( 8828358 ) tabs: support for disabled tabs ( #934 ) ( 9d51deb ), closes #880","title":"Features"},{"location":"site-files/project/0-CHANGELOG/#200-alpha7-wax-umpire-2016-08-09","text":"","title":"2.0.0-alpha.7 wax-umpire (2016-08-09)"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_84","text":"checkbox: wrong cursor when disabled ( #908 ) ( 5251c27 ), closes #907 checkbox, slide-toggle: only emit change event if native input emitted one. ( #820 ) ( d52e6e0 ), closes #575 gestures: custom recognizers should not inherit twice. ( #902 ) ( c68efbd ) gestures: ensure drag and pan are recognized with slide ( #901 ) ( 3179fec ) input: ensure all of label displays on safari ( #871 ) ( c8303b4 ), closes #795 overlay: lazily create container ( #894 ) ( 1efbbb9 ) progress-circle: correct elapsed time calculation ( #927 ) ( 0b17cd3 ), closes #926 progress-circle: remove performance.now to support non browser envs ( #857 ) ( 14c1765 ) progress-circle: remove references to window ( #838 ) ( 66ddd3a ), closes #837 radio: only emit change event if native input does. ( #911 ) ( 23a61ab ), closes #791 slide-toggle: fix runtime exception for incorrect mousedown binding. ( #828 ) ( bbbc87f ), closes #828 fix type mismatches when offline compiling. ( #835 ) ( 4bb7790 )","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#features_45","text":"Add NgModules ( #950 ) ( ca351b2 ) Note that NgModules are now the supported way of including the Material components in your app. The MD_XXX_DIRECTIVES constants are now deprecated and will be removed in alpha.8. tooltip: initial tooltip implementation ( #799 ) ( f5e2a81 ) md-slider: initial version for md-slider ( #779 ) ( 8354750 ) md-menu initial version for md-menu (more features coming in alpha.8) ( #893 ) ( 16eb6be ) ( #855 ) ( e324e47 ) ( #867 ) ( 9a32489 ) ripple: initial mdInkRipple implementation ( #681 ) ( 47448cb ) button: add ripple to md-button ( 32aa461 ) input: support autocapitalize and autocorrect attributes ( #858 ) ( b2471f2 ) slide-toggle: add drag functionality to thumb ( #750 ) ( 25b4f21 )","title":"Features"},{"location":"site-files/project/0-CHANGELOG/#in-progress-not-yet-released","text":"dialog: add styles and ability to close. ( #862 ) ( 758b851 ) dialog: initial framework for md-dialog ( #761 ) ( 9552ed5 )","title":"In-progress, not yet released"},{"location":"site-files/project/0-CHANGELOG/#code-health","text":"tabs: adds e2e tests for tabs ( #650 ) ( 3c74ae0 ), closes #549","title":"Code health"},{"location":"site-files/project/0-CHANGELOG/#breaking-changes_19","text":"radio: radio-button will no longer emit change event on de-select.","title":"BREAKING CHANGES"},{"location":"site-files/project/0-CHANGELOG/#200-alpha6-carbonfiber-discotheque-2016-06-30","text":"","title":"2.0.0-alpha.6 carbonfiber-discotheque (2016-06-30)"},{"location":"site-files/project/0-CHANGELOG/#breaking-changes_20","text":"MdRadioDispatcher is now MdUniqueSelectionDispatcher and is imported from core Form controls use the new @angular/forms package. To make migration easier, you can alternatively install alpha.5-3, which is the same as alpha.6 without the new forms package. Please see the docs for the new forms module .","title":"Breaking changes"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_85","text":"button: add the focus() method to buttons. ( #643 ) ( a6e74ce ), closes #510 button: focus state matches spec ( #467 ) ( b24d321 ) checkbox: checkbox animation works in Safari ( #594 ) ( 0a9fb83 ) checkbox: prevent double click events ( #672 ) ( afed818 ), closes #671 core: resolve compilation errors for latest Typescript 1.9 ( #624 ) ( e366fa0 ), closes #624 demo-app: resolve mapping paths in relative. ( #566 ) ( 421828a ), closes #566 forms: update components to new forms module ( #745 ) ( 653fcee ) grid-list: account for gutter in total list height ( #545 ) ( b47097d ) input: Fix floating label width ( #689 ) ( cf2703c ), closes #689 #688 input: placeholder text is hidden by parent visibility ( #680 ) ( b407278 ), closes #670 overlay: add a z-index. ( #615 ) ( 89ab2f5 ) progress-bar: determinate state reflects value ( #542 ) ( 6b86df0 ), closes #519 radio: fix the baseline of radio buttons ( #642 ) ( 31f0c7f ), closes #642 radio: model should update before change event is fired ( #456 ) ( c923f56 ), closes #448 radio: support aria-label(ledby) on md-radio ( #586 ) ( #596 ) ( 8ccc49b ) release: make resource-inlining regex non-greedy ( #653 ) ( e808452 ) sidenav: md-content now fills height ( #703 ) ( e10172c ), closes #606 sidenav: resolve compilation errors for latest Typescript 1.9 ( #627 ) ( f7f0b4a ), closes #627 slide-toggle: apply typography styles to slide-toggle ( #634 ) ( bbd96e8 ), closes #633 slide-toggle: stop change event firing upon init ( #713 ) ( f21b2f4 ), closes #709 spinner: omit min/max/value for indeterminate and correctly set mode ( #640 ) ( a5944da ) tabs: adds support for async tabs ( #639 ) ( 231467d ), closes #574 tabs: removes minimum height ( #641 ) ( 750a8e3 ), closes #570 theme: fix card and list colors for dark themes ( #667 ) ( ce27341 ), closes #667 #350 toolbar: disable view encapsulation. ( #678 ) ( 5c4dc04 ), closes #676 add event object for slide-toggle and checkbox. ( #554 ) ( 55cc197 ), closes #552 include scss sources in packages ( #536 ) ( fd02b10 ) remove @internal where it would make tsc fail ( #538 ) ( efd1be2 ) remove circular deps and ci check ( #608 ) ( fda5617 ) remove duplicated typing. TS stdlib provides enough for e2e tests ( #637 ) ( a68597e ) resolve errors w/ Closure Compiler. ( #659 ) ( fbdb35b ), closes #659 visually hidden inputs should not bubble change event ( #551 ) ( d037ed3 ), closes #544","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#features_46","text":"grid-list: add header and footer support ( 43806f6 ) overlay: add connected overlay directive ( #496 ) ( 3b527e8 ) tabs: adds focus/select events ( #649 ) ( 497a3c1 ), closes #569 tabs: adds support for two-way bindings on selectedIndex ( #702 ) ( 8df3246 ), closes #687","title":"Features"},{"location":"site-files/project/0-CHANGELOG/#performance-improvements_22","text":"progress-circle: clean up animation on destroy ( #617 ) ( 63f43bd )","title":"Performance Improvements"},{"location":"site-files/project/0-CHANGELOG/#200-alpha5-granite-gouda-2016-05-25","text":"","title":"2.0.0-alpha.5 granite-gouda (2016-05-25)"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_86","text":"checkbox: change event should now fire on first change( 7a9df1e ), closes #481 gestures: ensure default gestures are not overwritten by custom gestures( 523929c ) gestures: export gesture config as part of core ( #488 )( 0d04e01 ) input: adds blur and focus event support ( #449 )( f6f5af3 ), closes #337 input: adds support for name property for input element ( #452 )( f53ffdb ), closes #446 input: input element should have a different id from outer element ( #450 )( be5e93a ), closes #320 input: inputs now work in IE11 ( #469 )( de2a9f2 ), closes #336 input: make native input background transparent ( #468 )( d2c6cb8 ), closes #277 input: undo firefox invalid style, fix maxlength in IE ( #393 )( dfe683b ), closes #393 #342 #388 input: use the right ID for the label. ( #515 )( 06aa3f1 ), closes #512 list: adds focus state for nav-list items ( #502 )( 34b210c ), closes #323 list: removes outline from focus state ( #511 )( 91ad1c8 ) progress-circle: support IE11 ( #375 )( f22fa86 ), closes #295 radio: refactor tests and fix ngModel ( #443 )( a25a8da ), closes #443 radio: remove event global so radio works in node( c32b06d ), closes #425 radio: unsetting the model will deselect all radio buttons ( #441 )( 8af16e8 ), closes #327 sidenav: add scrolling style to enable momentum scroll( c566242 ) sidenav: fixes sidenav RTL listening for side mode ( #465 )( 4e1d85e ), closes #465 #411 sidenav: removes margin transitions ( #460 )( 4b488e1 ), closes #404 sidenav: switches to translate3d() for content positioning ( #484 )( 357ee4c ) sidenav: treat opened as boolean attribute. ( #444 )( e977984 ), closes #300 misc: adds directive constants to all components ( #514 )( fb89d4f ), closes #513 misc: correct access-level on many APIs ( #437 )( 358af3b ) misc: ensure custom error messages are set( 4a25b7f )","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#features_47","text":"tabs: adds the md-tab-group component ( #376 )( ada285c ) grid-list: add grid-list component( 0f89b8d ) slide-toggle add slide-toggle component. ( #362 )( e09a5bf ) checkbox: drive component with native checkbox ( #415 )( 10ac2be ), closes #250 input: add focus function on host element ( #407 )( 0323844 ) input: add support for more input attributes ( #447 )( 911bfae ) overlay: add connected position strategy ( #335 )( 7f3b1bd )","title":"Features"},{"location":"site-files/project/0-CHANGELOG/#200-alpha4-mahogany-tambourine-2016-05-04","text":"","title":"2.0.0-alpha.4 mahogany-tambourine (2016-05-04)"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_87","text":"button: cleaned up button theming( 0672356 ) checkbox: fix horizontal spacing between checkboxes and radio buttons( f4a7266 ) sidenav: add min width for empty navs( dbe3cc5 ) sidenav: prevent content from scrolling when sidenav is open( fea5923 ) theme: new, more delightful default theme( 2f3e9db ) update to @angular 2.0.0-rc.0 ( #384 )( 04c8a1f )","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#features_48","text":"icon: initial md-icon implementation ( #281 )( a094a33 ) card: add alignment shortcuts for md-card-actions( 77be2df ) grid-list: basic scaffold for grid list (unreleased)( a9e1fa5 ) list: add icon support( 7b3698c ) sidenav: add fullscreen mode( aa6c740 )","title":"Features"},{"location":"site-files/project/0-CHANGELOG/#200-alpha3-cotton-candelabrum-2016-04-21","text":"","title":"2.0.0-alpha.3 cotton-candelabrum (2016-04-21)"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_88","text":"button: remove ref to Event global (for node) ( 76e4f56 ) input: convert values entered based on the type input ( e7611ce ) progress-circle: actually render on Firefox Edge (#283) ( d24a5b3 ) sidenav: do not throw when there's no sidenav. (#270) ( cc2b223 ), closes #269","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#features_49","text":"progress-bar: initial progress-bar impl. (#130) ( c640f0c ), closes #40 gestures: add basic gesture demos ( d4a3cde ) input: add support for spellcheck attribute (#316) ( dfee018 ) list: add nav list styles ( 22c1ea3 ) list: syntactic sugar for simple nav lists ( c21c336 ) a11y: live-announcer supports using a provided live element (#273) ( 1a33a5b ), closes #267","title":"Features"},{"location":"site-files/project/0-CHANGELOG/#200-alpha2-diamond-haircut-2016-04-06","text":"","title":"2.0.0-alpha.2 diamond-haircut (2016-04-06)"},{"location":"site-files/project/0-CHANGELOG/#bug-fixes_89","text":"button: apply color classes correctly. ( 62265cc ), closes #75 #89 #195 checkbox: Cancel spacebar keydown events when component focused ( 6db3511 ), closes #162 #181 checkbox: Ensure consistent mixedmark rendering across browsers ( 666cdba ), closes #174 #190 checkbox: Handle transition when unset checkbox is interacted with ( dde9359 ), closes #183 #227 checkbox: Reduce $md-checkbox-transition-duration to 90ms ( 87e3a32 ), closes #226 #230 checkbox: Remove GPU layer promotion for mark elements ( 82a22a7 ) sidenav: Remove deprecated @View ( a61e2e9 ), closes #213 radio: export the dispatcher in radio.ts ( 64cc406 )","title":"Bug Fixes"},{"location":"site-files/project/0-CHANGELOG/#features_50","text":"input: add new input component ( 74d9bc0 ) input: README.md improvements and autofill support. ( b711c2b ) list: add list component ( fb71eb1 ) list: add dividers to lists ( 915dd9b ) list: support subheaders in lists ( 0a9c169 ) elevation: Add elevation core styles ( 3e34f7a ), closes #222 button: add md-icon-button styling. ( 208cd65 ), closes #188 #206 overlay: add basic core of overlay ( f0e1273 ) overlay: add global position strategy ( c8f87a4 ) overlay: add overlay container styles ( 74e3edf ) portal: add DomPortalHost ( 358d923 ) radio: support ngModel on md-radio-group ( 6aff4cc ), closes #209 a11y: add aria live announcer ( e99da66 ), closes #106","title":"Features"},{"location":"site-files/project/0-CHANGELOG/#200-alpha1-nylon-hyperdrive-2016-03-16","text":"","title":"2.0.0-alpha.1 nylon-hyperdrive (2016-03-16)"},{"location":"site-files/project/0-CHANGELOG/#features_51","text":"radio: Radio button component. ( d76465b ), closes #125","title":"Features"},{"location":"site-files/project/0-CHANGELOG/#200-alpha0-titanium-octopus-2016-03-15","text":"","title":"2.0.0-alpha.0 titanium-octopus (2016-03-15)"},{"location":"site-files/project/0-CHANGELOG/#first-release-of-angular2-material","text":"This inaugural release includes 6 components: md-button (buttons and anchors) md-card md-toolbar md-sidenav md-checkbox md-progress-circle and md-spinner As the alpha process continues, these components will continue to evolve. There will be breaking changes between alpha releases; the alpha releases are here for people that want an early look or who like to live on the edge and are very tolerant of breaking API and behavior changes.","title":"First release of angular2-material!"},{"location":"site-files/project/1-CODING_STANDARDS/","text":"Angular Material Coding Standards Code style The Google JavaScript Style Guide is the basis for our coding style, with additional guidance here where that style guide is not aligned with ES6 or TypeScript. Coding practices General Write useful comments Comments that explain what some block of code does are nice; they can tell you something in less time than it would take to follow through the code itself. Comments that explain why some block of code exists at all, or does something the way it does, are invaluable . The \"why\" is difficult, or sometimes impossible, to track down without seeking out the original author. When collaborators are in the same room, this hurts productivity. When collaborators are in different timezones, this can be devastating to productivity. For example, this is a not-very-useful comment: // Set default tabindex. if (!$attrs['tabindex']) { $element.attr('tabindex', '-1'); } While this is much more useful: // Unless the user specifies so, the calendar should not be a tab stop. // This is necessary because ngAria might add a tabindex to anything with an ng-model // (based on whether or not the user has turned that particular feature on/off). if (!$attrs['tabindex']) { $element.attr('tabindex', '-1'); } In TypeScript code, use JsDoc-style comments for descriptions (on classes, members, etc.) and use // style comments for everything else (explanations, background info, etc.). In SCSS code, always use // style comments. In HTML code, use !-- ... -- comments, which will be stripped when packaging a build. Prefer more focused, granular components vs. complex, configurable components. For example, rather than doing this: mat-button Basic button /mat-button mat-button class= mat-fab FAB /mat-button mat-button class= mat-icon-button pony /mat-button do this: mat-button Basic button /mat-button mat-fab FAB /mat-fab mat-icon-button pony /mat-icon-button Prefer small, focused modules Keeping modules to a single responsibility makes the code easier to test, consume, and maintain. ES6 modules offer a straightforward way to organize code into logical, granular units. Ideally, individual files are 200 - 300 lines of code. As a rule of thumb, once a file draws near 400 lines (barring abnormally long constants / comments), start considering how to refactor into smaller pieces. Less is more Once a feature is released, it never goes away. We should avoid adding features that don't offer high user value for price we pay both in maintenance, complexity, and payload size. When in doubt, leave it out. This applies especially to providing two different APIs to accomplish the same thing. Always prefer sticking to a single API for accomplishing something. 100 column limit All code and docs in the repo should be 100 columns or fewer. This applies to TypeScript, SCSS, HTML, bash scripts, and markdown files. API Design Boolean arguments Avoid adding boolean arguments to a method in cases where that argument means \"do something extra\". In these cases, prefer breaking the behavior up into different functions. // AVOID function getTargetElement(createIfNotFound = false) { // ... } // PREFER function getExistingTargetElement() { // ... } function createTargetElement() { // ... } TypeScript Typing Avoid any where possible. If you find yourself using any , consider whether a generic may be appropriate in your case. For methods and properties that are part of a component's public API, all types must be explicitly specified because our documentation tooling cannot currently infer types in places where TypeScript can. Fluent APIs When creating a fluent or builder-pattern style API, use the this return type for methods: class ConfigBuilder { withName(name: string): this { this.config.name = name; return this; } } Access modifiers Omit the public keyword as it is the default behavior. Use private when appropriate and possible, prefixing the name with an underscore. Use protected when appropriate and possible with no prefix. Prefix library-internal properties and methods with an underscore without using the private keyword. This is necessary for anything that must be public (to be used by Angular), but should not be part of the user-facing API. This typically applies to symbols used in template expressions, @ViewChildren / @ContentChildren properties, host bindings, and @Input / @Output properties (when using an alias). Additionally, the @docs-private JsDoc annotation can be used to hide any symbol from the public API docs. Getters and Setters Avoid long or complex getters and setters. If the logic of an accessor would take more than three lines, introduce a new method to contain the logic. A getter should immediately precede its corresponding setter. Decorators such as @Input should be applied to the getter and not the setter. Always use a readonly property instead of a getter (with no setter) when possible. ```ts /* YES / readonly active: boolean; /* NO / get active(): boolean { // Using a getter solely to make the property read-only. return this._active; } ``` JsDoc comments All public APIs must have user-facing comments. These are extracted and shown in the documentation on material.angular.io . Private and internal APIs should have JsDoc when they are not obvious. Ultimately it is the purview of the code reviewer as to what is \"obvious\", but the rule of thumb is that most classes, properties, and methods should have a JsDoc description. Properties should have a concise description of what the property means: /** The label position relative to the checkbox. Defaults to 'after' */ @Input() labelPosition: 'before' | 'after' = 'after'; Methods blocks should describe what the function does and provide a description for each parameter and the return value: /** * Opens a modal dialog containing the given component. * @param component Type of the component to load into the dialog. * @param config Dialog configuration options. * @returns Reference to the newly-opened dialog. */ open T (component: ComponentType T , config?: MatDialogConfig): MatDialogRef T { ... } Boolean properties and return values should use \"Whether...\" as opposed to \"True if...\": /** Whether the button is disabled. */ disabled: boolean = false; Try-Catch Avoid try-catch blocks, instead preferring to prevent an error from being thrown in the first place. When impossible to avoid, the try-catch block must include a comment that explains the specific error being caught and why it cannot be prevented. Naming General Prefer writing out words instead of using abbreviations. Prefer exact names over short names (within reason). E.g., labelPosition is better than align because the former much more exactly communicates what the property means. Except for @Input properties, use is and has prefixes for boolean properties / methods. Classes Classes should be named based on what they're responsible for. Names should capture what the code does , not how it is used: /** NO: */ class RadioService { } /** YES: */ class UniqueSelectionDispatcher { } Avoid suffixing a class with \"Service\", as it communicates nothing about what the class does. Try to think of the class name as a person's job title. Classes that correspond to a directive with an mat- prefix should also be prefixed with Mat . CDK classes should only have a Cdk prefix when the class is a directive with a cdk selector prefix. Methods The name of a method should capture the action that is performed by that method rather than describing when the method will be called. For example, /** AVOID: does not describe what the function does. */ handleClick() { // ... } /** PREFER: describes the action performed by the function. */ activateRipple() { // ... } Inheritance Avoid using inheritance to apply reusable behaviors to multiple components. This limits how many behaviors can be composed. Instead, TypeScript mixins can be used to compose multiple common behaviors into a single component. Angular Host bindings Prefer using the host object in the directive configuration instead of @HostBinding and @HostListener . We do this because TypeScript preserves the type information of methods with decorators, and when one of the arguments for the method is a native Event type, this preserved type information can lead to runtime errors in non-browser environments (e.g., server-side pre-rendering). CSS Be cautious with use of display: flex The baseline calculation for flex elements is different than other display values, making it difficult to align flex elements with standard elements like input and button. Component outermost elements are never flex (block or inline-block) Don't use display: flex on elements that will contain projected content. Use lowest specificity possible Always prioritize lower specificity over other factors. Most style definitions should consist of a single element or css selector plus necessary state modifiers. Avoid SCSS nesting for the sake of code organization. This will allow users to much more easily override styles. For example, rather than doing this: .mat-calendar { display: block; .mat-month { display: inline-block; .mat-date.mat-selected { font-weight: bold; } } } do this: .mat-calendar { display: block; } .mat-calendar-month { display: inline-block; } .mat-calendar-date.mat-selected { font-weight: bold; } Never set a margin on a host element. The end-user of a component should be the one to decide how much margin a component has around it. Prefer styling the host element vs. elements inside the template (where possible). This makes it easier to override styles when necessary. For example, rather than the-host-element { // ... .some-child-element { color: red; } } you can write the-host-element { // ... color: red; } The latter is equivalent for the component, but makes it easier override when necessary. Support styles for Windows high-contrast mode This is a low-effort task that makes a big difference for low-vision users. Example: @media screen and (-ms-high-contrast: active) { .unicorn-motocycle { border: 1px solid #fff !important; } } Explain what CSS classes are for When it is not super obvious, include a brief description of what a class represents. For example: // The calendar icon button used to open the calendar pane. .mat-datepicker-button { ... } // Floating pane that contains the calendar at the bottom of the input. .mat-datepicker-calendar-pane { ... } // Portion of the floating panel that sits, invisibly, on top of the input. .mat-datepicker-input-mask { }","title":"1-CODING_STANDARDS"},{"location":"site-files/project/1-CODING_STANDARDS/#angular-material-coding-standards","text":"","title":"Angular Material Coding Standards"},{"location":"site-files/project/1-CODING_STANDARDS/#code-style","text":"The Google JavaScript Style Guide is the basis for our coding style, with additional guidance here where that style guide is not aligned with ES6 or TypeScript.","title":"Code style"},{"location":"site-files/project/1-CODING_STANDARDS/#coding-practices","text":"","title":"Coding practices"},{"location":"site-files/project/1-CODING_STANDARDS/#general","text":"","title":"General"},{"location":"site-files/project/1-CODING_STANDARDS/#write-useful-comments","text":"Comments that explain what some block of code does are nice; they can tell you something in less time than it would take to follow through the code itself. Comments that explain why some block of code exists at all, or does something the way it does, are invaluable . The \"why\" is difficult, or sometimes impossible, to track down without seeking out the original author. When collaborators are in the same room, this hurts productivity. When collaborators are in different timezones, this can be devastating to productivity. For example, this is a not-very-useful comment: // Set default tabindex. if (!$attrs['tabindex']) { $element.attr('tabindex', '-1'); } While this is much more useful: // Unless the user specifies so, the calendar should not be a tab stop. // This is necessary because ngAria might add a tabindex to anything with an ng-model // (based on whether or not the user has turned that particular feature on/off). if (!$attrs['tabindex']) { $element.attr('tabindex', '-1'); } In TypeScript code, use JsDoc-style comments for descriptions (on classes, members, etc.) and use // style comments for everything else (explanations, background info, etc.). In SCSS code, always use // style comments. In HTML code, use !-- ... -- comments, which will be stripped when packaging a build.","title":"Write useful comments"},{"location":"site-files/project/1-CODING_STANDARDS/#prefer-more-focused-granular-components-vs-complex-configurable-components","text":"For example, rather than doing this: mat-button Basic button /mat-button mat-button class= mat-fab FAB /mat-button mat-button class= mat-icon-button pony /mat-button do this: mat-button Basic button /mat-button mat-fab FAB /mat-fab mat-icon-button pony /mat-icon-button","title":"Prefer more focused, granular components vs. complex, configurable components."},{"location":"site-files/project/1-CODING_STANDARDS/#prefer-small-focused-modules","text":"Keeping modules to a single responsibility makes the code easier to test, consume, and maintain. ES6 modules offer a straightforward way to organize code into logical, granular units. Ideally, individual files are 200 - 300 lines of code. As a rule of thumb, once a file draws near 400 lines (barring abnormally long constants / comments), start considering how to refactor into smaller pieces.","title":"Prefer small, focused modules"},{"location":"site-files/project/1-CODING_STANDARDS/#less-is-more","text":"Once a feature is released, it never goes away. We should avoid adding features that don't offer high user value for price we pay both in maintenance, complexity, and payload size. When in doubt, leave it out. This applies especially to providing two different APIs to accomplish the same thing. Always prefer sticking to a single API for accomplishing something.","title":"Less is more"},{"location":"site-files/project/1-CODING_STANDARDS/#100-column-limit","text":"All code and docs in the repo should be 100 columns or fewer. This applies to TypeScript, SCSS, HTML, bash scripts, and markdown files.","title":"100 column limit"},{"location":"site-files/project/1-CODING_STANDARDS/#api-design","text":"","title":"API Design"},{"location":"site-files/project/1-CODING_STANDARDS/#boolean-arguments","text":"Avoid adding boolean arguments to a method in cases where that argument means \"do something extra\". In these cases, prefer breaking the behavior up into different functions. // AVOID function getTargetElement(createIfNotFound = false) { // ... } // PREFER function getExistingTargetElement() { // ... } function createTargetElement() { // ... }","title":"Boolean arguments"},{"location":"site-files/project/1-CODING_STANDARDS/#typescript","text":"","title":"TypeScript"},{"location":"site-files/project/1-CODING_STANDARDS/#typing","text":"Avoid any where possible. If you find yourself using any , consider whether a generic may be appropriate in your case. For methods and properties that are part of a component's public API, all types must be explicitly specified because our documentation tooling cannot currently infer types in places where TypeScript can.","title":"Typing"},{"location":"site-files/project/1-CODING_STANDARDS/#fluent-apis","text":"When creating a fluent or builder-pattern style API, use the this return type for methods: class ConfigBuilder { withName(name: string): this { this.config.name = name; return this; } }","title":"Fluent APIs"},{"location":"site-files/project/1-CODING_STANDARDS/#access-modifiers","text":"Omit the public keyword as it is the default behavior. Use private when appropriate and possible, prefixing the name with an underscore. Use protected when appropriate and possible with no prefix. Prefix library-internal properties and methods with an underscore without using the private keyword. This is necessary for anything that must be public (to be used by Angular), but should not be part of the user-facing API. This typically applies to symbols used in template expressions, @ViewChildren / @ContentChildren properties, host bindings, and @Input / @Output properties (when using an alias). Additionally, the @docs-private JsDoc annotation can be used to hide any symbol from the public API docs.","title":"Access modifiers"},{"location":"site-files/project/1-CODING_STANDARDS/#getters-and-setters","text":"Avoid long or complex getters and setters. If the logic of an accessor would take more than three lines, introduce a new method to contain the logic. A getter should immediately precede its corresponding setter. Decorators such as @Input should be applied to the getter and not the setter. Always use a readonly property instead of a getter (with no setter) when possible. ```ts /* YES / readonly active: boolean; /* NO / get active(): boolean { // Using a getter solely to make the property read-only. return this._active; } ```","title":"Getters and Setters"},{"location":"site-files/project/1-CODING_STANDARDS/#jsdoc-comments","text":"All public APIs must have user-facing comments. These are extracted and shown in the documentation on material.angular.io . Private and internal APIs should have JsDoc when they are not obvious. Ultimately it is the purview of the code reviewer as to what is \"obvious\", but the rule of thumb is that most classes, properties, and methods should have a JsDoc description. Properties should have a concise description of what the property means: /** The label position relative to the checkbox. Defaults to 'after' */ @Input() labelPosition: 'before' | 'after' = 'after'; Methods blocks should describe what the function does and provide a description for each parameter and the return value: /** * Opens a modal dialog containing the given component. * @param component Type of the component to load into the dialog. * @param config Dialog configuration options. * @returns Reference to the newly-opened dialog. */ open T (component: ComponentType T , config?: MatDialogConfig): MatDialogRef T { ... } Boolean properties and return values should use \"Whether...\" as opposed to \"True if...\": /** Whether the button is disabled. */ disabled: boolean = false;","title":"JsDoc comments"},{"location":"site-files/project/1-CODING_STANDARDS/#try-catch","text":"Avoid try-catch blocks, instead preferring to prevent an error from being thrown in the first place. When impossible to avoid, the try-catch block must include a comment that explains the specific error being caught and why it cannot be prevented.","title":"Try-Catch"},{"location":"site-files/project/1-CODING_STANDARDS/#naming","text":"","title":"Naming"},{"location":"site-files/project/1-CODING_STANDARDS/#general_1","text":"Prefer writing out words instead of using abbreviations. Prefer exact names over short names (within reason). E.g., labelPosition is better than align because the former much more exactly communicates what the property means. Except for @Input properties, use is and has prefixes for boolean properties / methods.","title":"General"},{"location":"site-files/project/1-CODING_STANDARDS/#classes","text":"Classes should be named based on what they're responsible for. Names should capture what the code does , not how it is used: /** NO: */ class RadioService { } /** YES: */ class UniqueSelectionDispatcher { } Avoid suffixing a class with \"Service\", as it communicates nothing about what the class does. Try to think of the class name as a person's job title. Classes that correspond to a directive with an mat- prefix should also be prefixed with Mat . CDK classes should only have a Cdk prefix when the class is a directive with a cdk selector prefix.","title":"Classes"},{"location":"site-files/project/1-CODING_STANDARDS/#methods","text":"The name of a method should capture the action that is performed by that method rather than describing when the method will be called. For example, /** AVOID: does not describe what the function does. */ handleClick() { // ... } /** PREFER: describes the action performed by the function. */ activateRipple() { // ... }","title":"Methods"},{"location":"site-files/project/1-CODING_STANDARDS/#inheritance","text":"Avoid using inheritance to apply reusable behaviors to multiple components. This limits how many behaviors can be composed. Instead, TypeScript mixins can be used to compose multiple common behaviors into a single component.","title":"Inheritance"},{"location":"site-files/project/1-CODING_STANDARDS/#angular","text":"","title":"Angular"},{"location":"site-files/project/1-CODING_STANDARDS/#host-bindings","text":"Prefer using the host object in the directive configuration instead of @HostBinding and @HostListener . We do this because TypeScript preserves the type information of methods with decorators, and when one of the arguments for the method is a native Event type, this preserved type information can lead to runtime errors in non-browser environments (e.g., server-side pre-rendering).","title":"Host bindings"},{"location":"site-files/project/1-CODING_STANDARDS/#css","text":"","title":"CSS"},{"location":"site-files/project/1-CODING_STANDARDS/#be-cautious-with-use-of-display-flex","text":"The baseline calculation for flex elements is different than other display values, making it difficult to align flex elements with standard elements like input and button. Component outermost elements are never flex (block or inline-block) Don't use display: flex on elements that will contain projected content.","title":"Be cautious with use of display: flex"},{"location":"site-files/project/1-CODING_STANDARDS/#use-lowest-specificity-possible","text":"Always prioritize lower specificity over other factors. Most style definitions should consist of a single element or css selector plus necessary state modifiers. Avoid SCSS nesting for the sake of code organization. This will allow users to much more easily override styles. For example, rather than doing this: .mat-calendar { display: block; .mat-month { display: inline-block; .mat-date.mat-selected { font-weight: bold; } } } do this: .mat-calendar { display: block; } .mat-calendar-month { display: inline-block; } .mat-calendar-date.mat-selected { font-weight: bold; }","title":"Use lowest specificity possible"},{"location":"site-files/project/1-CODING_STANDARDS/#never-set-a-margin-on-a-host-element","text":"The end-user of a component should be the one to decide how much margin a component has around it.","title":"Never set a margin on a host element."},{"location":"site-files/project/1-CODING_STANDARDS/#prefer-styling-the-host-element-vs-elements-inside-the-template-where-possible","text":"This makes it easier to override styles when necessary. For example, rather than the-host-element { // ... .some-child-element { color: red; } } you can write the-host-element { // ... color: red; } The latter is equivalent for the component, but makes it easier override when necessary.","title":"Prefer styling the host element vs. elements inside the template (where possible)."},{"location":"site-files/project/1-CODING_STANDARDS/#support-styles-for-windows-high-contrast-mode","text":"This is a low-effort task that makes a big difference for low-vision users. Example: @media screen and (-ms-high-contrast: active) { .unicorn-motocycle { border: 1px solid #fff !important; } }","title":"Support styles for Windows high-contrast mode"},{"location":"site-files/project/1-CODING_STANDARDS/#explain-what-css-classes-are-for","text":"When it is not super obvious, include a brief description of what a class represents. For example: // The calendar icon button used to open the calendar pane. .mat-datepicker-button { ... } // Floating pane that contains the calendar at the bottom of the input. .mat-datepicker-calendar-pane { ... } // Portion of the floating panel that sits, invisibly, on top of the input. .mat-datepicker-input-mask { }","title":"Explain what CSS classes are for"},{"location":"site-files/project/10-portal/","text":"The portals package provides a flexible system for rendering dynamic content into an application. Portals A Portal is a piece of UI that can be dynamically rendered to an open slot on the page. The \"piece of UI\" can be either a Component or a TemplateRef and the \"open slot\" is a PortalOutlet . Portals and PortalOutlets are low-level building blocks that other concepts, such as overlays, are built upon. Portal T Method Description attach(PortalOutlet): T Attaches the portal to a host. detach(): void Detaches the portal from its host. isAttached: boolean Whether the portal is attached. PortalOutlet Method Description attach(Portal): any Attaches a portal to the host. detach(): any Detaches the portal from the host. dispose(): void Permanently dispose the host. hasAttached: boolean Whether a portal is attached to the host. Portals in practice CdkPortal Used to get a portal from an ng-template . CdkPortal is a Portal . Usage: ng-template cdkPortal p The content of this template is captured by the portal. /p /ng-template !-- OR -- !-- This result here is identical to the syntax above -- p *cdkPortal The content of this template is captured by the portal. /p A component can use @ViewChild or @ViewChildren to get a reference to a CdkPortal . ComponentPortal Used to create a portal from a component type. When a component is dynamically created using portals, it must be included in the entryComponents of its NgModule . Usage: this.userSettingsPortal = new ComponentPortal(UserSettingsComponent); CdkPortalOutlet Used to add a portal outlet to a template. CdkPortalOutlet is a PortalOutlet . Usage: !-- Attaches the `userSettingsPortal` from the previous example. -- ng-template [cdkPortalOutlet]= userSettingsPortal /ng-template","title":"10-portal"},{"location":"site-files/project/10-portal/#portals","text":"A Portal is a piece of UI that can be dynamically rendered to an open slot on the page. The \"piece of UI\" can be either a Component or a TemplateRef and the \"open slot\" is a PortalOutlet . Portals and PortalOutlets are low-level building blocks that other concepts, such as overlays, are built upon.","title":"Portals"},{"location":"site-files/project/10-portal/#portallttgt","text":"Method Description attach(PortalOutlet): T Attaches the portal to a host. detach(): void Detaches the portal from its host. isAttached: boolean Whether the portal is attached.","title":"Portal&lt;T&gt;"},{"location":"site-files/project/10-portal/#portaloutlet","text":"Method Description attach(Portal): any Attaches a portal to the host. detach(): any Detaches the portal from the host. dispose(): void Permanently dispose the host. hasAttached: boolean Whether a portal is attached to the host.","title":"PortalOutlet"},{"location":"site-files/project/10-portal/#portals-in-practice","text":"","title":"Portals in practice"},{"location":"site-files/project/10-portal/#cdkportal","text":"Used to get a portal from an ng-template . CdkPortal is a Portal . Usage: ng-template cdkPortal p The content of this template is captured by the portal. /p /ng-template !-- OR -- !-- This result here is identical to the syntax above -- p *cdkPortal The content of this template is captured by the portal. /p A component can use @ViewChild or @ViewChildren to get a reference to a CdkPortal .","title":"CdkPortal"},{"location":"site-files/project/10-portal/#componentportal","text":"Used to create a portal from a component type. When a component is dynamically created using portals, it must be included in the entryComponents of its NgModule . Usage: this.userSettingsPortal = new ComponentPortal(UserSettingsComponent);","title":"ComponentPortal"},{"location":"site-files/project/10-portal/#cdkportaloutlet","text":"Used to add a portal outlet to a template. CdkPortalOutlet is a PortalOutlet . Usage: !-- Attaches the `userSettingsPortal` from the previous example. -- ng-template [cdkPortalOutlet]= userSettingsPortal /ng-template","title":"CdkPortalOutlet"},{"location":"site-files/project/11-breakpoints-observer/","text":"BreakpointsModule When including the CDK's LayoutModule , components can inject BreakpointsObserver to request the matching state of a CSS Media Query. A set of breakpoints is provided based on the Material Design breakpoint system . Example @Component({ ... }) export class MyWidget { isHandset: Observable BreakpointState ; constructor(bm: BreakpointObserver) { bm.observe(Handset).subscribe((state: BreakpointState) = { if (state.matches) { this.makeEverythingFitOnSmallScreen(); } else { this.expandEverythingToFillTheScreen(); } }); } }","title":"11-breakpoints-observer"},{"location":"site-files/project/11-breakpoints-observer/#breakpointsmodule","text":"When including the CDK's LayoutModule , components can inject BreakpointsObserver to request the matching state of a CSS Media Query. A set of breakpoints is provided based on the Material Design breakpoint system .","title":"BreakpointsModule"},{"location":"site-files/project/11-breakpoints-observer/#example","text":"@Component({ ... }) export class MyWidget { isHandset: Observable BreakpointState ; constructor(bm: BreakpointObserver) { bm.observe(Handset).subscribe((state: BreakpointState) = { if (state.matches) { this.makeEverythingFitOnSmallScreen(); } else { this.expandEverythingToFillTheScreen(); } }); } }","title":"Example"},{"location":"site-files/project/12-media-matcher/","text":"MediaMatcher When including the CDK's LayoutModule , components can inject MediaMatcher to access the matchMedia method, if available on the platform. Example @Component({ ... }) export class MyWidget { constructor(mm: MediaMatcher) { mm.matchMedia('(orientation: landscape)').matches ? this.setLandscapeMode() : this.setPortraitMode(); } }","title":"12-media-matcher"},{"location":"site-files/project/12-media-matcher/#mediamatcher","text":"When including the CDK's LayoutModule , components can inject MediaMatcher to access the matchMedia method, if available on the platform.","title":"MediaMatcher"},{"location":"site-files/project/12-media-matcher/#example","text":"@Component({ ... }) export class MyWidget { constructor(mm: MediaMatcher) { mm.matchMedia('(orientation: landscape)').matches ? this.setLandscapeMode() : this.setPortraitMode(); } }","title":"Example"},{"location":"site-files/project/13-layout/","text":"The layout package provides utilities to build responsive UIs that react to screen-size changes. BreakpointObserver BreakpointObserver is a utility for evaluating media queries and reacting to their changing. Evaluate against the current viewport The isMatched method is used to evaluate one or more media queries against the current viewport size. const isSmallScreen = breakpointObserver.isMatched('(max-width: 599px)'); React to changes to the viewport The observe method is used to get an observable stream that will emit whenever one of the given media queries would have a different result. const layoutChanges = breakpointObserver.observe([ '(orientation: portrait)', '(orientation: landscape)', ]); layoutChanges.subscribe(result = { updateMyLayoutForOrientationChange(); }); Default breakpoints A set of default media queries are available corresponding to breakpoints for different device types. import {BreakpointObserver, Breakpoints} from '@angular/cdk/layout'; @Component({...}) class MyComponent { constructor(breakpointObserver: BreakpointObserver) { breakpointObserver.observe([ Breakpoints.HandsetLandscape, Breakpoints.HandsetPortrait ]).subscribe(result = { if (result.matches) { this.activateHandsetLayout(); } }); } } The built-in breakpoints based on Google's Material Design specification . The available values are: Handset Tablet Web HandsetPortrait TabletPortrait WebPortrait HandsetLandscape TabletLandscape * WebLandscape MediaMatcher MediaMatcher is a lower-level utility that wraps the native matchMedia . This service normalizes browser differences and serves as a convenient API that can be replaced with a fake in unit tests. The matchMedia method can be used to get a native MediaQueryList . @Component({...}) class MyComponent { constructor(mediaMatcher: MediaMatcher) { const mediaQueryList = mediaMatcher.matchMedia('(min-width: 1px)'); } }","title":"13-layout"},{"location":"site-files/project/13-layout/#breakpointobserver","text":"BreakpointObserver is a utility for evaluating media queries and reacting to their changing.","title":"BreakpointObserver"},{"location":"site-files/project/13-layout/#evaluate-against-the-current-viewport","text":"The isMatched method is used to evaluate one or more media queries against the current viewport size. const isSmallScreen = breakpointObserver.isMatched('(max-width: 599px)');","title":"Evaluate against the current viewport"},{"location":"site-files/project/13-layout/#react-to-changes-to-the-viewport","text":"The observe method is used to get an observable stream that will emit whenever one of the given media queries would have a different result. const layoutChanges = breakpointObserver.observe([ '(orientation: portrait)', '(orientation: landscape)', ]); layoutChanges.subscribe(result = { updateMyLayoutForOrientationChange(); });","title":"React to changes to the viewport"},{"location":"site-files/project/13-layout/#default-breakpoints","text":"A set of default media queries are available corresponding to breakpoints for different device types. import {BreakpointObserver, Breakpoints} from '@angular/cdk/layout'; @Component({...}) class MyComponent { constructor(breakpointObserver: BreakpointObserver) { breakpointObserver.observe([ Breakpoints.HandsetLandscape, Breakpoints.HandsetPortrait ]).subscribe(result = { if (result.matches) { this.activateHandsetLayout(); } }); } } The built-in breakpoints based on Google's Material Design specification . The available values are: Handset Tablet Web HandsetPortrait TabletPortrait WebPortrait HandsetLandscape TabletLandscape * WebLandscape","title":"Default breakpoints"},{"location":"site-files/project/13-layout/#mediamatcher","text":"MediaMatcher is a lower-level utility that wraps the native matchMedia . This service normalizes browser differences and serves as a convenient API that can be replaced with a fake in unit tests. The matchMedia method can be used to get a native MediaQueryList . @Component({...}) class MyComponent { constructor(mediaMatcher: MediaMatcher) { const mediaQueryList = mediaMatcher.matchMedia('(min-width: 1px)'); } }","title":"MediaMatcher"},{"location":"site-files/project/14-platform/","text":"Platform A set of utilities that gather information about the current platform and the different features it supports.","title":"14-platform"},{"location":"site-files/project/14-platform/#platform","text":"A set of utilities that gather information about the current platform and the different features it supports.","title":"Platform"},{"location":"site-files/project/15-bidi/","text":"The bidi package provides a common system for components to get and respond to change in the application's LTR/RTL layout direction. Directionality When including the CDK's BidiModule , components can inject Directionality to get the current text direction (RTL or LTR); Example @Component({ ... }) export class MyWidget implements OnDestroy { /** Whether the widget is in RTL mode or not. */ private isRtl: boolean; /** Subscription to the Directionality change EventEmitter. */ private _dirChangeSubscription = Subscription.EMPTY; constructor(dir: Directionality) { this.isRtl = dir.value === 'rtl'; this._dirChangeSubscription = dir.change.subscribe(() = { this.flipDirection(); }); } ngOnDestroy() { this._dirChangeSubscription.unsubscribe(); } } The Dir directive The BidiModule also includes a directive that matches any elements with a dir attribute. This directive has the same API as Directionality and provides itself as Directionality . By doing this, any component that injects Directionality will get the closest ancestor layout direction context.","title":"15-bidi"},{"location":"site-files/project/15-bidi/#directionality","text":"When including the CDK's BidiModule , components can inject Directionality to get the current text direction (RTL or LTR);","title":"Directionality"},{"location":"site-files/project/15-bidi/#example","text":"@Component({ ... }) export class MyWidget implements OnDestroy { /** Whether the widget is in RTL mode or not. */ private isRtl: boolean; /** Subscription to the Directionality change EventEmitter. */ private _dirChangeSubscription = Subscription.EMPTY; constructor(dir: Directionality) { this.isRtl = dir.value === 'rtl'; this._dirChangeSubscription = dir.change.subscribe(() = { this.flipDirection(); }); } ngOnDestroy() { this._dirChangeSubscription.unsubscribe(); } }","title":"Example"},{"location":"site-files/project/15-bidi/#the-dir-directive","text":"The BidiModule also includes a directive that matches any elements with a dir attribute. This directive has the same API as Directionality and provides itself as Directionality . By doing this, any component that injects Directionality will get the closest ancestor layout direction context.","title":"The Dir directive"},{"location":"site-files/project/16-stepper/","text":"CDK stepper provides a foundation upon which more concrete stepper varities can be built. A stepper is a wizard-like workflow that divides content into logical steps Behavior captured by CdkStepper The base CDK version of the stepper primarily manages which step is active. This includes handling keyboard interactions and exposing an API for advancing or rewinding through the workflow. Linear stepper A stepper marked as linear requires the user to complete previous steps before proceeding. For each step, the stepControl attribute can be set to the top level AbstractControl that is used to check the validity of the step. There are two possible approaches. One is using a single form for stepper, and the other is using a different form for each step. Alternatively, if you don't want to use the Angular forms, you can pass in the completed property to each of the steps which won't allow the user to continue until it becomes true . Note that if both completed and stepControl are set, the stepControl will take precedence. Using a single form for the entire stepper When using a single form for the stepper, any intermediate next/previous buttons within the steps must be set to type=\"button\" in order to prevent submission of the form before all steps are complete. Using a form for each individual step When using a form for each step, the workflow is advanced whenever one of the forms is submitted. Types of steps Optional step If completion of a step in linear stepper is not required, then the optional attribute can be set on CdkStep in a linear stepper. Editable step By default, steps are editable, which means users can return to previously completed steps and edit their responses. editable=\"false\" can be set on CdkStep to change the default. Completed step By default, the completed attribute of a step returns true if the step is valid (in case of linear stepper) and the user has interacted with the step. The user, however, can also override this default completed behavior by setting the completed attribute as needed. Stepper buttons There are two button directives to support navigation between different steps: CdkStepperNext and CdkStepperPrevious . When placed inside of a step, these will automatically add click handlers to advance or rewind the workflow, respectively. Resetting a stepper If you want to reset a stepper to its initial state, you can use the reset method. Note that resetting it will call reset on the underlying form control which clears the value. Keyboard interaction LEFT_ARROW : Focuses the previous step header RIGHT_ARROW : Focuses the next step header ENTER , SPACE : Selects the step that the focus is currently on TAB : Focuses the next tabbable element SHIFT + TAB : Focuses the previous tabbable element Accessibility The CDK stepper is treated as a tabbed view for accessibility purposes, so it is given role=\"tablist\" by default. The header of step that can be clicked to select the step is given role=\"tab\" , and the content that can be expanded upon selection is given role=\"tabpanel\" . aria-selected attribute of step header and aria-expanded attribute of step content is automatically set based on step selection change. The stepper and each step should be given a meaningful label via aria-label or aria-labelledby .","title":"16-stepper"},{"location":"site-files/project/16-stepper/#behavior-captured-by-cdkstepper","text":"The base CDK version of the stepper primarily manages which step is active. This includes handling keyboard interactions and exposing an API for advancing or rewinding through the workflow.","title":"Behavior captured by CdkStepper"},{"location":"site-files/project/16-stepper/#linear-stepper","text":"A stepper marked as linear requires the user to complete previous steps before proceeding. For each step, the stepControl attribute can be set to the top level AbstractControl that is used to check the validity of the step. There are two possible approaches. One is using a single form for stepper, and the other is using a different form for each step. Alternatively, if you don't want to use the Angular forms, you can pass in the completed property to each of the steps which won't allow the user to continue until it becomes true . Note that if both completed and stepControl are set, the stepControl will take precedence.","title":"Linear stepper"},{"location":"site-files/project/16-stepper/#using-a-single-form-for-the-entire-stepper","text":"When using a single form for the stepper, any intermediate next/previous buttons within the steps must be set to type=\"button\" in order to prevent submission of the form before all steps are complete.","title":"Using a single form for the entire stepper"},{"location":"site-files/project/16-stepper/#using-a-form-for-each-individual-step","text":"When using a form for each step, the workflow is advanced whenever one of the forms is submitted.","title":"Using a form for each individual step"},{"location":"site-files/project/16-stepper/#types-of-steps","text":"","title":"Types of steps"},{"location":"site-files/project/16-stepper/#optional-step","text":"If completion of a step in linear stepper is not required, then the optional attribute can be set on CdkStep in a linear stepper.","title":"Optional step"},{"location":"site-files/project/16-stepper/#editable-step","text":"By default, steps are editable, which means users can return to previously completed steps and edit their responses. editable=\"false\" can be set on CdkStep to change the default.","title":"Editable step"},{"location":"site-files/project/16-stepper/#completed-step","text":"By default, the completed attribute of a step returns true if the step is valid (in case of linear stepper) and the user has interacted with the step. The user, however, can also override this default completed behavior by setting the completed attribute as needed.","title":"Completed step"},{"location":"site-files/project/16-stepper/#stepper-buttons","text":"There are two button directives to support navigation between different steps: CdkStepperNext and CdkStepperPrevious . When placed inside of a step, these will automatically add click handlers to advance or rewind the workflow, respectively.","title":"Stepper buttons"},{"location":"site-files/project/16-stepper/#resetting-a-stepper","text":"If you want to reset a stepper to its initial state, you can use the reset method. Note that resetting it will call reset on the underlying form control which clears the value.","title":"Resetting a stepper"},{"location":"site-files/project/16-stepper/#keyboard-interaction","text":"LEFT_ARROW : Focuses the previous step header RIGHT_ARROW : Focuses the next step header ENTER , SPACE : Selects the step that the focus is currently on TAB : Focuses the next tabbable element SHIFT + TAB : Focuses the previous tabbable element","title":"Keyboard interaction"},{"location":"site-files/project/16-stepper/#accessibility","text":"The CDK stepper is treated as a tabbed view for accessibility purposes, so it is given role=\"tablist\" by default. The header of step that can be clicked to select the step is given role=\"tab\" , and the content that can be expanded upon selection is given role=\"tabpanel\" . aria-selected attribute of step header and aria-expanded attribute of step content is automatically set based on step selection change. The stepper and each step should be given a meaningful label via aria-label or aria-labelledby .","title":"Accessibility"},{"location":"site-files/project/17-table/","text":"The CdkTable is an unopinionated, customizable data-table with a fully-templated API, dynamic columns, and an accessible DOM structure. This component acts as the core upon which anyone can build their own tailored data-table experience. The table provides a foundation upon which other features, such as sorting and pagination, can be built. Because it enforces no opinions on these matters, developers have full control over the interaction patterns associated with the table. For a Material Design styled table, see the documentation for MatTable which builds on top of the CDK data-table. Using the CDK data-table Writing your table template The first step to writing the data-table template is to define the columns. A column definition is specified via an ng-container with the cdkColumnDef directive, giving the column a name. Each column definition can contain a header-cell template ( cdkHeaderCellDef ), data-cell template ( cdkCellDef ), and footer-cell template ( cdkFooterCellDef ). ng-container cdkColumnDef= username th cdk-header-cell *cdkHeaderCellDef User name /th td cdk-cell *cdkCellDef= let row {{row.a}} /td td cdk-footer-cell *cdkFooterCellDef User name /td /ng-container The set of columns defined represent the columns that are available to be rendered. The specific columns rendered in a given row, and their order, are specified on the row (see below). Note that cdkCellDef exports the row context such that the row data can be referenced in the cell template. The directive also exports the same properties as ngFor (index, even, odd, first, last). The next step is to define the table's header-row ( cdkHeaderRowDef ), data-row ( cdkRowDef ), and footer-row ( cdkFooterRowDef ). Note that each of these are optional to include, depending on what type of rows you want rendered (e.g. if you do not need a footer row, simply do not add its definition). tr cdk-header-row *cdkHeaderRowDef= ['username', 'age', 'title'] /tr tr cdk-row *cdkRowDef= let row; columns: ['username', 'age', 'title'] /tr tr cdk-footer-row *cdkFooterRowDef= ['username', 'age', 'title'] /tr These row templates accept the specific columns to be rendered via the name given to the cdkColumnDef . The cdkRowDef also exports row context, which can be used for event and property bindings on the row element. Any content placed inside of the header row or data row template will be ignored, as the rendered content of the row comes from the cell templates described above. Example: table with three columns table cdk-table [dataSource]= dataSource !-- User name Definition -- ng-container cdkColumnDef= username th cdk-header-cell *cdkHeaderCellDef User name /th td cdk-cell *cdkCellDef= let row {{row.username}} /td /ng-container !-- Age Definition -- ng-container cdkColumnDef= age th cdk-header-cell *cdkHeaderCellDef Age /th td cdk-cell *cdkCellDef= let row {{row.age}} /td /ng-container !-- Title Definition -- ng-container cdkColumnDef= title th cdk-header-cell *cdkHeaderCellDef Title /th td cdk-cell *cdkCellDef= let row {{row.title}} /td /ng-container !-- Header and Row Declarations -- tr cdk-header-row *cdkHeaderRowDef= ['username', 'age', 'title'] /tr tr cdk-row *cdkRowDef= let row; columns: ['username', 'age', 'title'] /tr /table The columns given on the row determine which cells are rendered and in which order. Thus, the columns can be set via binding to support dynamically changing the columns shown at run-time. tr cdk-row *cdkRowDef= let row; columns: myDisplayedColumns /tr It is not required to display all the columns that are defined within the template, nor use the same ordering. For example, to display the table with only age and username and in that order, then the row and header definitions would be written as: tr cdk-row *cdkRowDef= let row; columns: ['age', 'username'] /tr Event and property bindings can be added directly to the row element. Example: table with event and class binding tr cdk-header-row *cdkHeaderRowDef= ['age', 'username'] (click)= handleHeaderRowClick(row) /tr tr cdk-row *cdkRowDef= let row; columns: ['age', 'username'] [class.can-vote]= row.age = 18 (click)= handleRowClick(row) /tr Styling columns Each header and row cell will be provided a CSS class that includes its column. For example, cells that are displayed in the column name will be given the class cdk-column-name . This allows columns to be given styles that will match across the header and rows. Since columns can be given any string for its name, its possible that it cannot be directly applied to the CSS class (e.g. *nameColumn! ). In these cases, the special characters will be replaced by the - character. For example, cells container in a column named *nameColumn! will be given the class cdk-column--nameColumn- . Connecting the table to a data source Data is provided to the table through a DataSource . When the table receives a data source, it calls the DataSource's connect() method which returns an observable that emits an array of data. Whenever the data source emits data to this stream, the table will render an update. Because the data source provides this stream, it bears the responsibility of triggering table updates. This can be based on anything : websocket connections, user interaction, model updates, time-based intervals, etc. Most commonly, updates will be triggered by user interactions like sorting and pagination. trackBy To improve performance, a trackBy function can be provided to the table similar to Angular\u2019s ngFor trackBy . This informs the table how to uniquely identify rows to track how the data changes with each update. table cdk-table [dataSource]= dataSource [trackBy]= myTrackById Alternate HTML to using native table The CDK table does not require that you use a native HTML table. If you want to have full control over the style of the table, it may be easier to follow an alternative template approach that does not use the native table element tags. This alternative approach replaces the native table element tags with the CDK table directive selectors. For example, table cdk-table becomes cdk-table ; tr cdk-row becomes cdk-row . The following shows a previous example using this alternative template: cdk-table [dataSource]= dataSource !-- User name Definition -- ng-container cdkColumnDef= username cdk-header-cell *cdkHeaderCellDef User name /cdk-header-cell cdk-cell *cdkCellDef= let row {{row.username}} /cdk-cell /ng-container !-- Age Definition -- ng-container cdkColumnDef= age cdk-header-cell *cdkHeaderCellDef Age /cdk-header-cell cdk-cell *cdkCellDef= let row {{row.age}} /cdk-cell /ng-container !-- Title Definition -- ng-container cdkColumnDef= title cdk-header-cell *cdkHeaderCellDef Title /cdk-header-cell cdk-cell *cdkCellDef= let row {{row.title}} /cdk-cell /ng-container !-- Header and Row Declarations -- cdk-header-row *cdkHeaderRowDef= ['username', 'age', 'title'] /cdk-header-row cdk-row *cdkRowDef= let row; columns: ['username', 'age', 'title'] /cdk-row /cdk-table For an example of how to render the structure as a table, see the documentation for mat-table which includes the style support for this approach.","title":"17-table"},{"location":"site-files/project/17-table/#using-the-cdk-data-table","text":"","title":"Using the CDK data-table"},{"location":"site-files/project/17-table/#writing-your-table-template","text":"The first step to writing the data-table template is to define the columns. A column definition is specified via an ng-container with the cdkColumnDef directive, giving the column a name. Each column definition can contain a header-cell template ( cdkHeaderCellDef ), data-cell template ( cdkCellDef ), and footer-cell template ( cdkFooterCellDef ). ng-container cdkColumnDef= username th cdk-header-cell *cdkHeaderCellDef User name /th td cdk-cell *cdkCellDef= let row {{row.a}} /td td cdk-footer-cell *cdkFooterCellDef User name /td /ng-container The set of columns defined represent the columns that are available to be rendered. The specific columns rendered in a given row, and their order, are specified on the row (see below). Note that cdkCellDef exports the row context such that the row data can be referenced in the cell template. The directive also exports the same properties as ngFor (index, even, odd, first, last). The next step is to define the table's header-row ( cdkHeaderRowDef ), data-row ( cdkRowDef ), and footer-row ( cdkFooterRowDef ). Note that each of these are optional to include, depending on what type of rows you want rendered (e.g. if you do not need a footer row, simply do not add its definition). tr cdk-header-row *cdkHeaderRowDef= ['username', 'age', 'title'] /tr tr cdk-row *cdkRowDef= let row; columns: ['username', 'age', 'title'] /tr tr cdk-footer-row *cdkFooterRowDef= ['username', 'age', 'title'] /tr These row templates accept the specific columns to be rendered via the name given to the cdkColumnDef . The cdkRowDef also exports row context, which can be used for event and property bindings on the row element. Any content placed inside of the header row or data row template will be ignored, as the rendered content of the row comes from the cell templates described above.","title":"Writing your table template"},{"location":"site-files/project/17-table/#example-table-with-three-columns","text":"table cdk-table [dataSource]= dataSource !-- User name Definition -- ng-container cdkColumnDef= username th cdk-header-cell *cdkHeaderCellDef User name /th td cdk-cell *cdkCellDef= let row {{row.username}} /td /ng-container !-- Age Definition -- ng-container cdkColumnDef= age th cdk-header-cell *cdkHeaderCellDef Age /th td cdk-cell *cdkCellDef= let row {{row.age}} /td /ng-container !-- Title Definition -- ng-container cdkColumnDef= title th cdk-header-cell *cdkHeaderCellDef Title /th td cdk-cell *cdkCellDef= let row {{row.title}} /td /ng-container !-- Header and Row Declarations -- tr cdk-header-row *cdkHeaderRowDef= ['username', 'age', 'title'] /tr tr cdk-row *cdkRowDef= let row; columns: ['username', 'age', 'title'] /tr /table The columns given on the row determine which cells are rendered and in which order. Thus, the columns can be set via binding to support dynamically changing the columns shown at run-time. tr cdk-row *cdkRowDef= let row; columns: myDisplayedColumns /tr It is not required to display all the columns that are defined within the template, nor use the same ordering. For example, to display the table with only age and username and in that order, then the row and header definitions would be written as: tr cdk-row *cdkRowDef= let row; columns: ['age', 'username'] /tr Event and property bindings can be added directly to the row element.","title":"Example: table with three columns"},{"location":"site-files/project/17-table/#example-table-with-event-and-class-binding","text":"tr cdk-header-row *cdkHeaderRowDef= ['age', 'username'] (click)= handleHeaderRowClick(row) /tr tr cdk-row *cdkRowDef= let row; columns: ['age', 'username'] [class.can-vote]= row.age = 18 (click)= handleRowClick(row) /tr","title":"Example: table with event and class binding"},{"location":"site-files/project/17-table/#styling-columns","text":"Each header and row cell will be provided a CSS class that includes its column. For example, cells that are displayed in the column name will be given the class cdk-column-name . This allows columns to be given styles that will match across the header and rows. Since columns can be given any string for its name, its possible that it cannot be directly applied to the CSS class (e.g. *nameColumn! ). In these cases, the special characters will be replaced by the - character. For example, cells container in a column named *nameColumn! will be given the class cdk-column--nameColumn- .","title":"Styling columns"},{"location":"site-files/project/17-table/#connecting-the-table-to-a-data-source","text":"Data is provided to the table through a DataSource . When the table receives a data source, it calls the DataSource's connect() method which returns an observable that emits an array of data. Whenever the data source emits data to this stream, the table will render an update. Because the data source provides this stream, it bears the responsibility of triggering table updates. This can be based on anything : websocket connections, user interaction, model updates, time-based intervals, etc. Most commonly, updates will be triggered by user interactions like sorting and pagination.","title":"Connecting the table to a data source"},{"location":"site-files/project/17-table/#trackby","text":"To improve performance, a trackBy function can be provided to the table similar to Angular\u2019s ngFor trackBy . This informs the table how to uniquely identify rows to track how the data changes with each update. table cdk-table [dataSource]= dataSource [trackBy]= myTrackById","title":"trackBy"},{"location":"site-files/project/17-table/#alternate-html-to-using-native-table","text":"The CDK table does not require that you use a native HTML table. If you want to have full control over the style of the table, it may be easier to follow an alternative template approach that does not use the native table element tags. This alternative approach replaces the native table element tags with the CDK table directive selectors. For example, table cdk-table becomes cdk-table ; tr cdk-row becomes cdk-row . The following shows a previous example using this alternative template: cdk-table [dataSource]= dataSource !-- User name Definition -- ng-container cdkColumnDef= username cdk-header-cell *cdkHeaderCellDef User name /cdk-header-cell cdk-cell *cdkCellDef= let row {{row.username}} /cdk-cell /ng-container !-- Age Definition -- ng-container cdkColumnDef= age cdk-header-cell *cdkHeaderCellDef Age /cdk-header-cell cdk-cell *cdkCellDef= let row {{row.age}} /cdk-cell /ng-container !-- Title Definition -- ng-container cdkColumnDef= title cdk-header-cell *cdkHeaderCellDef Title /cdk-header-cell cdk-cell *cdkCellDef= let row {{row.title}} /cdk-cell /ng-container !-- Header and Row Declarations -- cdk-header-row *cdkHeaderRowDef= ['username', 'age', 'title'] /cdk-header-row cdk-row *cdkRowDef= let row; columns: ['username', 'age', 'title'] /cdk-row /cdk-table For an example of how to render the structure as a table, see the documentation for mat-table which includes the style support for this approach.","title":"Alternate HTML to using native table"},{"location":"site-files/project/18-render-rows/","text":"Rendering Data Rows The table's primary responsibility is to render rows of cells. The types of rows that may be rendered are header, footer, and data rows. This document focuses on how the table tries to efficienctly render the data rows. Background Each table's template is defined as a set of row and column templates. The row template defines the template that should be rendered for a header, footer, or data row. The column templates include the cell templates that will be inserted into each rendered row. Each data object may be rendered with one or more row templates. When new data in provided to the table, the table determines which rows need to be rendered. In order to be efficient, the table attempts to understand how the new list of rendered rows differs from the previous list of rendered rows so that it can re-use the current list of rendered rows if possible. Rendering Each time data is provided, the table needs to create the list of rows that will be rendered and keep track of which data object will be provided as context for each row. For each item in the list, this pair is combined into an object that uses the RenderRow interface. The interface also helps keep track of the data object's index in the provided data array input. export interface RenderRow T { data: T; dataIndex: number; rowDef: CdkRowDef T ; } When possible, RenderRow objects are re-used from the previous rendering. That is, if a particular data object and row template pairing was previously rendered, it should be used for the new list as well. This makes sure that the differ can use check-by-reference logic to find the changes between two lists. Note that if a RenderRow object is reused, it should be updated with the correct data index, in case it has moved since last used. Once the list of RenderRow objects has been created, it should be compared to the previous list of RenderRow objects to find the difference in terms of inserts/deletions/moves. This is trivially done using the IterableDiffer logic provided by Angular Core. Finally, the table uses the list of operations and manipulates the rows through add/remove/move operations. Caching RenderRow objects Each RenderRow should be cached such that it is a constant-time lookup and retrieval based on the data object and row template pairing. In order to achieve this, the cache is built as a map of maps where the key of the outer map is the data object and the key of the inner map is the row template. The value of the inner map should be an array of the matching cached RenderRow objects that were previously rendered.","title":"18-render-rows"},{"location":"site-files/project/18-render-rows/#rendering-data-rows","text":"The table's primary responsibility is to render rows of cells. The types of rows that may be rendered are header, footer, and data rows. This document focuses on how the table tries to efficienctly render the data rows.","title":"Rendering Data Rows"},{"location":"site-files/project/18-render-rows/#background","text":"Each table's template is defined as a set of row and column templates. The row template defines the template that should be rendered for a header, footer, or data row. The column templates include the cell templates that will be inserted into each rendered row. Each data object may be rendered with one or more row templates. When new data in provided to the table, the table determines which rows need to be rendered. In order to be efficient, the table attempts to understand how the new list of rendered rows differs from the previous list of rendered rows so that it can re-use the current list of rendered rows if possible.","title":"Background"},{"location":"site-files/project/18-render-rows/#rendering","text":"Each time data is provided, the table needs to create the list of rows that will be rendered and keep track of which data object will be provided as context for each row. For each item in the list, this pair is combined into an object that uses the RenderRow interface. The interface also helps keep track of the data object's index in the provided data array input. export interface RenderRow T { data: T; dataIndex: number; rowDef: CdkRowDef T ; } When possible, RenderRow objects are re-used from the previous rendering. That is, if a particular data object and row template pairing was previously rendered, it should be used for the new list as well. This makes sure that the differ can use check-by-reference logic to find the changes between two lists. Note that if a RenderRow object is reused, it should be updated with the correct data index, in case it has moved since last used. Once the list of RenderRow objects has been created, it should be compared to the previous list of RenderRow objects to find the difference in terms of inserts/deletions/moves. This is trivially done using the IterableDiffer logic provided by Angular Core. Finally, the table uses the list of operations and manipulates the rows through add/remove/move operations.","title":"Rendering"},{"location":"site-files/project/18-render-rows/#caching-renderrow-objects","text":"Each RenderRow should be cached such that it is a constant-time lookup and retrieval based on the data object and row template pairing. In order to achieve this, the cache is built as a map of maps where the key of the outer map is the data object and the key of the inner map is the row template. The value of the inner map should be an array of the matching cached RenderRow objects that were previously rendered.","title":"Caching RenderRow objects"},{"location":"site-files/project/19-scrolling/","text":"The scrolling package provides helpers for directives that react to scroll events. cdkScrollable and ScrollDispatcher The cdkScrollable directive and the ScrollDispatcher service together allow components to react to scrolling in any of its ancestor scrolling containers. The cdkScrollable directive should be applied to any element that acts as a scrolling container. This marks the element as a Scrollable and registers it with the ScrollDispatcher . The dispatcher, then, allows components to share both event listeners and knowledge of all of the scrollable containers in the application. ViewportRuler The ViewportRuler is a service that can be injected and used to measure the bounds of the browser viewport. Virtual scrolling The cdk-virtual-scroll-viewport displays large lists of elements performantly by only rendering the items that fit on-screen. Loading hundreds of elements can be slow in any browser; virtual scrolling enables a performant way to simulate all items being rendered by making the height of the container element the same as the height of total number of elements to be rendered, and then only rendering the items in view. Virtual scrolling is different from strategies like infinite scroll where it renders a set amount of elements and then when you hit the end renders the rest. Creating items in the viewport *cdkVirtualFor replaces *ngFor inside of a cdk-virtual-scroll-viewport , supporting the exact same API as *ngFor . The simplest usage just specifies the list of items (note that the itemSize property on the viewport must be set): *cdkVirtualFor makes the following context variables available to the template: Context variable Description index The index of the item in the data source. count The total number of items in the data source. first Whether this is the first item in the data source. last Whether this is the last item in the data source. even Whether the index is even. odd Whether the index is odd. All of these apply to the index of the item in the data source, not the index in the rendered portion of the data. A trackBy function can be specified and works the same as the *ngFor trackBy . The index passed to the tracking function will be the index in the data source, not the index in the rendered portion. View recycling To improve rendering performance, *cdkVirtualFor caches previously created views after they are no longer needed. When a new view would normally be created, a cached view is reused instead. The size of the view cache can be adjusted via the templateCacheSize property; setting this size to 0 disables caching. If your templates are expensive in terms of memory you may wish to reduce this number to avoid spending too much memory on the template cache. Specifying data *cdkVirtualFor accepts data from an Array , Observable Array , or DataSource . The DataSource for the virtual scroll is the same one used by the table and tree components. A DataSource is simply an abstract class that has two methods: connect and disconnect . The connect method will be called by the virtual scroll viewport to receive a stream that emits the data array that should be rendered. The viewport will call disconnect when the viewport is destroyed, which may be the right time to clean up any subscriptions that were registered during the connect process. Scrolling over fixed size items When all items are the same fixed size, you can use the FixedSizeVirtualScrollStrategy . This can be easily added to your viewport using the itemSize directive. The advantage of this constraint is that it allows for better performance, since items do not need to be measured as they are rendered. The fixed size strategy also supports setting a couple of buffer parameters that determine how much extra content is rendered beyond what is visible in the viewport. The first of these parameters is minBufferPx . The minBufferPx is the minimum amount of content buffer (in pixels) that the viewport must render. If the viewport ever detects that there is less buffered content it will immediately render more. The second buffer parameter is maxBufferPx . This tells the viewport how much buffer space to render back up to when it detects that more buffer is required. The interaction of these two buffer parameters can be best illustrated with an example. Supposed that we have the following parameters: itemSize = 50 , minBufferPx = 100 , maxBufferPx = 250 . As the user is scrolling through the content the viewport detects that there is only 90px of buffer remaining. Since this is below minBufferPx the viewport must render more buffer. It must render at least enough buffer to get back to maxBufferPx . In this case, it renders 4 items (an additional 200px ) to bring the total buffer size to 290px , back above maxBufferPx . Other virtual scrolling strategies can be implemented by extending VirtualScrollStrategy . An autosize strategy that works on elements of differing sizes is currently being developed in @angular/cdk-experimental , but it is not ready for production use yet. Viewport orientation The virtual-scroll viewport defaults to a vertical orientation, but can also be set to orientation=\"horizontal\" . When changing the orientation, ensure that the item are laid out horizontally via CSS. To do this you may want to target CSS at .cdk-virtual-scroll-content-wrapper which is the wrapper element that contains the rendered content. Elements with parent tag requirements Some HTML elements such as tr and li have limitations on the kinds of parent elements they can be placed inside. To enable virtual scrolling over these type of elements, place the elements in their proper parent, and then wrap the whole thing in a cdk-virtual-scroll-viewport . Be careful that the parent does not introduce additional space (e.g. via margin or padding ) as it will interfere with the scrolling. Scrolling strategies In order to determine how large the overall content is and what portion of it actually needs to be rendered at any given time the viewport relies on a VirtualScrollStrategy being provided. The simplest way to provide it is to use the itemSize directive on the viewport (e.g. cdk-virtual-scroll-viewport itemSize=\"50\" ). However it is also possible to provide a custom strategy by creating a class that implements the VirtualScrollStrategy interface and providing it as the VIRTUAL_SCROLL_STRATEGY on the component containing your viewport.","title":"19-scrolling"},{"location":"site-files/project/19-scrolling/#cdkscrollable-and-scrolldispatcher","text":"The cdkScrollable directive and the ScrollDispatcher service together allow components to react to scrolling in any of its ancestor scrolling containers. The cdkScrollable directive should be applied to any element that acts as a scrolling container. This marks the element as a Scrollable and registers it with the ScrollDispatcher . The dispatcher, then, allows components to share both event listeners and knowledge of all of the scrollable containers in the application.","title":"cdkScrollable and ScrollDispatcher"},{"location":"site-files/project/19-scrolling/#viewportruler","text":"The ViewportRuler is a service that can be injected and used to measure the bounds of the browser viewport.","title":"ViewportRuler"},{"location":"site-files/project/19-scrolling/#virtual-scrolling","text":"The cdk-virtual-scroll-viewport displays large lists of elements performantly by only rendering the items that fit on-screen. Loading hundreds of elements can be slow in any browser; virtual scrolling enables a performant way to simulate all items being rendered by making the height of the container element the same as the height of total number of elements to be rendered, and then only rendering the items in view. Virtual scrolling is different from strategies like infinite scroll where it renders a set amount of elements and then when you hit the end renders the rest.","title":"Virtual scrolling"},{"location":"site-files/project/19-scrolling/#creating-items-in-the-viewport","text":"*cdkVirtualFor replaces *ngFor inside of a cdk-virtual-scroll-viewport , supporting the exact same API as *ngFor . The simplest usage just specifies the list of items (note that the itemSize property on the viewport must be set): *cdkVirtualFor makes the following context variables available to the template: Context variable Description index The index of the item in the data source. count The total number of items in the data source. first Whether this is the first item in the data source. last Whether this is the last item in the data source. even Whether the index is even. odd Whether the index is odd. All of these apply to the index of the item in the data source, not the index in the rendered portion of the data. A trackBy function can be specified and works the same as the *ngFor trackBy . The index passed to the tracking function will be the index in the data source, not the index in the rendered portion.","title":"Creating items in the viewport"},{"location":"site-files/project/19-scrolling/#view-recycling","text":"To improve rendering performance, *cdkVirtualFor caches previously created views after they are no longer needed. When a new view would normally be created, a cached view is reused instead. The size of the view cache can be adjusted via the templateCacheSize property; setting this size to 0 disables caching. If your templates are expensive in terms of memory you may wish to reduce this number to avoid spending too much memory on the template cache.","title":"View recycling"},{"location":"site-files/project/19-scrolling/#specifying-data","text":"*cdkVirtualFor accepts data from an Array , Observable Array , or DataSource . The DataSource for the virtual scroll is the same one used by the table and tree components. A DataSource is simply an abstract class that has two methods: connect and disconnect . The connect method will be called by the virtual scroll viewport to receive a stream that emits the data array that should be rendered. The viewport will call disconnect when the viewport is destroyed, which may be the right time to clean up any subscriptions that were registered during the connect process.","title":"Specifying data"},{"location":"site-files/project/19-scrolling/#scrolling-over-fixed-size-items","text":"When all items are the same fixed size, you can use the FixedSizeVirtualScrollStrategy . This can be easily added to your viewport using the itemSize directive. The advantage of this constraint is that it allows for better performance, since items do not need to be measured as they are rendered. The fixed size strategy also supports setting a couple of buffer parameters that determine how much extra content is rendered beyond what is visible in the viewport. The first of these parameters is minBufferPx . The minBufferPx is the minimum amount of content buffer (in pixels) that the viewport must render. If the viewport ever detects that there is less buffered content it will immediately render more. The second buffer parameter is maxBufferPx . This tells the viewport how much buffer space to render back up to when it detects that more buffer is required. The interaction of these two buffer parameters can be best illustrated with an example. Supposed that we have the following parameters: itemSize = 50 , minBufferPx = 100 , maxBufferPx = 250 . As the user is scrolling through the content the viewport detects that there is only 90px of buffer remaining. Since this is below minBufferPx the viewport must render more buffer. It must render at least enough buffer to get back to maxBufferPx . In this case, it renders 4 items (an additional 200px ) to bring the total buffer size to 290px , back above maxBufferPx . Other virtual scrolling strategies can be implemented by extending VirtualScrollStrategy . An autosize strategy that works on elements of differing sizes is currently being developed in @angular/cdk-experimental , but it is not ready for production use yet.","title":"Scrolling over fixed size items"},{"location":"site-files/project/19-scrolling/#viewport-orientation","text":"The virtual-scroll viewport defaults to a vertical orientation, but can also be set to orientation=\"horizontal\" . When changing the orientation, ensure that the item are laid out horizontally via CSS. To do this you may want to target CSS at .cdk-virtual-scroll-content-wrapper which is the wrapper element that contains the rendered content.","title":"Viewport orientation"},{"location":"site-files/project/19-scrolling/#elements-with-parent-tag-requirements","text":"Some HTML elements such as tr and li have limitations on the kinds of parent elements they can be placed inside. To enable virtual scrolling over these type of elements, place the elements in their proper parent, and then wrap the whole thing in a cdk-virtual-scroll-viewport . Be careful that the parent does not introduce additional space (e.g. via margin or padding ) as it will interfere with the scrolling.","title":"Elements with parent tag requirements"},{"location":"site-files/project/19-scrolling/#scrolling-strategies","text":"In order to determine how large the overall content is and what portion of it actually needs to be rendered at any given time the viewport relies on a VirtualScrollStrategy being provided. The simplest way to provide it is to use the itemSize directive on the viewport (e.g. cdk-virtual-scroll-viewport itemSize=\"50\" ). However it is also possible to provide a custom strategy by creating a class that implements the VirtualScrollStrategy interface and providing it as the VIRTUAL_SCROLL_STRATEGY on the component containing your viewport.","title":"Scrolling strategies"},{"location":"site-files/project/2-README/","text":"Material Design for Angular This is the home for the Angular team's Material Design components built for and with Angular. Quick links Documentation, demos, and guides | Google group | Contributing | Plunker Template | StackBlitz Template Getting started See our Getting Started Guide if you're building your first project with Angular Material. Check out our directory of design documents for more insight into our process. If you'd like to contribute, you must follow our contributing guidelines . You can look through the issues (which should be up-to-date on who is working on which features and which pieces are blocked) and make a comment. Also see our help wanted label. High level stuff planned for Q1 \u2192 Q2 2019 (January - June): Most of the Angular Material team is on loan to the framework team helping with Ivy . We've been using the Angular CDK and Angular Material tests to validate code paths as well as helping debug issues in switching Google applications to the new rendering pipeline. We're also working with the Material Design team on a strategy to collaborate more deeply. We'll have more to share on this once our plans are further along. Assorted bugfixes and minor feature improvements. Design for API enhancements to the tree component to improve ergonomics. Available features Feature Notes Docs autocomplete Docs badge Docs bottom-sheet Docs button Docs button-toggle Docs cards Docs checkbox Docs chips Docs data-table Docs datepicker Docs dialog Docs divider Docs drag-drop Docs expansion-panel Docs grid-list Docs icon Docs input Docs list Docs menu Docs paginator Docs progress-bar Docs progress-spinner Docs radio Docs ripples Docs select Docs sidenav Docs slide-toggle Docs slider Docs snackbar / toast Docs sort-header Docs stepper Docs tabs Docs textarea Docs toolbar Docs tooltip Docs tree Docs virtual-scroll Docs ---------------- ------------------------------------------------------ ------------ theming Guide typography Guide layout See angular/flex-layout Wiki cdk Docs In progress, planned, and non-planned features Feature Status Docs Issue fab speed-dial Not started, not planned - #860 fab toolbar Not started, not planned - - bottom-nav Not started, not planned - #408 The goal of Angular Material Our goal is to build a set of high-quality UI components built with Angular and TypeScript, following the Material Design spec. These components will serve as an example of how to write Angular code following best practices. What do we mean by \"high-quality\"? Internationalized and accessible so that all users can use them. Straightforward APIs that don't confuse developers. Behave as expected across a wide variety of use-cases without bugs. Behavior is well-tested with both unit and integration tests. Customizable within the bounds of the Material Design specification. Performance cost is minimized. Code is clean and well-documented to serve as an example for Angular devs. Browser and screen reader support Angular Material supports the most recent two versions of all major browsers: Chrome (including Android), Firefox, Safari (including iOS), and IE11 / Edge We also aim for great user experience with the following screen readers: NVDA and JAWS with IE / FF / Chrome (on Windows). VoiceOver with Safari on iOS and Safari / Chrome on OSX. * TalkBack with Chrome on Android.","title":"2-README"},{"location":"site-files/project/2-README/#material-design-for-angular","text":"This is the home for the Angular team's Material Design components built for and with Angular.","title":"Material Design for Angular"},{"location":"site-files/project/2-README/#quick-links","text":"Documentation, demos, and guides | Google group | Contributing | Plunker Template | StackBlitz Template","title":"Quick links"},{"location":"site-files/project/2-README/#getting-started","text":"See our Getting Started Guide if you're building your first project with Angular Material. Check out our directory of design documents for more insight into our process. If you'd like to contribute, you must follow our contributing guidelines . You can look through the issues (which should be up-to-date on who is working on which features and which pieces are blocked) and make a comment. Also see our help wanted label.","title":"Getting started"},{"location":"site-files/project/2-README/#high-level-stuff-planned-for-q1-q2-2019-january-june","text":"Most of the Angular Material team is on loan to the framework team helping with Ivy . We've been using the Angular CDK and Angular Material tests to validate code paths as well as helping debug issues in switching Google applications to the new rendering pipeline. We're also working with the Material Design team on a strategy to collaborate more deeply. We'll have more to share on this once our plans are further along. Assorted bugfixes and minor feature improvements. Design for API enhancements to the tree component to improve ergonomics.","title":"High level stuff planned for Q1 \u2192 Q2 2019 (January - June):"},{"location":"site-files/project/2-README/#available-features","text":"Feature Notes Docs autocomplete Docs badge Docs bottom-sheet Docs button Docs button-toggle Docs cards Docs checkbox Docs chips Docs data-table Docs datepicker Docs dialog Docs divider Docs drag-drop Docs expansion-panel Docs grid-list Docs icon Docs input Docs list Docs menu Docs paginator Docs progress-bar Docs progress-spinner Docs radio Docs ripples Docs select Docs sidenav Docs slide-toggle Docs slider Docs snackbar / toast Docs sort-header Docs stepper Docs tabs Docs textarea Docs toolbar Docs tooltip Docs tree Docs virtual-scroll Docs ---------------- ------------------------------------------------------ ------------ theming Guide typography Guide layout See angular/flex-layout Wiki cdk Docs","title":"Available features"},{"location":"site-files/project/2-README/#in-progress-planned-and-non-planned-features","text":"Feature Status Docs Issue fab speed-dial Not started, not planned - #860 fab toolbar Not started, not planned - - bottom-nav Not started, not planned - #408","title":"In progress, planned, and non-planned features"},{"location":"site-files/project/2-README/#the-goal-of-angular-material","text":"Our goal is to build a set of high-quality UI components built with Angular and TypeScript, following the Material Design spec. These components will serve as an example of how to write Angular code following best practices.","title":"The goal of Angular Material"},{"location":"site-files/project/2-README/#what-do-we-mean-by-high-quality","text":"Internationalized and accessible so that all users can use them. Straightforward APIs that don't confuse developers. Behave as expected across a wide variety of use-cases without bugs. Behavior is well-tested with both unit and integration tests. Customizable within the bounds of the Material Design specification. Performance cost is minimized. Code is clean and well-documented to serve as an example for Angular devs.","title":"What do we mean by \"high-quality\"?"},{"location":"site-files/project/2-README/#browser-and-screen-reader-support","text":"Angular Material supports the most recent two versions of all major browsers: Chrome (including Android), Firefox, Safari (including iOS), and IE11 / Edge We also aim for great user experience with the following screen readers: NVDA and JAWS with IE / FF / Chrome (on Windows). VoiceOver with Safari on iOS and Safari / Chrome on OSX. * TalkBack with Chrome on Android.","title":"Browser and screen reader support"},{"location":"site-files/project/20-a11y/","text":"The a11y package provides a number of tools to improve accessibility, described below. ListKeyManager ListKeyManager manages the active option in a list of items based on keyboard interaction. Intended to be used with components that correspond to a role=\"menu\" or role=\"listbox\" pattern. Basic usage Any component that uses a ListKeyManager will generally do three things: Create a @ViewChildren query for the options being managed. Initialize the ListKeyManager , passing in the options. * Forward keyboard events from the managed component to the ListKeyManager . Each option should implement the ListKeyManagerOption interface: interface ListKeyManagerOption { disabled?: boolean; getLabel?(): string; } Wrapping Navigation through options can be made to wrap via the withWrap method this.keyManager = new FocusKeyManager(...).withWrap(); Types of key managers There are two varieties of ListKeyManager , FocusKeyManager and ActiveDescendantKeyManager . FocusKeyManager Used when options will directly receive browser focus. Each item managed must implement the FocusableOption interface: interface FocusableOption extends ListKeyManagerOption { focus(): void; } ActiveDescendantKeyManager Used when options will be marked as active via aria-activedescendant . Each item managed must implement the Highlightable interface: interface Highlightable extends ListKeyManagerOption { setActiveStyles(): void; setInactiveStyles(): void; } Each item must also have an ID bound to the listbox's or menu's aria-activedescendant . FocusTrap The cdkTrapFocus directive traps Tab key focus within an element. This is intended to be used to create accessible experience for components like modal dialogs , where focus must be constrained. This directive is declared in A11yModule . Example div class= my-inner-dialog-content cdkTrapFocus !-- Tab and Shift + Tab will not leave this element. -- /div This directive will not prevent focus from moving out of the trapped region due to mouse interaction. Regions Regions can be declared explicitly with an initial focus element by using the cdkFocusRegionStart , cdkFocusRegionEnd and cdkFocusInitial DOM attributes. cdkFocusInitial specifies the element that will receive focus upon initialization of the region. cdkFocusRegionStart and cdkFocusRegionEnd define the region within which focus will be trapped. When using the tab key, focus will move through this region and wrap around on either end. For example: a mat-list-item routerLink cdkFocusRegionStart Focus region start /a a mat-list-item routerLink Link /a a mat-list-item routerLink cdkFocusInitial Initially focused /a a mat-list-item routerLink cdkFocusRegionEnd Focus region end /a InteractivityChecker InteractivityChecker is used to check the interactivity of an element, capturing disabled, visible, tabbable, and focusable states for accessibility purposes. See the API docs for more details. LiveAnnouncer LiveAnnouncer is used to announce messages for screen-reader users using an aria-live region. See the W3C's WAI-ARIA for more information on aria-live regions. Example @Component({...}) export class MyComponent { constructor(liveAnnouncer: LiveAnnouncer) { liveAnnouncer.announce( Hey Google ); } } FocusMonitor The FocusMonitor is an injectable service that can be used to listen for changes in the focus state of an element. It's more powerful than just listening for focus or blur events because it tells you how the element was focused (via mouse, keyboard, touch, or programmatically). It also allows listening for focus on descendant elements if desired. To listen for focus changes on an element, use the monitor method which takes an element to monitor and an optional boolean flag checkChildren . Passing true for checkChildren will tell the FocusMonitor to consider the element focused if any of its descendants are focused. This option defaults to false if not specified. The monitor method will return an Observable that emits the FocusOrigin whenever the focus state changes. The FocusOrigin will be one of the following: 'mouse' indicates the element was focused with the mouse 'keyboard' indicates the element was focused with the keyboard 'touch' indicates the element was focused by touching on a touchscreen 'program' indicates the element was focused programmatically null indicates the element was blurred In addition to emitting on the observable, the FocusMonitor will automatically apply CSS classes to the element when focused. It will add .cdk-focused if the element is focused and will further add .cdk-${origin}-focused (with ${origin} being mouse , keyboard , touch , or program ) to indicate how the element was focused. Note: currently the FocusMonitor emits on the observable outside of the Angular zone. Therefore if you markForCheck in the subscription you must put yourself back in the Angular zone. focusMonitor.monitor(el).subscribe(origin = this.ngZone.run(() = /* ... */ )); Any element that is monitored by calling monitor should eventually be unmonitored by calling stopMonitoring with the same element. It is possible to falsify the FocusOrigin when setting the focus programmatically by using the focusVia method of FocusMonitor . This method accepts an element to focus and the FocusOrigin to use. If the element being focused is currently being monitored by the FocusMonitor it will report the FocusOrigin that was passed in. If the element is not currently being monitored it will just be focused like normal. cdkMonitorElementFocus and cdkMonitorSubtreeFocus For convenience, the CDK also provides two directives that allow for easily monitoring an element. cdkMonitorElementFocus is the equivalent of calling monitor on the host element with checkChildren set to false . cdkMonitorSubtreeFocus is the equivalent of calling monitor on the host element with checkChildren set to true . Each of these directives has an @Output() cdkFocusChange that will emit the new FocusOrigin whenever it changes. Styling utilities The CDK a11y package comes with a set of CSS styles that can be used when building accessible components. To take advantage of them, you have to include the styles in your global stylesheet. If you're using Material together with the CDK, these styles have been included for you already. @import '~@angular/cdk/text-field/text-field'; @include cdk-a11y(); Hiding elements, while keeping them available for screen readers By default, screen readers and other assistive technology will skip elements that have display: none , visibility: hidden etc. In some cases you may need to visually hide an element, while keeping it available for assistive technology. You can do so using the cdk-visually-hidden class: div class= custom-checkbox input type= checkbox class= cdk-visually-hidden /div Targeting high contrast users The a11y package offers a mixin that allows you to target users that have the Windows high contrast mode turned on, via a media query. To target high contrast users, you can wrap your styles with the cdk-high-contrast mixin: button { @include cdk-high-contrast { outline: solid 1px; } }","title":"20-a11y"},{"location":"site-files/project/20-a11y/#listkeymanager","text":"ListKeyManager manages the active option in a list of items based on keyboard interaction. Intended to be used with components that correspond to a role=\"menu\" or role=\"listbox\" pattern.","title":"ListKeyManager"},{"location":"site-files/project/20-a11y/#basic-usage","text":"Any component that uses a ListKeyManager will generally do three things: Create a @ViewChildren query for the options being managed. Initialize the ListKeyManager , passing in the options. * Forward keyboard events from the managed component to the ListKeyManager . Each option should implement the ListKeyManagerOption interface: interface ListKeyManagerOption { disabled?: boolean; getLabel?(): string; }","title":"Basic usage"},{"location":"site-files/project/20-a11y/#wrapping","text":"Navigation through options can be made to wrap via the withWrap method this.keyManager = new FocusKeyManager(...).withWrap();","title":"Wrapping"},{"location":"site-files/project/20-a11y/#types-of-key-managers","text":"There are two varieties of ListKeyManager , FocusKeyManager and ActiveDescendantKeyManager .","title":"Types of key managers"},{"location":"site-files/project/20-a11y/#focuskeymanager","text":"Used when options will directly receive browser focus. Each item managed must implement the FocusableOption interface: interface FocusableOption extends ListKeyManagerOption { focus(): void; }","title":"FocusKeyManager"},{"location":"site-files/project/20-a11y/#activedescendantkeymanager","text":"Used when options will be marked as active via aria-activedescendant . Each item managed must implement the Highlightable interface: interface Highlightable extends ListKeyManagerOption { setActiveStyles(): void; setInactiveStyles(): void; } Each item must also have an ID bound to the listbox's or menu's aria-activedescendant .","title":"ActiveDescendantKeyManager"},{"location":"site-files/project/20-a11y/#focustrap","text":"The cdkTrapFocus directive traps Tab key focus within an element. This is intended to be used to create accessible experience for components like modal dialogs , where focus must be constrained. This directive is declared in A11yModule .","title":"FocusTrap"},{"location":"site-files/project/20-a11y/#example","text":"div class= my-inner-dialog-content cdkTrapFocus !-- Tab and Shift + Tab will not leave this element. -- /div This directive will not prevent focus from moving out of the trapped region due to mouse interaction.","title":"Example"},{"location":"site-files/project/20-a11y/#regions","text":"Regions can be declared explicitly with an initial focus element by using the cdkFocusRegionStart , cdkFocusRegionEnd and cdkFocusInitial DOM attributes. cdkFocusInitial specifies the element that will receive focus upon initialization of the region. cdkFocusRegionStart and cdkFocusRegionEnd define the region within which focus will be trapped. When using the tab key, focus will move through this region and wrap around on either end. For example: a mat-list-item routerLink cdkFocusRegionStart Focus region start /a a mat-list-item routerLink Link /a a mat-list-item routerLink cdkFocusInitial Initially focused /a a mat-list-item routerLink cdkFocusRegionEnd Focus region end /a","title":"Regions"},{"location":"site-files/project/20-a11y/#interactivitychecker","text":"InteractivityChecker is used to check the interactivity of an element, capturing disabled, visible, tabbable, and focusable states for accessibility purposes. See the API docs for more details.","title":"InteractivityChecker"},{"location":"site-files/project/20-a11y/#liveannouncer","text":"LiveAnnouncer is used to announce messages for screen-reader users using an aria-live region. See the W3C's WAI-ARIA for more information on aria-live regions.","title":"LiveAnnouncer"},{"location":"site-files/project/20-a11y/#example_1","text":"@Component({...}) export class MyComponent { constructor(liveAnnouncer: LiveAnnouncer) { liveAnnouncer.announce( Hey Google ); } }","title":"Example"},{"location":"site-files/project/20-a11y/#focusmonitor","text":"The FocusMonitor is an injectable service that can be used to listen for changes in the focus state of an element. It's more powerful than just listening for focus or blur events because it tells you how the element was focused (via mouse, keyboard, touch, or programmatically). It also allows listening for focus on descendant elements if desired. To listen for focus changes on an element, use the monitor method which takes an element to monitor and an optional boolean flag checkChildren . Passing true for checkChildren will tell the FocusMonitor to consider the element focused if any of its descendants are focused. This option defaults to false if not specified. The monitor method will return an Observable that emits the FocusOrigin whenever the focus state changes. The FocusOrigin will be one of the following: 'mouse' indicates the element was focused with the mouse 'keyboard' indicates the element was focused with the keyboard 'touch' indicates the element was focused by touching on a touchscreen 'program' indicates the element was focused programmatically null indicates the element was blurred In addition to emitting on the observable, the FocusMonitor will automatically apply CSS classes to the element when focused. It will add .cdk-focused if the element is focused and will further add .cdk-${origin}-focused (with ${origin} being mouse , keyboard , touch , or program ) to indicate how the element was focused. Note: currently the FocusMonitor emits on the observable outside of the Angular zone. Therefore if you markForCheck in the subscription you must put yourself back in the Angular zone. focusMonitor.monitor(el).subscribe(origin = this.ngZone.run(() = /* ... */ )); Any element that is monitored by calling monitor should eventually be unmonitored by calling stopMonitoring with the same element. It is possible to falsify the FocusOrigin when setting the focus programmatically by using the focusVia method of FocusMonitor . This method accepts an element to focus and the FocusOrigin to use. If the element being focused is currently being monitored by the FocusMonitor it will report the FocusOrigin that was passed in. If the element is not currently being monitored it will just be focused like normal.","title":"FocusMonitor"},{"location":"site-files/project/20-a11y/#cdkmonitorelementfocus-and-cdkmonitorsubtreefocus","text":"For convenience, the CDK also provides two directives that allow for easily monitoring an element. cdkMonitorElementFocus is the equivalent of calling monitor on the host element with checkChildren set to false . cdkMonitorSubtreeFocus is the equivalent of calling monitor on the host element with checkChildren set to true . Each of these directives has an @Output() cdkFocusChange that will emit the new FocusOrigin whenever it changes.","title":"cdkMonitorElementFocus and cdkMonitorSubtreeFocus"},{"location":"site-files/project/20-a11y/#styling-utilities","text":"The CDK a11y package comes with a set of CSS styles that can be used when building accessible components. To take advantage of them, you have to include the styles in your global stylesheet. If you're using Material together with the CDK, these styles have been included for you already. @import '~@angular/cdk/text-field/text-field'; @include cdk-a11y();","title":"Styling utilities"},{"location":"site-files/project/20-a11y/#hiding-elements-while-keeping-them-available-for-screen-readers","text":"By default, screen readers and other assistive technology will skip elements that have display: none , visibility: hidden etc. In some cases you may need to visually hide an element, while keeping it available for assistive technology. You can do so using the cdk-visually-hidden class: div class= custom-checkbox input type= checkbox class= cdk-visually-hidden /div","title":"Hiding elements, while keeping them available for screen readers"},{"location":"site-files/project/20-a11y/#targeting-high-contrast-users","text":"The a11y package offers a mixin that allows you to target users that have the Windows high contrast mode turned on, via a media query. To target high contrast users, you can wrap your styles with the cdk-high-contrast mixin: button { @include cdk-high-contrast { outline: solid 1px; } }","title":"Targeting high contrast users"},{"location":"site-files/project/21-live-announcer/","text":"LiveAnnouncer LiveAnnouncer is used to announce messages for screen-reader users using an aria-live region. See the W3C's WAI-ARIA for more information on aria-live regions. Methods announce(message: string, politeness?: 'off' | 'polite' | 'assertive'): void Announce the given message via aria-live region. The politeness argument determines the aria-live attribute on the announcer element, defaulting to 'polite'. Examples The LiveAnnouncer is injected into a component: @Component({ selector: 'my-component' providers: [LiveAnnouncer] }) export class MyComponent { constructor(liveAnnouncer: LiveAnnouncer) { liveAnnouncer.announce( Hey Google ); } }","title":"21-live-announcer"},{"location":"site-files/project/21-live-announcer/#liveannouncer","text":"LiveAnnouncer is used to announce messages for screen-reader users using an aria-live region. See the W3C's WAI-ARIA for more information on aria-live regions.","title":"LiveAnnouncer"},{"location":"site-files/project/21-live-announcer/#methods","text":"","title":"Methods"},{"location":"site-files/project/21-live-announcer/#announcemessage-string-politeness-off-polite-assertive-void","text":"Announce the given message via aria-live region. The politeness argument determines the aria-live attribute on the announcer element, defaulting to 'polite'.","title":"announce(message: string, politeness?: 'off' | 'polite' | 'assertive'): void"},{"location":"site-files/project/21-live-announcer/#examples","text":"The LiveAnnouncer is injected into a component: @Component({ selector: 'my-component' providers: [LiveAnnouncer] }) export class MyComponent { constructor(liveAnnouncer: LiveAnnouncer) { liveAnnouncer.announce( Hey Google ); } }","title":"Examples"},{"location":"site-files/project/22-interactivity-checker/","text":"InteractivityChecker InteractivityChecker is used to check the interactivity of an element, capturing disabled, visible, tabbable, and focusable states for accessibility purposes. Methods isDisabled(element: HTMLElement): boolean Whether the given element is disabled. isVisible(element: HTMLElement): boolean Whether the given element is visible. This will capture states like display: none and visibility: hidden , but not things like being clipped by an overflow: hidden parent or being outside the viewport. isFocusable(element: HTMLElement): boolean Gets whether an element can be focused by the user. isTabbable(element: HTMLElement): boolean Gets whether an element can be reached via Tab key. Assumes that the element has already been checked with isFocusable.","title":"22-interactivity-checker"},{"location":"site-files/project/22-interactivity-checker/#interactivitychecker","text":"InteractivityChecker is used to check the interactivity of an element, capturing disabled, visible, tabbable, and focusable states for accessibility purposes.","title":"InteractivityChecker"},{"location":"site-files/project/22-interactivity-checker/#methods","text":"","title":"Methods"},{"location":"site-files/project/22-interactivity-checker/#isdisabledelement-htmlelement-boolean","text":"Whether the given element is disabled.","title":"isDisabled(element: HTMLElement): boolean"},{"location":"site-files/project/22-interactivity-checker/#isvisibleelement-htmlelement-boolean","text":"Whether the given element is visible. This will capture states like display: none and visibility: hidden , but not things like being clipped by an overflow: hidden parent or being outside the viewport.","title":"isVisible(element: HTMLElement): boolean"},{"location":"site-files/project/22-interactivity-checker/#isfocusableelement-htmlelement-boolean","text":"Gets whether an element can be focused by the user.","title":"isFocusable(element: HTMLElement): boolean"},{"location":"site-files/project/22-interactivity-checker/#istabbableelement-htmlelement-boolean","text":"Gets whether an element can be reached via Tab key. Assumes that the element has already been checked with isFocusable.","title":"isTabbable(element: HTMLElement): boolean"},{"location":"site-files/project/23-focus-key-manager/","text":"FocusKeyManager ListKeyManager manages the focus of an item based on keyboard interaction.","title":"23-focus-key-manager"},{"location":"site-files/project/23-focus-key-manager/#focuskeymanager","text":"ListKeyManager manages the focus of an item based on keyboard interaction.","title":"FocusKeyManager"},{"location":"site-files/project/24-list-key-manager/","text":"ListKeyManager ListKeyManager manages the focus in a list of items based on keyboard interaction. Intended to be used with components that correspond to a role=\"menu\" or role=\"listbox\" pattern. Properties activeItemIndex Index of the currently active item activeItem The active item tabOut Observable that emits any time the Tab key is pressed, so components can react when focus is shifted off of the list. Methods withWrap(): this Turns on wrapping mode, which ensures that the active item will wrap to the other end of list when there are no more items in the given direction. setActiveItem(index: number): void Sets the active item to the item at the index specified. onKeydown(event: KeyboardEvent): void Sets the active item depending on the key event passed in. setFirstItemActive(): void Sets the active item to the first enabled item in the list. setLastItemActive(): void Sets the active item to the last enabled item in the list. setNextItemActive(): void Sets the active item to the next enabled item in the list. setPreviousItemActive(): void Sets the active item to a previous enabled item in the list.","title":"24-list-key-manager"},{"location":"site-files/project/24-list-key-manager/#listkeymanager","text":"ListKeyManager manages the focus in a list of items based on keyboard interaction. Intended to be used with components that correspond to a role=\"menu\" or role=\"listbox\" pattern.","title":"ListKeyManager"},{"location":"site-files/project/24-list-key-manager/#properties","text":"","title":"Properties"},{"location":"site-files/project/24-list-key-manager/#activeitemindex","text":"Index of the currently active item","title":"activeItemIndex"},{"location":"site-files/project/24-list-key-manager/#activeitem","text":"The active item","title":"activeItem"},{"location":"site-files/project/24-list-key-manager/#tabout","text":"Observable that emits any time the Tab key is pressed, so components can react when focus is shifted off of the list.","title":"tabOut"},{"location":"site-files/project/24-list-key-manager/#methods","text":"","title":"Methods"},{"location":"site-files/project/24-list-key-manager/#withwrap-this","text":"Turns on wrapping mode, which ensures that the active item will wrap to the other end of list when there are no more items in the given direction.","title":"withWrap(): this"},{"location":"site-files/project/24-list-key-manager/#setactiveitemindex-number-void","text":"Sets the active item to the item at the index specified.","title":"setActiveItem(index: number): void"},{"location":"site-files/project/24-list-key-manager/#onkeydownevent-keyboardevent-void","text":"Sets the active item depending on the key event passed in.","title":"onKeydown(event: KeyboardEvent): void"},{"location":"site-files/project/24-list-key-manager/#setfirstitemactive-void","text":"Sets the active item to the first enabled item in the list.","title":"setFirstItemActive(): void"},{"location":"site-files/project/24-list-key-manager/#setlastitemactive-void","text":"Sets the active item to the last enabled item in the list.","title":"setLastItemActive(): void"},{"location":"site-files/project/24-list-key-manager/#setnextitemactive-void","text":"Sets the active item to the next enabled item in the list.","title":"setNextItemActive(): void"},{"location":"site-files/project/24-list-key-manager/#setpreviousitemactive-void","text":"Sets the active item to a previous enabled item in the list.","title":"setPreviousItemActive(): void"},{"location":"site-files/project/25-focus-trap/","text":"FocusTrap The cdkTrapFocus directive traps Tab key focus within an element. This is intended to be used to create accessible experience for components like modal dialogs , where focus must be constrained. This directive is declared in A11yModule . Example div class= my-inner-dialog-content cdkTrapFocus !-- Tab and Shift + Tab will not leave this element. -- /div","title":"25-focus-trap"},{"location":"site-files/project/25-focus-trap/#focustrap","text":"The cdkTrapFocus directive traps Tab key focus within an element. This is intended to be used to create accessible experience for components like modal dialogs , where focus must be constrained. This directive is declared in A11yModule .","title":"FocusTrap"},{"location":"site-files/project/25-focus-trap/#example","text":"div class= my-inner-dialog-content cdkTrapFocus !-- Tab and Shift + Tab will not leave this element. -- /div","title":"Example"},{"location":"site-files/project/26-text-field/","text":"The text-field package provides useful utilities for working with text input fields such as input and textarea . Automatically resizing a textarea The cdkTextareaAutosize directive can be applied to any textarea to make it automatically resize to fit its content. The minimum and maximum number of rows to expand to can be set via the cdkAutosizeMinRows and cdkAutosizeMaxRows properties respectively. The resize logic can be triggered programmatically by calling resizeToFitContent . This method takes an optional boolean parameter force that defaults to false . Passing true will force the textarea to resize even if its text content has not changed, this can be useful if the styles affecting the textarea have changed. Monitoring the autofill state of an input The AutofillMonitor is an injectable service that allows the user to monitor the autofill state of an input . It has a monitor method that takes an element to monitor and returns an Observable of autofill event objects with a target and isAutofilled property. The observable emits every time the autofill state of the given input changes. Any element you monitor should eventually be unmonitored by calling stopMonitoring with the same element. To simplify this process, there is also a cdkAutofill directive that automatically handles monitoring and unmonitoring and doubles as an @Output binding that emits when the autofill state changes. Note: This service requires some CSS to install animation hooks when the autofill statechanges. If you are using Angular Material, this CSS is included as part of the mat-core mixin. If you are not using Angular Material, you should include this CSS with the cdk-text-field mixin. @import '~@angular/cdk/text-field/text-field'; @include cdk-text-field(); Styling the autofill state of an input It can be difficult to override the browser default background and color properties on an autofilled input . To make this simpler, the CDK includes a mixin cdk-text-field-autofill-color which can be used to set these properties. It takes a background value as the first parameter and an optional color value as the second parameter. @import '~@angular/cdk/text-field/text-field'; // Set custom-autofill inputs to have no background and red text. input.custom-autofill { @include cdk-text-field-autofill-color(transparent, red); }","title":"26-text-field"},{"location":"site-files/project/26-text-field/#automatically-resizing-a-lttextareagt","text":"The cdkTextareaAutosize directive can be applied to any textarea to make it automatically resize to fit its content. The minimum and maximum number of rows to expand to can be set via the cdkAutosizeMinRows and cdkAutosizeMaxRows properties respectively. The resize logic can be triggered programmatically by calling resizeToFitContent . This method takes an optional boolean parameter force that defaults to false . Passing true will force the textarea to resize even if its text content has not changed, this can be useful if the styles affecting the textarea have changed.","title":"Automatically resizing a &lt;textarea&gt;"},{"location":"site-files/project/26-text-field/#monitoring-the-autofill-state-of-an-ltinputgt","text":"The AutofillMonitor is an injectable service that allows the user to monitor the autofill state of an input . It has a monitor method that takes an element to monitor and returns an Observable of autofill event objects with a target and isAutofilled property. The observable emits every time the autofill state of the given input changes. Any element you monitor should eventually be unmonitored by calling stopMonitoring with the same element. To simplify this process, there is also a cdkAutofill directive that automatically handles monitoring and unmonitoring and doubles as an @Output binding that emits when the autofill state changes. Note: This service requires some CSS to install animation hooks when the autofill statechanges. If you are using Angular Material, this CSS is included as part of the mat-core mixin. If you are not using Angular Material, you should include this CSS with the cdk-text-field mixin. @import '~@angular/cdk/text-field/text-field'; @include cdk-text-field();","title":"Monitoring the autofill state of an &lt;input&gt;"},{"location":"site-files/project/26-text-field/#styling-the-autofill-state-of-an-ltinputgt","text":"It can be difficult to override the browser default background and color properties on an autofilled input . To make this simpler, the CDK includes a mixin cdk-text-field-autofill-color which can be used to set these properties. It takes a background value as the first parameter and an optional color value as the second parameter. @import '~@angular/cdk/text-field/text-field'; // Set custom-autofill inputs to have no background and red text. input.custom-autofill { @include cdk-text-field-autofill-color(transparent, red); }","title":"Styling the autofill state of an &lt;input&gt;"},{"location":"site-files/project/27-overlay/","text":"The overlay package provides a way to open floating panels on the screen. Initial setup The CDK overlays depend on a small set of structural styles to work correctly. If you're using Angular Material, these styles have been included together with the theme, otherwise if you're using the CDK on its own, you'll have to include the styles yourself. You can do so by importing the prebuilt styles in your global stylesheet: @import '~@angular/cdk/overlay-prebuilt.css'; Creating overlays Calling overlay.create() will return an OverlayRef instance. This instance is a handle for managing that specific overlay. The OverlayRef is a PortalOutlet - once created, content can be added by attaching a Portal . See the documentation on portals for further information. const overlayRef = overlay.create(); const userProfilePortal = new ComponentPortal(UserProfile); overlayRef.attach(userProfilePortal); Configuring an overlay When creating an overlay, an optional configuration object can be provided. const overlayRef = overlay.create({ height: '400px', width: '600px', }); The full set of configuration options can be found in the API documentation. Position strategies The positionStrategy configuration option determines how the overlay will be positioned on-screen. There are two position strategies available as part of the library: GlobalPositionStrategy and ConnectedPositionStrategy . GlobalPositionStrategy is used for overlays that require a specific position in the viewport, unrelated to other elements. This is commonly used for modal dialogs and application-level notifications. ConnectedPositionStrategy is used for overlays that are positioned relative to some other \"origin\" element on the page. This is commonly used for menus, pickers, and tooltips. When using the connected strategy, a set of preferred positions is provided; the \"best\" position will be selected based on how well the overlay would fit within the viewport. FlexibleConnectedPositionStrategy expands upon the functionality from the ConnectedPositionStrategy by adding more advanced features on top of being able to position an overlay relative to another element on the page. These features include the ability to have an overlay become scrollable once its content reaches the viewport edge, being able to configure a margin between the overlay and the viewport edge, having an overlay be pushed into the viewport if it doesn't fit into any of its preferred positions, as well as configuring whether the overlay's size can grow while the overlay is open. The flexible position strategy also allows for the transform-origin of an element, inside the overlay, to be set based on the current position using the withTransformOriginOn . This is useful when animating an overlay in and having the animation originate from the point at which it connects with the origin. A custom position strategy can be created by implementing the PositionStrategy interface. Each PositionStrategy defines an apply method that is called whenever the overlay's position should be updated. A custom position strategy can additionally expose any other APIs necessary as related to the positioning of the overlay element. Scroll strategies The scrollStrategy configuration option determines how the overlay will react to scrolling outside the overlay element. There are four scroll strategies available as part of the library. NoopScrollStrategy is the default option. This strategy does nothing. CloseScrollStrategy will automatically close the overlay when scrolling occurs. BlockScrollStrategy will block page scrolling while the overlay is open. Note that some applications may implement special or customized page scrolling; if the BlockScrollStrategy conflicts with this kind of situation, it can be overriden by re-providing BlockScrollStrategy with a custom implementation. RepositionScrollStrategy will re-position the overlay element on scroll. Note that this will have some performance impact on scrolling- users should weigh this cost in the context of each specific application. A custom scroll strategy can be created by implementing the ScrollStrategy interface. Each strategy will typically inject ScrollDispatcher (from @angular/cdk/scrolling ) to be notified of when scrolling takes place. See the documentation for ScrollDispatcher for more information on how scroll events are detected and dispatched. The overlay container The OverlayContainer provides a handle to the container element in which all individual overlay elements are rendered. By default, the overlay container is appended directly to the document body so that an overlay is never clipped by an overflow: hidden parent. Full-screen overlays The FullscreenOverlayContainer is an alternative to OverlayContainer that supports correct displaying of overlay elements in fullscreen mode . FullscreenOverlayContainer can be enabled by providing it in your NgModule : @NgModule({ providers: [{provide: OverlayContainer, useClass: FullscreenOverlayContainer}], // ... }) export class MyModule { }","title":"27-overlay"},{"location":"site-files/project/27-overlay/#initial-setup","text":"The CDK overlays depend on a small set of structural styles to work correctly. If you're using Angular Material, these styles have been included together with the theme, otherwise if you're using the CDK on its own, you'll have to include the styles yourself. You can do so by importing the prebuilt styles in your global stylesheet: @import '~@angular/cdk/overlay-prebuilt.css';","title":"Initial setup"},{"location":"site-files/project/27-overlay/#creating-overlays","text":"Calling overlay.create() will return an OverlayRef instance. This instance is a handle for managing that specific overlay. The OverlayRef is a PortalOutlet - once created, content can be added by attaching a Portal . See the documentation on portals for further information. const overlayRef = overlay.create(); const userProfilePortal = new ComponentPortal(UserProfile); overlayRef.attach(userProfilePortal);","title":"Creating overlays"},{"location":"site-files/project/27-overlay/#configuring-an-overlay","text":"When creating an overlay, an optional configuration object can be provided. const overlayRef = overlay.create({ height: '400px', width: '600px', }); The full set of configuration options can be found in the API documentation.","title":"Configuring an overlay"},{"location":"site-files/project/27-overlay/#position-strategies","text":"The positionStrategy configuration option determines how the overlay will be positioned on-screen. There are two position strategies available as part of the library: GlobalPositionStrategy and ConnectedPositionStrategy . GlobalPositionStrategy is used for overlays that require a specific position in the viewport, unrelated to other elements. This is commonly used for modal dialogs and application-level notifications. ConnectedPositionStrategy is used for overlays that are positioned relative to some other \"origin\" element on the page. This is commonly used for menus, pickers, and tooltips. When using the connected strategy, a set of preferred positions is provided; the \"best\" position will be selected based on how well the overlay would fit within the viewport. FlexibleConnectedPositionStrategy expands upon the functionality from the ConnectedPositionStrategy by adding more advanced features on top of being able to position an overlay relative to another element on the page. These features include the ability to have an overlay become scrollable once its content reaches the viewport edge, being able to configure a margin between the overlay and the viewport edge, having an overlay be pushed into the viewport if it doesn't fit into any of its preferred positions, as well as configuring whether the overlay's size can grow while the overlay is open. The flexible position strategy also allows for the transform-origin of an element, inside the overlay, to be set based on the current position using the withTransformOriginOn . This is useful when animating an overlay in and having the animation originate from the point at which it connects with the origin. A custom position strategy can be created by implementing the PositionStrategy interface. Each PositionStrategy defines an apply method that is called whenever the overlay's position should be updated. A custom position strategy can additionally expose any other APIs necessary as related to the positioning of the overlay element.","title":"Position strategies"},{"location":"site-files/project/27-overlay/#scroll-strategies","text":"The scrollStrategy configuration option determines how the overlay will react to scrolling outside the overlay element. There are four scroll strategies available as part of the library. NoopScrollStrategy is the default option. This strategy does nothing. CloseScrollStrategy will automatically close the overlay when scrolling occurs. BlockScrollStrategy will block page scrolling while the overlay is open. Note that some applications may implement special or customized page scrolling; if the BlockScrollStrategy conflicts with this kind of situation, it can be overriden by re-providing BlockScrollStrategy with a custom implementation. RepositionScrollStrategy will re-position the overlay element on scroll. Note that this will have some performance impact on scrolling- users should weigh this cost in the context of each specific application. A custom scroll strategy can be created by implementing the ScrollStrategy interface. Each strategy will typically inject ScrollDispatcher (from @angular/cdk/scrolling ) to be notified of when scrolling takes place. See the documentation for ScrollDispatcher for more information on how scroll events are detected and dispatched.","title":"Scroll strategies"},{"location":"site-files/project/27-overlay/#the-overlay-container","text":"The OverlayContainer provides a handle to the container element in which all individual overlay elements are rendered. By default, the overlay container is appended directly to the document body so that an overlay is never clipped by an overflow: hidden parent.","title":"The overlay container"},{"location":"site-files/project/27-overlay/#full-screen-overlays","text":"The FullscreenOverlayContainer is an alternative to OverlayContainer that supports correct displaying of overlay elements in fullscreen mode . FullscreenOverlayContainer can be enabled by providing it in your NgModule : @NgModule({ providers: [{provide: OverlayContainer, useClass: FullscreenOverlayContainer}], // ... }) export class MyModule { }","title":"Full-screen overlays"},{"location":"site-files/project/28-scroll-strategy/","text":"Scroll strategies What is a scroll strategy? A scroll strategy is a way of describing how an overlay should behave if the user scrolls while the overlay is open. The strategy has a reference to the OverlayRef , allowing it to recalculate the position, close the overlay, block scrolling, etc. Usage To associate an overlay with a scroll strategy, you have to pass in a function, that returns a scroll strategy, to the OverlayConfig . By default, all overlays will use the noop strategy which doesn't do anything. The other available strategies are reposition , block and close : let overlayConfig = new OverlayConfig({ scrollStrategy: overlay.scrollStrategies.block() }); this._overlay.create(overlayConfig).attach(yourPortal); Creating a custom scroll strategy To set up a custom scroll strategy, you have to create a class that implements the ScrollStrategy interface. There are three stages of a scroll strategy's life cycle: When an overlay is created, it'll call the strategy's attach method with a reference to itself. When an overlay is attached to the DOM, it'll call the enable method on its scroll strategy, When an overlay is detached from the DOM or destroyed, it'll call the disable method on its scroll strategy, allowing it to clean up after itself. Afterwards you can pass in the new scroll strategy to your overlay state: // Your custom scroll strategy. export class CustomScrollStrategy implements ScrollStrategy { // your implementation } overlayConfig.scrollStrategy = new CustomScrollStrategy(); this._overlay.create(overlayConfig).attach(yourPortal);","title":"28-scroll-strategy"},{"location":"site-files/project/28-scroll-strategy/#scroll-strategies","text":"","title":"Scroll strategies"},{"location":"site-files/project/28-scroll-strategy/#what-is-a-scroll-strategy","text":"A scroll strategy is a way of describing how an overlay should behave if the user scrolls while the overlay is open. The strategy has a reference to the OverlayRef , allowing it to recalculate the position, close the overlay, block scrolling, etc.","title":"What is a scroll strategy?"},{"location":"site-files/project/28-scroll-strategy/#usage","text":"To associate an overlay with a scroll strategy, you have to pass in a function, that returns a scroll strategy, to the OverlayConfig . By default, all overlays will use the noop strategy which doesn't do anything. The other available strategies are reposition , block and close : let overlayConfig = new OverlayConfig({ scrollStrategy: overlay.scrollStrategies.block() }); this._overlay.create(overlayConfig).attach(yourPortal);","title":"Usage"},{"location":"site-files/project/28-scroll-strategy/#creating-a-custom-scroll-strategy","text":"To set up a custom scroll strategy, you have to create a class that implements the ScrollStrategy interface. There are three stages of a scroll strategy's life cycle: When an overlay is created, it'll call the strategy's attach method with a reference to itself. When an overlay is attached to the DOM, it'll call the enable method on its scroll strategy, When an overlay is detached from the DOM or destroyed, it'll call the disable method on its scroll strategy, allowing it to clean up after itself. Afterwards you can pass in the new scroll strategy to your overlay state: // Your custom scroll strategy. export class CustomScrollStrategy implements ScrollStrategy { // your implementation } overlayConfig.scrollStrategy = new CustomScrollStrategy(); this._overlay.create(overlayConfig).attach(yourPortal);","title":"Creating a custom scroll strategy"},{"location":"site-files/project/29-collections/","text":"The collections package provides a set of utilities for managing collections. SelectionModel SelectionModel is a utility for powering selection of one or more options from a list. This model is used in components such as the selection list, table selections and chip lists. Basic Usage const model = new SelectionModel( true, // multiple selection or not [2,1,3] // initial selected values ); // select a value model.select(4); console.log(model.selected.length) //- 4 // deselect a value model.deselect(4); console.log(model.selected.length) //- 3 // toggle a value model.toggle(4); console.log(model.selected.length) //- 4 // check for selection console.log(model.isSelected(4)) //- true // sort the selections console.log(model.sort()) //- [1,2,3,4] // listen for changes model.changed.subscribe(s = console.log(s));","title":"29-collections"},{"location":"site-files/project/29-collections/#selectionmodel","text":"SelectionModel is a utility for powering selection of one or more options from a list. This model is used in components such as the selection list, table selections and chip lists.","title":"SelectionModel"},{"location":"site-files/project/29-collections/#basic-usage","text":"const model = new SelectionModel( true, // multiple selection or not [2,1,3] // initial selected values ); // select a value model.select(4); console.log(model.selected.length) //- 4 // deselect a value model.deselect(4); console.log(model.selected.length) //- 3 // toggle a value model.toggle(4); console.log(model.selected.length) //- 4 // check for selection console.log(model.isSelected(4)) //- true // sort the selections console.log(model.sort()) //- [1,2,3,4] // listen for changes model.changed.subscribe(s = console.log(s));","title":"Basic Usage"},{"location":"site-files/project/3-DEV_ENVIRONMENT/","text":"Developer guide: getting your environment set up Make sure you have node installed with a version at least 10.0.0 and yarn with a version of at least 1.10.0. We recommend using nvm to manage your node versions. Run yarn global add gulp to install gulp. Fork the angular/material2 repo on GitHub. Clone your fork to your machine with git clone . Recommendation: name your git remotes upstream for angular/material2 and your-username for your fork. Also see the team git shortcuts . From the root of the project, run yarn . To build Material in dev mode, run gulp material:build . To build Material in release mode, run gulp material:build-release To bring up a local server, run gulp serve:devapp . This will automatically watch for changes and rebuild. The browser should refresh automatically when changes are made. Running tests To run unit tests, run gulp test . To run the e2e tests, run gulp e2e . To run lint, run gulp lint .","title":"3-DEV_ENVIRONMENT"},{"location":"site-files/project/3-DEV_ENVIRONMENT/#developer-guide-getting-your-environment-set-up","text":"Make sure you have node installed with a version at least 10.0.0 and yarn with a version of at least 1.10.0. We recommend using nvm to manage your node versions. Run yarn global add gulp to install gulp. Fork the angular/material2 repo on GitHub. Clone your fork to your machine with git clone . Recommendation: name your git remotes upstream for angular/material2 and your-username for your fork. Also see the team git shortcuts . From the root of the project, run yarn . To build Material in dev mode, run gulp material:build . To build Material in release mode, run gulp material:build-release To bring up a local server, run gulp serve:devapp . This will automatically watch for changes and rebuild. The browser should refresh automatically when changes are made.","title":"Developer guide: getting your environment set up"},{"location":"site-files/project/3-DEV_ENVIRONMENT/#running-tests","text":"To run unit tests, run gulp test . To run the e2e tests, run gulp e2e . To run lint, run gulp lint .","title":"Running tests"},{"location":"site-files/project/30-coercion/","text":"Coercion Utility functions for coercing @Input s into specific types.","title":"30-coercion"},{"location":"site-files/project/30-coercion/#coercion","text":"Utility functions for coercing @Input s into specific types.","title":"Coercion"},{"location":"site-files/project/31-observers/","text":"The observers package provides convenience directives built on top of native web platform observers, such as MutationObserver. cdkObserveContent A directive for observing when the content of the host element changes. An event is emitted when a mutation to the content is observed. div class= projected-content-wrapper (cdkObserveContent)= projectContentChanged() ng-content /ng-content /div","title":"31-observers"},{"location":"site-files/project/31-observers/#cdkobservecontent","text":"A directive for observing when the content of the host element changes. An event is emitted when a mutation to the content is observed. div class= projected-content-wrapper (cdkObserveContent)= projectContentChanged() ng-content /ng-content /div","title":"cdkObserveContent"},{"location":"site-files/project/32-README/","text":"CDK schematics The sources of this directory are only used internally and should not be considered as part of the public API","title":"32-README"},{"location":"site-files/project/32-README/#cdk-schematics","text":"The sources of this directory are only used internally and should not be considered as part of the public API","title":"CDK schematics"},{"location":"site-files/project/33-update-schematic/","text":"ng-update schematic Note The CDK ng-update schematic is the foundation for the Angular Material update schematic. This is achieved by making the ng-update code for the CDK as abstract as possible. This means that this document also applies for the Angular Material ng-update . The ng-update schematic consists of multiple migration entry-points where every entry-point targets a specific Angular CDK or Angular Material version. As of right now, we have two migration entry-points that handle the breaking changes for the given target version: Target Version Description V6 Upgrade from any version to v6.0.0 V7 Upgrade from any version to v7.0.0 V8 Upgrade from any version to v8.0.0 Note that the migrations run in order if multiple versions are transitively targeted. For example, consider an application which uses Angular Material v5.0.0. In case the developer runs ng update , the Angular CLI only installs V7 and runs the V6 and V7 migrations in order. This shows that the we technically need to keep all migrations from V5 in this code base, because the CLI usually only installs the latest version and expects all version migrations to be present. Update concept The goal of the update schematic is to automatically migrate code that is affected by breaking changes of the target version. Most of the time, we can apply such automatic migrations, but there are also a few breaking changes that cannot be migrated automatically. In that case, our goal should be to notify the developer about the breaking change that needs developer attention. Transforming TypeScript files In order to automatically migrate TypeScript source files, we take advantage of the tslint which allows us to create custom rules that can: Easily visit specific types of TypeScript nodes (e.g. visitClassDeclaration ) Structure migrations based on the upgrade data or type of migration (different TSLint rules) Easily apply replacements / fixes for specific TypeScript nodes. Easily report breaking changes at TypeScript nodes that cannot be migrated automatically Double check for rule migrations (TSLint always runs rule again after migrations have been applied) There also other various concepts for transforming TypeScript source files, but most of them don't provide a simple API for replacements and reporting. Read more about the possible approaches below: Description Evaluation Regular Expressions Too brittle. No type checking possible. Regular Expression can be used in combination with some real AST walking TypeScript transforms (no emit) This would be a good solution that avoids using TSLint. No simple API for reporting and visiting specific types of nodes Plain TypeScript AST This would be similar to the TypeScript transforms. Extra effort in creating the replacement API; reporting API; walking logic ## Transforming CSS and HTML files Since TSLint allows us to only visit TypeScript nodes, we can technically just apply migrations for inline styles or templates which are part of the TypeScript AST. In our case, the update schematic should also apply migrations for external templates or styles. In order to archive this with TSLint, we have a customized implementation of a TSLint.RuleWalker . The custom RuleWalker which is called ComponentWalker determines external templates and stylesheets from the component/directive metadata. The given resource files will then be wrapped inside of an in-memory TypeScript source file that can be applied to the rule walker. This ensures that only referenced resource files will be migrated and also allows us to take advantage of the simple replacement and reporting API from TSLint. This also makes the rule walker API consistent with the handling of inline resource files. // PSEUDO CODE visitExternalTemplate(node: ts.SourceFile) { const parsedHtml = parse5.parse(node.getFullText()); this._findOutdatedInputs(parsedHtml) .forEach(offsetStart = this._addExternalFailure(offsetStart, 'Outdated input', _myFix);} Upgrade data for target versions The upgrade data for migrations is separated based on the target version. This is necessary in order to allow migrations run sequentially. For example: In V6: onChange has been renamed to changed In V7: changed has been renamed to onValueChange If we would not run the migrations in order, or don't separate the upgrade data, we would not be able to properly handle the migrations for each target version. e.g. someone is on 5.0.0 and only wants to upgrade to 6.0.0. In that case he would end up with onValueChange because the non-separated upgrade data would just include: onChange = onValueChange Also besides separating the upgrade data based on the target version, we split the upgrade data based on the type of code that is affected by these migrations: See here: src/lib/schematics/update/material/data Adding upgrade data Adding upgrade data is now a mandatory step before breaking changes should be merged into upstream . For simple and common breaking changes, there should be already an upgrade data file that just needs the new change inserted. In case there is no upgrade data for a breaking change, we need to evaluate if there should be a single misc migration rule that is tied to that specific breaking change, or if we should create a new migration rule in a more generic way. Example : Adding upgrade data for a property rename Scenario : In Angular Material V7.0.0, we rename MatRipple#color to MatRipple#newColor . First, look for an existing upgrade data file that covers similar breaking changes. In that case an existing upgrade data file for property-names already exists. Insert the new breaking change within the proper VersionTarget . src/lib/schematics/ng-update/material/data/property-names.ts export const propertyNames: VersionChanges MaterialPropertyNameData = { [TargetVersion.V7]: [ { pr: '{PULL_REQUEST_LINK_FOR_BREAKING_CHANGE}', changes: [ { replace: 'color', replaceWith: 'newColor', whitelist: { classes: ['MatRipple'] } } ] } ], ... }; Once the data is inserted into the upgrade data file, the update schematic will properly migrate MatRipple#color to MatRipple#newColor if someone upgrades to Angular Material V7.0.0. But that's not all. It's encouraged to add a test-case for the new migration data. In this case, a test case already exists for the type of migration and we just need to add our breaking change to it. Read more about adding a test case in the next section. Adding a breaking change to a test case Considering we added a breaking change to the update schematic, it's encouraged to add a proper test case for the new change that has been added. In the scenario where a property from MatRipple has been renamed in V7, we don't need to create a new test-case file because there is already a test case for the property-names upgrade data. In that case, we just need to add the breaking change to the existing test case. src/lib/schematics/ng-update/test-cases/v7/property-names_input.ts ... /** * Mock definitions. This test case does not have access to @angular/material. */ class MatRipple { color: string; } /* * Actual test cases using the previously defined definitions. */ class A implements OnInit { constructor(private a: MatRipple) {} ngOnInit() { this.a.color = 'primary'; } } src/lib/schematics/ng-update/test-cases/v7/property-names_expected_output.ts ... /** * Mock definitions. This test case does not have access to @angular/material. */ class MatRipple { color: string; } /* * Actual test cases using the previously defined definitions. */ class A implements OnInit { constructor(private a: MatRipple) {} ngOnInit() { this.a.newColor = 'primary'; } } Note : The _input.ts file will be just transformed by the V7 migrations and compared to the _expected_output.ts file. This means that it's necessary to also include the no longer valid mock declarations to the expected output file.","title":"33-update-schematic"},{"location":"site-files/project/33-update-schematic/#ng-update-schematic","text":"Note The CDK ng-update schematic is the foundation for the Angular Material update schematic. This is achieved by making the ng-update code for the CDK as abstract as possible. This means that this document also applies for the Angular Material ng-update . The ng-update schematic consists of multiple migration entry-points where every entry-point targets a specific Angular CDK or Angular Material version. As of right now, we have two migration entry-points that handle the breaking changes for the given target version: Target Version Description V6 Upgrade from any version to v6.0.0 V7 Upgrade from any version to v7.0.0 V8 Upgrade from any version to v8.0.0 Note that the migrations run in order if multiple versions are transitively targeted. For example, consider an application which uses Angular Material v5.0.0. In case the developer runs ng update , the Angular CLI only installs V7 and runs the V6 and V7 migrations in order. This shows that the we technically need to keep all migrations from V5 in this code base, because the CLI usually only installs the latest version and expects all version migrations to be present.","title":"ng-update schematic"},{"location":"site-files/project/33-update-schematic/#update-concept","text":"The goal of the update schematic is to automatically migrate code that is affected by breaking changes of the target version. Most of the time, we can apply such automatic migrations, but there are also a few breaking changes that cannot be migrated automatically. In that case, our goal should be to notify the developer about the breaking change that needs developer attention.","title":"Update concept"},{"location":"site-files/project/33-update-schematic/#transforming-typescript-files","text":"In order to automatically migrate TypeScript source files, we take advantage of the tslint which allows us to create custom rules that can: Easily visit specific types of TypeScript nodes (e.g. visitClassDeclaration ) Structure migrations based on the upgrade data or type of migration (different TSLint rules) Easily apply replacements / fixes for specific TypeScript nodes. Easily report breaking changes at TypeScript nodes that cannot be migrated automatically Double check for rule migrations (TSLint always runs rule again after migrations have been applied) There also other various concepts for transforming TypeScript source files, but most of them don't provide a simple API for replacements and reporting. Read more about the possible approaches below: Description Evaluation Regular Expressions Too brittle. No type checking possible. Regular Expression can be used in combination with some real AST walking TypeScript transforms (no emit) This would be a good solution that avoids using TSLint. No simple API for reporting and visiting specific types of nodes Plain TypeScript AST This would be similar to the TypeScript transforms. Extra effort in creating the replacement API; reporting API; walking logic","title":"Transforming TypeScript files"},{"location":"site-files/project/33-update-schematic/#transforming-css-and-html-files","text":"Since TSLint allows us to only visit TypeScript nodes, we can technically just apply migrations for inline styles or templates which are part of the TypeScript AST. In our case, the update schematic should also apply migrations for external templates or styles. In order to archive this with TSLint, we have a customized implementation of a TSLint.RuleWalker . The custom RuleWalker which is called ComponentWalker determines external templates and stylesheets from the component/directive metadata. The given resource files will then be wrapped inside of an in-memory TypeScript source file that can be applied to the rule walker. This ensures that only referenced resource files will be migrated and also allows us to take advantage of the simple replacement and reporting API from TSLint. This also makes the rule walker API consistent with the handling of inline resource files. // PSEUDO CODE visitExternalTemplate(node: ts.SourceFile) { const parsedHtml = parse5.parse(node.getFullText()); this._findOutdatedInputs(parsedHtml) .forEach(offsetStart = this._addExternalFailure(offsetStart, 'Outdated input', _myFix);}","title":"## Transforming CSS and HTML files"},{"location":"site-files/project/33-update-schematic/#upgrade-data-for-target-versions","text":"The upgrade data for migrations is separated based on the target version. This is necessary in order to allow migrations run sequentially. For example: In V6: onChange has been renamed to changed In V7: changed has been renamed to onValueChange If we would not run the migrations in order, or don't separate the upgrade data, we would not be able to properly handle the migrations for each target version. e.g. someone is on 5.0.0 and only wants to upgrade to 6.0.0. In that case he would end up with onValueChange because the non-separated upgrade data would just include: onChange = onValueChange Also besides separating the upgrade data based on the target version, we split the upgrade data based on the type of code that is affected by these migrations: See here: src/lib/schematics/update/material/data","title":"Upgrade data for target versions"},{"location":"site-files/project/33-update-schematic/#adding-upgrade-data","text":"Adding upgrade data is now a mandatory step before breaking changes should be merged into upstream . For simple and common breaking changes, there should be already an upgrade data file that just needs the new change inserted. In case there is no upgrade data for a breaking change, we need to evaluate if there should be a single misc migration rule that is tied to that specific breaking change, or if we should create a new migration rule in a more generic way. Example : Adding upgrade data for a property rename Scenario : In Angular Material V7.0.0, we rename MatRipple#color to MatRipple#newColor . First, look for an existing upgrade data file that covers similar breaking changes. In that case an existing upgrade data file for property-names already exists. Insert the new breaking change within the proper VersionTarget . src/lib/schematics/ng-update/material/data/property-names.ts export const propertyNames: VersionChanges MaterialPropertyNameData = { [TargetVersion.V7]: [ { pr: '{PULL_REQUEST_LINK_FOR_BREAKING_CHANGE}', changes: [ { replace: 'color', replaceWith: 'newColor', whitelist: { classes: ['MatRipple'] } } ] } ], ... }; Once the data is inserted into the upgrade data file, the update schematic will properly migrate MatRipple#color to MatRipple#newColor if someone upgrades to Angular Material V7.0.0. But that's not all. It's encouraged to add a test-case for the new migration data. In this case, a test case already exists for the type of migration and we just need to add our breaking change to it. Read more about adding a test case in the next section.","title":"Adding upgrade data"},{"location":"site-files/project/33-update-schematic/#adding-a-breaking-change-to-a-test-case","text":"Considering we added a breaking change to the update schematic, it's encouraged to add a proper test case for the new change that has been added. In the scenario where a property from MatRipple has been renamed in V7, we don't need to create a new test-case file because there is already a test case for the property-names upgrade data. In that case, we just need to add the breaking change to the existing test case. src/lib/schematics/ng-update/test-cases/v7/property-names_input.ts ... /** * Mock definitions. This test case does not have access to @angular/material. */ class MatRipple { color: string; } /* * Actual test cases using the previously defined definitions. */ class A implements OnInit { constructor(private a: MatRipple) {} ngOnInit() { this.a.color = 'primary'; } } src/lib/schematics/ng-update/test-cases/v7/property-names_expected_output.ts ... /** * Mock definitions. This test case does not have access to @angular/material. */ class MatRipple { color: string; } /* * Actual test cases using the previously defined definitions. */ class A implements OnInit { constructor(private a: MatRipple) {} ngOnInit() { this.a.newColor = 'primary'; } } Note : The _input.ts file will be just transformed by the V7 migrations and compared to the _expected_output.ts file. This means that it's necessary to also include the no longer valid mock declarations to the expected output file.","title":"Adding a breaking change to a test case"},{"location":"site-files/project/34-drag-drop/","text":"The @angular/cdk/drag-drop module provides you with a way to easily and declaratively create drag-and-drop interfaces, with support for free dragging, sorting within a list, transferring items between lists, animations, touch devices, custom drag handles, previews, and placeholders, in addition to horizontal lists and locking along an axis. Getting started Start by importing DragDropModule into the NgModule where you want to use drag-and-drop features. You can now add the cdkDrag directive to elements to make them draggable. When outside of a cdkDropList element, draggable elements can be freely moved around the page. You can add cdkDropList elements to constrain where elements may be dropped. Reordering lists Adding cdkDropList around a set of cdkDrag elements groups the draggables into a reorderable collection. Items will automatically rearrange as an element moves. Note that this will not update your data model; you can listen to the cdkDropListDropped event to update the data model once the user finishes dragging. Transferring items between lists The cdkDropList directive supports transferring dragged items between connected drop zones. You can connect one or more cdkDropList instances together by setting the cdkDropListConnectedTo property or by wrapping the elements in an element with the cdkDropListGroup attribute. Note that cdkDropListConnectedTo works both with a direct reference to another cdkDropList , or by referencing the id of another drop container: !-- This is valid -- div cdkDropList #listOne= cdkDropList [cdkDropListConnectedTo]= [listTwo] /div div cdkDropList #listTwo= cdkDropList [cdkDropListConnectedTo]= [listOne] /div !-- This is valid as well -- div cdkDropList id= list-one [cdkDropListConnectedTo]= ['list-two'] /div div cdkDropList id= list-two [cdkDropListConnectedTo]= ['list-one'] /div If you have an unknown number of connected drop lists, you can use the cdkDropListGroup directive to set up the connection automatically. Note that any new cdkDropList that is added under a group will be connected to all other lists automatically. div cdkDropListGroup !-- All lists in here will be connected. -- div cdkDropList *ngFor= let list of lists /div /div Attaching data You can associate some arbitrary data with both cdkDrag and cdkDropList by setting cdkDragData or cdkDropListData , respectively. Events fired from both directives include this data, allowing you to easily identify the origin of the drag or drop interaction. div cdkDropList [cdkDropListData]= list *ngFor= let list of lists (cdkDropListDropped)= drop($event) div cdkDrag [cdkDragData]= item *ngFor= let item of list /div /div Styling The cdkDrag and cdkDropList directive include only those styles strictly necessary for functionality. The application can then customize the elements by styling CSS classes added by the directives: Selector Description .cdk-drop-list Corresponds to the cdkDropList container. .cdk-drag Corresponds to a cdkDrag instance. .cdk-drag-disabled Class that is added to a disabled cdkDrag . .cdk-drag-preview This is the element that will be rendered next to the user's cursor as they're dragging an item in a sortable list. By default the element looks exactly like the element that is being dragged. .cdk-drag-placeholder This is element that will be shown instead of the real element as it's being dragged inside a cdkDropList . By default this will look exactly like the element that is being sorted. .cdk-drop-list-dragging A class that is added to cdkDropList while the user is dragging an item. .cdk-drop-list-disabled A class that is added to cdkDropList when it is disabled. .cdk-drop-list-receiving A class that is added to cdkDropList when it can receive an item that is being dragged inside a connected drop list. Animations The drag-and-drop module supports animations both while sorting an element inside a list, as well as animating it from the position that the user dropped it to its final place in the list. To set up your animations, you have to define a transition that targets the transform property. The following classes can be used for animations: .cdk-drag - If you add a transition to this class, it'll animate as the user is sorting through a list. .cdk-drag-animating - This class is added to a cdkDrag when the user has stopped dragging. If you add a transition to it, the CDK will animate the element from its drop position to the final position inside the cdkDropList container. Example animations: /* Animate items as they're being sorted. */ .cdk-drop-list-dragging .cdk-drag { transition: transform 250ms cubic-bezier(0, 0, 0.2, 1); } /* Animate an item that has been dropped. */ .cdk-drag-animating { transition: transform 300ms cubic-bezier(0, 0, 0.2, 1); } Customizing the drag area using a handle By default, the user can drag the entire cdkDrag element to move it around. If you want to restrict the user to only be able to do so using a handle element, you can do it by adding the cdkDragHandle directive to an element inside of cdkDrag . Note that you can have as many cdkDragHandle elements as you want: Customizing the drag preview When a cdkDrag element is picked up, it will create a preview element visible while dragging. By default, this will be a clone of the original element positioned next to the user's cursor. This preview can be customized, though, by providing a custom template via *cdkDragPreview . Note that the cloned element will remove its id attribute in order to avoid having multiple elements with the same id on the page. This will cause any CSS that targets that id not to be applied. Customizing the drag placeholder While a cdkDrag element is being dragged, the CDK will create a placeholder element that will show where it will be placed when it's dropped. By default the placeholder is a clone of the element that is being dragged, however you can replace it with a custom one using the *cdkDragPlaceholder directive: List orientation The cdkDropList directive assumes that lists are vertical by default. This can be changed by setting the orientation property to `\"horizontal\". Restricting movement within an element If you want to stop the user from being able to drag a cdkDrag element outside of another element, you can pass a CSS selector to the cdkDragBoundary attribute. The attribute works by accepting a selector and looking up the DOM until it finds an element that matches it. If a match is found, it'll be used as the boundary outside of which the element can't be dragged. cdkDragBoundary can also be used when cdkDrag is placed inside a cdkDropList . Restricting movement along an axis By default, cdkDrag allows free movement in all directions. To restrict dragging to a specific axis, you can set cdkDragLockAxis on cdkDrag or cdkDropListLockAxis on cdkDropList to either \"x\" or \"y\" . Alternate drag root element If there's an element that you want to make draggable, but you don't have direct access to it, you can use the cdkDragRootElement attribute. The attribute works by accepting a selector and looking up the DOM until it finds an element that matches the selector. If an element is found, it'll become the element that is moved as the user is dragging. This is useful for cases like making a dialog draggable. Controlling which items can be moved into a container By default, all cdkDrag items from one container can be moved into another connected container. If you want more fine-grained control over which items can be dropped, you can use the cdkDropListEnterPredicate which will be called whenever an item is about to enter a new container. Depending on whether the predicate returns true or false , the item may or may not be allowed into the new container. Disable dragging If you want to disable dragging for a particular drag item, you can do so by setting the cdkDragDisabled input on a cdkDrag item. Furthermore, you can disable an entire list using the cdkDropListDisabled input on a cdkDropList or a particular handle via cdkDragHandleDisabled on cdkDragHandle .","title":"34-drag-drop"},{"location":"site-files/project/34-drag-drop/#getting-started","text":"Start by importing DragDropModule into the NgModule where you want to use drag-and-drop features. You can now add the cdkDrag directive to elements to make them draggable. When outside of a cdkDropList element, draggable elements can be freely moved around the page. You can add cdkDropList elements to constrain where elements may be dropped.","title":"Getting started"},{"location":"site-files/project/34-drag-drop/#reordering-lists","text":"Adding cdkDropList around a set of cdkDrag elements groups the draggables into a reorderable collection. Items will automatically rearrange as an element moves. Note that this will not update your data model; you can listen to the cdkDropListDropped event to update the data model once the user finishes dragging.","title":"Reordering lists"},{"location":"site-files/project/34-drag-drop/#transferring-items-between-lists","text":"The cdkDropList directive supports transferring dragged items between connected drop zones. You can connect one or more cdkDropList instances together by setting the cdkDropListConnectedTo property or by wrapping the elements in an element with the cdkDropListGroup attribute. Note that cdkDropListConnectedTo works both with a direct reference to another cdkDropList , or by referencing the id of another drop container: !-- This is valid -- div cdkDropList #listOne= cdkDropList [cdkDropListConnectedTo]= [listTwo] /div div cdkDropList #listTwo= cdkDropList [cdkDropListConnectedTo]= [listOne] /div !-- This is valid as well -- div cdkDropList id= list-one [cdkDropListConnectedTo]= ['list-two'] /div div cdkDropList id= list-two [cdkDropListConnectedTo]= ['list-one'] /div If you have an unknown number of connected drop lists, you can use the cdkDropListGroup directive to set up the connection automatically. Note that any new cdkDropList that is added under a group will be connected to all other lists automatically. div cdkDropListGroup !-- All lists in here will be connected. -- div cdkDropList *ngFor= let list of lists /div /div","title":"Transferring items between lists"},{"location":"site-files/project/34-drag-drop/#attaching-data","text":"You can associate some arbitrary data with both cdkDrag and cdkDropList by setting cdkDragData or cdkDropListData , respectively. Events fired from both directives include this data, allowing you to easily identify the origin of the drag or drop interaction. div cdkDropList [cdkDropListData]= list *ngFor= let list of lists (cdkDropListDropped)= drop($event) div cdkDrag [cdkDragData]= item *ngFor= let item of list /div /div","title":"Attaching data"},{"location":"site-files/project/34-drag-drop/#styling","text":"The cdkDrag and cdkDropList directive include only those styles strictly necessary for functionality. The application can then customize the elements by styling CSS classes added by the directives: Selector Description .cdk-drop-list Corresponds to the cdkDropList container. .cdk-drag Corresponds to a cdkDrag instance. .cdk-drag-disabled Class that is added to a disabled cdkDrag . .cdk-drag-preview This is the element that will be rendered next to the user's cursor as they're dragging an item in a sortable list. By default the element looks exactly like the element that is being dragged. .cdk-drag-placeholder This is element that will be shown instead of the real element as it's being dragged inside a cdkDropList . By default this will look exactly like the element that is being sorted. .cdk-drop-list-dragging A class that is added to cdkDropList while the user is dragging an item. .cdk-drop-list-disabled A class that is added to cdkDropList when it is disabled. .cdk-drop-list-receiving A class that is added to cdkDropList when it can receive an item that is being dragged inside a connected drop list.","title":"Styling"},{"location":"site-files/project/34-drag-drop/#animations","text":"The drag-and-drop module supports animations both while sorting an element inside a list, as well as animating it from the position that the user dropped it to its final place in the list. To set up your animations, you have to define a transition that targets the transform property. The following classes can be used for animations: .cdk-drag - If you add a transition to this class, it'll animate as the user is sorting through a list. .cdk-drag-animating - This class is added to a cdkDrag when the user has stopped dragging. If you add a transition to it, the CDK will animate the element from its drop position to the final position inside the cdkDropList container. Example animations: /* Animate items as they're being sorted. */ .cdk-drop-list-dragging .cdk-drag { transition: transform 250ms cubic-bezier(0, 0, 0.2, 1); } /* Animate an item that has been dropped. */ .cdk-drag-animating { transition: transform 300ms cubic-bezier(0, 0, 0.2, 1); }","title":"Animations"},{"location":"site-files/project/34-drag-drop/#customizing-the-drag-area-using-a-handle","text":"By default, the user can drag the entire cdkDrag element to move it around. If you want to restrict the user to only be able to do so using a handle element, you can do it by adding the cdkDragHandle directive to an element inside of cdkDrag . Note that you can have as many cdkDragHandle elements as you want:","title":"Customizing the drag area using a handle"},{"location":"site-files/project/34-drag-drop/#customizing-the-drag-preview","text":"When a cdkDrag element is picked up, it will create a preview element visible while dragging. By default, this will be a clone of the original element positioned next to the user's cursor. This preview can be customized, though, by providing a custom template via *cdkDragPreview . Note that the cloned element will remove its id attribute in order to avoid having multiple elements with the same id on the page. This will cause any CSS that targets that id not to be applied.","title":"Customizing the drag preview"},{"location":"site-files/project/34-drag-drop/#customizing-the-drag-placeholder","text":"While a cdkDrag element is being dragged, the CDK will create a placeholder element that will show where it will be placed when it's dropped. By default the placeholder is a clone of the element that is being dragged, however you can replace it with a custom one using the *cdkDragPlaceholder directive:","title":"Customizing the drag placeholder"},{"location":"site-files/project/34-drag-drop/#list-orientation","text":"The cdkDropList directive assumes that lists are vertical by default. This can be changed by setting the orientation property to `\"horizontal\".","title":"List orientation"},{"location":"site-files/project/34-drag-drop/#restricting-movement-within-an-element","text":"If you want to stop the user from being able to drag a cdkDrag element outside of another element, you can pass a CSS selector to the cdkDragBoundary attribute. The attribute works by accepting a selector and looking up the DOM until it finds an element that matches it. If a match is found, it'll be used as the boundary outside of which the element can't be dragged. cdkDragBoundary can also be used when cdkDrag is placed inside a cdkDropList .","title":"Restricting movement within an element"},{"location":"site-files/project/34-drag-drop/#restricting-movement-along-an-axis","text":"By default, cdkDrag allows free movement in all directions. To restrict dragging to a specific axis, you can set cdkDragLockAxis on cdkDrag or cdkDropListLockAxis on cdkDropList to either \"x\" or \"y\" .","title":"Restricting movement along an axis"},{"location":"site-files/project/34-drag-drop/#alternate-drag-root-element","text":"If there's an element that you want to make draggable, but you don't have direct access to it, you can use the cdkDragRootElement attribute. The attribute works by accepting a selector and looking up the DOM until it finds an element that matches the selector. If an element is found, it'll become the element that is moved as the user is dragging. This is useful for cases like making a dialog draggable.","title":"Alternate drag root element"},{"location":"site-files/project/34-drag-drop/#controlling-which-items-can-be-moved-into-a-container","text":"By default, all cdkDrag items from one container can be moved into another connected container. If you want more fine-grained control over which items can be dropped, you can use the cdkDropListEnterPredicate which will be called whenever an item is about to enter a new container. Depending on whether the predicate returns true or false , the item may or may not be allowed into the new container.","title":"Controlling which items can be moved into a container"},{"location":"site-files/project/34-drag-drop/#disable-dragging","text":"If you want to disable dragging for a particular drag item, you can do so by setting the cdkDragDisabled input on a cdkDrag item. Furthermore, you can disable an entire list using the cdkDropListDisabled input on a cdkDropList or a particular handle via cdkDragHandleDisabled on cdkDragHandle .","title":"Disable dragging"},{"location":"site-files/project/35-scrolling/","text":"Warning: this component is still experimental. It may have bugs and the API may change at any time Scrolling over items with different sizes When the items have different or unknown sizes, you can use the AutoSizeVirtualScrollStrategy . This can be added to your viewport by using the autosize directive. cdk-virtual-scroll-viewport autosize ... /cdk-virtual-scroll-viewport The autosize strategy is configured through two inputs: minBufferPx and maxBufferPx . minBufferPx determines the minimum space outside virtual scrolling viewport that will be filled with content. Increasing this will increase the amount of content a user will see before more content must be rendered. However, too large a value will cause more content to be rendered than is necessary. maxBufferPx determines the amount of content that will be added incrementally as the viewport is scrolled. This should be greater than the size of minBufferPx so that one \"render\" is needed at a time. cdk-virtual-scroll-viewport autosize minBufferPx= 50 maxBufferPx= 100 ... /cdk-virtual-scroll-viewport Because the auto size strategy needs to measure the size of the elements, its performance may not be as good as the fixed size strategy.","title":"35-scrolling"},{"location":"site-files/project/35-scrolling/#scrolling-over-items-with-different-sizes","text":"When the items have different or unknown sizes, you can use the AutoSizeVirtualScrollStrategy . This can be added to your viewport by using the autosize directive. cdk-virtual-scroll-viewport autosize ... /cdk-virtual-scroll-viewport The autosize strategy is configured through two inputs: minBufferPx and maxBufferPx . minBufferPx determines the minimum space outside virtual scrolling viewport that will be filled with content. Increasing this will increase the amount of content a user will see before more content must be rendered. However, too large a value will cause more content to be rendered than is necessary. maxBufferPx determines the amount of content that will be added incrementally as the viewport is scrolled. This should be greater than the size of minBufferPx so that one \"render\" is needed at a time. cdk-virtual-scroll-viewport autosize minBufferPx= 50 maxBufferPx= 100 ... /cdk-virtual-scroll-viewport Because the auto size strategy needs to measure the size of the elements, its performance may not be as good as the fixed size strategy.","title":"Scrolling over items with different sizes"},{"location":"site-files/project/4-CONTRIBUTING/","text":"Contributing to Angular Material We would love for you to contribute to Angular Material and help make it ever better! As a contributor, here are the guidelines we would like you to follow: Code of Conduct Question or Problem? Issues and Bugs Feature Requests Submission Guidelines Coding Rules Commit Message Guidelines Signing the CLA Code of Conduct Help us keep Angular open and inclusive. Please read and follow our Code of Conduct . Got a Question or Problem? Please do not open issues for general support questions as we want to keep GitHub issues for bug reports and feature requests. You've got much better chances of getting your question answered on StackOverflow where the questions should be tagged with tag angular-material2 . StackOverflow is a much better place to ask questions since: there are thousands of people willing to help on StackOverflow questions and answers stay available for public viewing so your question / answer might help someone else StackOverflow's voting system assures that the best answers are prominently visible. To save your and our time, we will be systematically closing all the issues that are requests for general support and redirecting people to StackOverflow. If you would like to chat about the question in real-time, you can reach out via our gitter channel . Found an Issue? If you find a bug in the source code or a mistake in the documentation, you can help us by submitting an issue to our GitHub Repository . Including an issue reproduction (via CodePen, JsBin, Plunkr, etc.) is the absolute best way to help the team quickly diagnose the problem. Screenshots are also helpful. You can help the team even more and submit a Pull Request with a fix. Want a Feature? You can request a new feature by submitting an issue to our GitHub Repository . If you would like to implement a new feature, please submit an issue with a proposal for your work first, to be sure that we can use it. Please consider what kind of change it is: For a Major Feature , first open an issue and outline your proposal so that it can be discussed. This will also allow us to better coordinate our efforts, prevent duplication of work, and help you to craft the change so that it is successfully accepted into the project. Small Features can be crafted and directly submitted as a Pull Request . Submitting an Issue Before you submit an issue, search the archive, maybe your question was already answered. If your issue appears to be a bug, and hasn't been reported, open a new issue. Help us to maximize the effort we can spend fixing issues and adding new features by not reporting duplicate issues. Providing the following information will increase the chances of your issue being dealt with quickly: Overview of the Issue - if an error is being thrown a non-minified stack trace helps Angular and Material Versions - which versions of Angular and Material are affected (e.g. 2.0.0-alpha.53) Motivation for or Use Case - explain what are you trying to do and why the current behavior is a bug for you Browsers and Operating System - is this a problem with all browsers? Reproduce the Error - provide a live example (using CodePen , JsBin , Plunker , etc.) or a unambiguous set of steps Screenshots - Due to the visual nature of Angular Material, screenshots can help the team triage issues far more quickly than a text description. Related Issues - has a similar issue been reported before? Suggest a Fix - if you can't fix the bug yourself, perhaps you can point to what might be causing the problem (line of code or commit) You can file new issues by providing the above information here . Submitting a Pull Request (PR) Before you submit your Pull Request (PR) consider the following guidelines: Search GitHub for an open or closed PR that relates to your submission. You don't want to duplicate effort. Please sign our Contributor License Agreement (CLA) before sending PRs. We cannot accept code without this. Make your changes in a new git branch: shell git checkout -b my-fix-branch master Create your patch, including appropriate test cases . Follow our Coding Rules . Test your changes with our supported browsers and screen readers. Run the full Angular Material test suite, as described in the developer documentation , and ensure that all tests pass. Commit your changes using a descriptive commit message that follows our commit message conventions . Adherence to these conventions is necessary because release notes are automatically generated from these messages. shell git commit -a Note: the optional commit -a command line option will automatically \"add\" and \"rm\" edited files. Push your branch to GitHub: shell git push my-fork my-fix-branch In GitHub, send a pull request to material2:master . If we suggest changes then: Make the required updates. Re-run the Angular Material test suites to ensure tests are still passing. Rebase your branch and force push to your GitHub repository (this will update your Pull Request): shell git rebase master -i git push -f That's it! Thank you for your contribution! After your pull request is merged After your pull request is merged, you can safely delete your branch and pull the changes from the main (upstream) repository: Delete the remote branch on GitHub either through the GitHub web UI or your local shell as follows: shell git push my-fork --delete my-fix-branch Check out the master branch: shell git checkout master -f Delete the local branch: shell git branch -D my-fix-branch Update your master with the latest upstream version: shell git pull --ff upstream master Coding Rules To ensure consistency throughout the source code, keep these rules in mind as you are working: All features or bug fixes must be tested by one or more specs (unit-tests). All public API methods must be documented . (Details TBD). We follow Google's JavaScript Style Guide , but wrap all code at 100 characters . Commit Message Guidelines We have very precise rules over how our git commit messages can be formatted. This leads to more readable messages that are easy to follow when looking through the project history . But also, we use the git commit messages to generate the Angular Material change log . Commit Message Format Each commit message consists of a header , a body and a footer . The header has a special format that includes a type , a scope and a subject : type ( scope ): subject BLANK LINE body BLANK LINE footer The header is mandatory and the scope of the header is optional. Any line of the commit message cannot be longer 100 characters! This allows the message to be easier to read on GitHub as well as in various git tools. Revert If the commit reverts a previous commit, it should begin with revert: , followed by the header of the reverted commit. In the body it should say: This reverts commit hash . , where the hash is the SHA of the commit being reverted. Type Must be one of the following: feat : A new feature fix : A bug fix docs : Documentation only changes style : Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc) refactor : A code change that neither fixes a bug nor adds a feature perf : A code change that improves performance test : Adding missing tests or correcting existing tests build : Changes that affect the build system, CI configuration or external dependencies (example scopes: gulp, broccoli, npm) chore : Other changes that don't modify src or test files Scope The scope could be anything specifying place of the commit change. For example datepicker , dialog , etc. Subject The subject contains succinct description of the change: use the imperative, present tense: \"change\" not \"changed\" nor \"changes\" don't capitalize first letter no dot (.) at the end Body Just as in the subject , use the imperative, present tense: \"change\" not \"changed\" nor \"changes\". The body should include the motivation for the change and contrast this with previous behavior. Footer The footer should contain any information about Breaking Changes and is also the place to reference GitHub issues that this commit Closes . Breaking Changes should start with the word BREAKING CHANGE: with a space or two newlines. The rest of the commit message is then used for this. A detailed explanation can be found in this document . Signing the CLA Please sign our Contributor License Agreement (CLA) before sending pull requests. For any code changes to be accepted, the CLA must be signed. It's a quick process, we promise! For individuals we have a simple click-through form . For corporations we'll need you to print, sign and one of scan+email, fax or mail the form .","title":"4-CONTRIBUTING"},{"location":"site-files/project/4-CONTRIBUTING/#contributing-to-angular-material","text":"We would love for you to contribute to Angular Material and help make it ever better! As a contributor, here are the guidelines we would like you to follow: Code of Conduct Question or Problem? Issues and Bugs Feature Requests Submission Guidelines Coding Rules Commit Message Guidelines Signing the CLA","title":"Contributing to Angular Material"},{"location":"site-files/project/4-CONTRIBUTING/#after-your-pull-request-is-merged","text":"After your pull request is merged, you can safely delete your branch and pull the changes from the main (upstream) repository: Delete the remote branch on GitHub either through the GitHub web UI or your local shell as follows: shell git push my-fork --delete my-fix-branch Check out the master branch: shell git checkout master -f Delete the local branch: shell git branch -D my-fix-branch Update your master with the latest upstream version: shell git pull --ff upstream master","title":"After your pull request is merged"},{"location":"site-files/project/4-CONTRIBUTING/#commit-message-format","text":"Each commit message consists of a header , a body and a footer . The header has a special format that includes a type , a scope and a subject : type ( scope ): subject BLANK LINE body BLANK LINE footer The header is mandatory and the scope of the header is optional. Any line of the commit message cannot be longer 100 characters! This allows the message to be easier to read on GitHub as well as in various git tools.","title":"Commit Message Format"},{"location":"site-files/project/4-CONTRIBUTING/#revert","text":"If the commit reverts a previous commit, it should begin with revert: , followed by the header of the reverted commit. In the body it should say: This reverts commit hash . , where the hash is the SHA of the commit being reverted.","title":"Revert"},{"location":"site-files/project/4-CONTRIBUTING/#type","text":"Must be one of the following: feat : A new feature fix : A bug fix docs : Documentation only changes style : Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc) refactor : A code change that neither fixes a bug nor adds a feature perf : A code change that improves performance test : Adding missing tests or correcting existing tests build : Changes that affect the build system, CI configuration or external dependencies (example scopes: gulp, broccoli, npm) chore : Other changes that don't modify src or test files","title":"Type"},{"location":"site-files/project/4-CONTRIBUTING/#scope","text":"The scope could be anything specifying place of the commit change. For example datepicker , dialog , etc.","title":"Scope"},{"location":"site-files/project/4-CONTRIBUTING/#subject","text":"The subject contains succinct description of the change: use the imperative, present tense: \"change\" not \"changed\" nor \"changes\" don't capitalize first letter no dot (.) at the end","title":"Subject"},{"location":"site-files/project/4-CONTRIBUTING/#body","text":"Just as in the subject , use the imperative, present tense: \"change\" not \"changed\" nor \"changes\". The body should include the motivation for the change and contrast this with previous behavior.","title":"Body"},{"location":"site-files/project/4-CONTRIBUTING/#footer","text":"The footer should contain any information about Breaking Changes and is also the place to reference GitHub issues that this commit Closes . Breaking Changes should start with the word BREAKING CHANGE: with a space or two newlines. The rest of the commit message is then used for this. A detailed explanation can be found in this document .","title":"Footer"},{"location":"site-files/project/5-CODE_REVIEWS/","text":"Code reviews for Angular Material Before any coding begins on new, large, or breaking work, a design discussion should take place. All code changes require a review and approval. All behaviors should be covered by unit tests in the same PR. Large changes should be accompanied by corresponding e2e tests in the same PR. Authors should attempt to keep PRs to 200 - 300 line changes. Workflow The code author sends a PR for review. This request should include: A high-level description of the change being made. Links to any relevant issues. Screenshots (for visual changes or new additions) Reviews provide comments and the author responds / makes changes. Repeat until LGTM. One or more of the reviewers applies the \"LGTM\" label. Once the LGTM label is applied, either the author or the reviewer can add the \"merge-ready\" label to indicate that the PR is ready to be merged. The party responsible for merging PRs will do so. How PRs are merged The team has a weekly rotation for the \"caretaker\" who is responsible for merging PRs. Before being merged, the caretaker runs PRs through Google's internal presubmit system. This process helps greatly in keeping the library stable by running against the tests of many applications inside of Google. Due to the volume of tests involved, this process means that there can be some delay between a PR being approved and it being merged. The \"merge safe\" label means that the change doesn't affect the library itself (or the dev-app), and thus can be merged without this extra presubmit. The \"presubmit failure\" label means that the PR has encountered some failure during presubmit and needs further investigation by the team.","title":"5-CODE_REVIEWS"},{"location":"site-files/project/5-CODE_REVIEWS/#code-reviews-for-angular-material","text":"Before any coding begins on new, large, or breaking work, a design discussion should take place. All code changes require a review and approval. All behaviors should be covered by unit tests in the same PR. Large changes should be accompanied by corresponding e2e tests in the same PR. Authors should attempt to keep PRs to 200 - 300 line changes.","title":"Code reviews for Angular Material"},{"location":"site-files/project/5-CODE_REVIEWS/#workflow","text":"The code author sends a PR for review. This request should include: A high-level description of the change being made. Links to any relevant issues. Screenshots (for visual changes or new additions) Reviews provide comments and the author responds / makes changes. Repeat until LGTM. One or more of the reviewers applies the \"LGTM\" label. Once the LGTM label is applied, either the author or the reviewer can add the \"merge-ready\" label to indicate that the PR is ready to be merged. The party responsible for merging PRs will do so.","title":"Workflow"},{"location":"site-files/project/5-CODE_REVIEWS/#how-prs-are-merged","text":"The team has a weekly rotation for the \"caretaker\" who is responsible for merging PRs. Before being merged, the caretaker runs PRs through Google's internal presubmit system. This process helps greatly in keeping the library stable by running against the tests of many applications inside of Google. Due to the volume of tests involved, this process means that there can be some delay between a PR being approved and it being merged. The \"merge safe\" label means that the change doesn't affect the library itself (or the dev-app), and thus can be merged without this extra presubmit. The \"presubmit failure\" label means that the PR has encountered some failure during presubmit and needs further investigation by the team.","title":"How PRs are merged"},{"location":"site-files/project/6-build-notes/","text":"In order to ensure our source maps trace back properly (and code size analysis tools can use these maps), we have made some changes to our build process. These changes will align with angular/angular's build process while we wait to update to Angular 5.x. Instead of downleveling to ES2015, creating a Rollup bundle, then transpiling that bundle down to ES5, we now downlevel to both ES2015 and ES5, then create separate Rollup bundles for each. Note: We have to use NGC for both ES2015 and ES5 downleveling (rather than using TSC for the second pass and copying over flat files) because TSC generates decorator code that build-optimizer is not designed to support. For now, decorators must be passed through NGC. We are removing sorcery until we can upgrade tsickle and ngc to latest. Our versions of these break when mapping all the way back to TS. (temporary) We have to add separate tsconfigs for transpiling to ES5 because our version of ngc doesn't allow overrides. When we update to compiler-cli 5.x, we should be able to remove these files. (temporary)","title":"6-build-notes"},{"location":"site-files/project/7-README/","text":"Angular Material The sources for this package are in the main Angular Material repo. Please file issues and pull requests against that repo. License: MIT","title":"7-README"},{"location":"site-files/project/7-README/#angular-material","text":"The sources for this package are in the main Angular Material repo. Please file issues and pull requests against that repo. License: MIT","title":"Angular Material"},{"location":"site-files/project/8-tree/","text":"The cdk-tree enables developers to build a customized tree experience for structured data. The cdk-tree provides a foundation to build other features such as filtering on top of tree. For a Material Design styled tree, see mat-tree which builds on top of the cdk-tree . There are two types of trees: flat tree and nested Tree. The DOM structures are different for these two types of trees. Flat tree In a flat tree, the hierarchy is flattened; nodes are not rendered inside of each other, but instead are rendered as siblings in sequence. An instance of TreeFlattener is used to generate the flat list of items from hierarchical data. The \"level\" of each tree node is read through the getLevel method of the TreeControl ; this level can be used to style the node such that it is indented to the appropriate level. cdk-tree cdk-tree-node parent node /cdk-tree-node cdk-tree-node -- child node1 /cdk-tree-node cdk-tree-node -- child node2 /cdk-tree-node /cdk-tree Flat trees are generally easier to style and inspect. They are also more friendly to scrolling variations, such as infinite or virtual scrolling. Nested tree In nested tree, children nodes are placed inside their parent node in DOM. The parent node contains a node outlet into which children are projected. cdk-tree cdk-nested-tree-node parent node cdk-nested-tree-node -- child node1 /cdk-nested-tree-node cdk-nested-tree-node -- child node2 /cdk-nested-tree-node /cdk-nested-tree-node /cdk-tree Nested trees are easier to work with when hierarchical relationships are visually represented in ways that would be difficult to accomplish with flat nodes. Using the CDK tree Writing your tree template The only thing you need to define is the tree node template. There are two types of tree nodes, cdk-tree-node for flat tree and cdk-tree-nested-node for nested tree . The tree node template defines the look of the tree node, expansion/collapsing control and the structure for nested children nodes. A node definition is specified via any element with cdkNodeDef . This directive exports the node data to be used in any bindings in the node template. cdk-tree-node *cdkNodeDef= let node {{node.key}}: {{node.value}} /cdk-tree-node Flat tree node template Flat tree uses each node's level to render the hierarchy of the nodes. The \"indent\" for a given node is accomplished by adding spacing to each node based on its level. Spacing can be added either by applying the cdkNodePadding directive or by applying custom styles. Nested tree node template When using nested tree nodes, the node template must contain a cdkTreeNodeOutlet , which marks where the children of the node will be rendered. cdk-nested-tree-node *cdkNodeDef= let node {{node.value}} ng-container cdkTreeNodeOutlet /ng-container /cdk-nested-tree-node Adding expand/collapse A cdkTreeNodeToggle can be added in the tree node template to expand/collapse the tree node. The toggle toggles the expand/collapse functions in TreeControl and is able to expand/collapse a tree node recursively by setting [cdkTreeNodeToggleRecursive] to true. cdk-tree-node *cdkNodeDef= let node cdkTreeNodeToggle [cdkTreeNodeToggleRecursive]= true {{node.value}} /cdk-tree-node The toggle can be placed anywhere in the tree node, and is only toggled by click action. For best accessibility, cdkTreeNodeToggle should be on a button element and have an appropriate aria-label . cdk-tree-node *cdkNodeDef= let node button cdkTreeNodeToggle aria-label= toggle tree node [cdkTreeNodeToggleRecursive]= true mat-icon expand /mat-icon /button {{node.value}} /cdk-tree-node Padding (Flat tree only) The cdkTreeNodePadding can be placed in a flat tree's node template to display the level information of a flat tree node. cdk-tree-node *cdkNodeDef= let node cdkNodePadding {{node.value}} /cdk-tree-node Nested tree does not need this padding since padding can be easily added to the hierarchy structure in DOM. Conditional template The tree may include multiple node templates, where a template is chosen for a particular data node via the when predicate of the template. cdk-tree-node *cdkNodeDef= let node cdkTreeNodePadding {{node.value}} /cdk-tree-node cdk-tree-node *cdkNodeDef= let node; when: isSpecial cdkTreeNodePadding [ A special node {{node.value}} ] /cdk-tree-node Data Source Connecting the tree to a data source Similar to cdk-table , data is provided to the tree through a DataSource . When the tree receives a DataSource it will call its connect() method which returns an observable that emits an array of data. Whenever the data source emits data to this stream, the tree will render an update. Because the data source provides this stream, it bears the responsibility of toggling tree updates. This can be based on anything: tree node expansion change, websocket connections, user interaction, model updates, time-based intervals, etc. Flat tree The flat tree data source is responsible for the node expansion/collapsing events, since when the expansion status changes, the data nodes feed to the tree are changed. A new list of visible nodes should be sent to tree component based on current expansion status. Nested tree The data source for nested tree has an option to leave the node expansion/collapsing event for each tree node component to handle. trackBy To improve performance, a trackBy function can be provided to the tree similar to Angular\u2019s ngFor trackBy . This informs the tree how to uniquely identify nodes to track how the data changes with each update. cdk-tree [dataSource]= dataSource [treeControl]= treeControl [trackBy]= trackByFn","title":"8-tree"},{"location":"site-files/project/8-tree/#flat-tree","text":"In a flat tree, the hierarchy is flattened; nodes are not rendered inside of each other, but instead are rendered as siblings in sequence. An instance of TreeFlattener is used to generate the flat list of items from hierarchical data. The \"level\" of each tree node is read through the getLevel method of the TreeControl ; this level can be used to style the node such that it is indented to the appropriate level. cdk-tree cdk-tree-node parent node /cdk-tree-node cdk-tree-node -- child node1 /cdk-tree-node cdk-tree-node -- child node2 /cdk-tree-node /cdk-tree Flat trees are generally easier to style and inspect. They are also more friendly to scrolling variations, such as infinite or virtual scrolling.","title":"Flat tree"},{"location":"site-files/project/8-tree/#nested-tree","text":"In nested tree, children nodes are placed inside their parent node in DOM. The parent node contains a node outlet into which children are projected. cdk-tree cdk-nested-tree-node parent node cdk-nested-tree-node -- child node1 /cdk-nested-tree-node cdk-nested-tree-node -- child node2 /cdk-nested-tree-node /cdk-nested-tree-node /cdk-tree Nested trees are easier to work with when hierarchical relationships are visually represented in ways that would be difficult to accomplish with flat nodes.","title":"Nested tree"},{"location":"site-files/project/8-tree/#using-the-cdk-tree","text":"","title":"Using the CDK tree"},{"location":"site-files/project/8-tree/#writing-your-tree-template","text":"The only thing you need to define is the tree node template. There are two types of tree nodes, cdk-tree-node for flat tree and cdk-tree-nested-node for nested tree . The tree node template defines the look of the tree node, expansion/collapsing control and the structure for nested children nodes. A node definition is specified via any element with cdkNodeDef . This directive exports the node data to be used in any bindings in the node template. cdk-tree-node *cdkNodeDef= let node {{node.key}}: {{node.value}} /cdk-tree-node","title":"Writing your tree template"},{"location":"site-files/project/8-tree/#flat-tree-node-template","text":"Flat tree uses each node's level to render the hierarchy of the nodes. The \"indent\" for a given node is accomplished by adding spacing to each node based on its level. Spacing can be added either by applying the cdkNodePadding directive or by applying custom styles.","title":"Flat tree node template"},{"location":"site-files/project/8-tree/#nested-tree-node-template","text":"When using nested tree nodes, the node template must contain a cdkTreeNodeOutlet , which marks where the children of the node will be rendered. cdk-nested-tree-node *cdkNodeDef= let node {{node.value}} ng-container cdkTreeNodeOutlet /ng-container /cdk-nested-tree-node","title":"Nested tree node template"},{"location":"site-files/project/8-tree/#adding-expandcollapse","text":"A cdkTreeNodeToggle can be added in the tree node template to expand/collapse the tree node. The toggle toggles the expand/collapse functions in TreeControl and is able to expand/collapse a tree node recursively by setting [cdkTreeNodeToggleRecursive] to true. cdk-tree-node *cdkNodeDef= let node cdkTreeNodeToggle [cdkTreeNodeToggleRecursive]= true {{node.value}} /cdk-tree-node The toggle can be placed anywhere in the tree node, and is only toggled by click action. For best accessibility, cdkTreeNodeToggle should be on a button element and have an appropriate aria-label . cdk-tree-node *cdkNodeDef= let node button cdkTreeNodeToggle aria-label= toggle tree node [cdkTreeNodeToggleRecursive]= true mat-icon expand /mat-icon /button {{node.value}} /cdk-tree-node","title":"Adding expand/collapse"},{"location":"site-files/project/8-tree/#padding-flat-tree-only","text":"The cdkTreeNodePadding can be placed in a flat tree's node template to display the level information of a flat tree node. cdk-tree-node *cdkNodeDef= let node cdkNodePadding {{node.value}} /cdk-tree-node Nested tree does not need this padding since padding can be easily added to the hierarchy structure in DOM.","title":"Padding (Flat tree only)"},{"location":"site-files/project/8-tree/#conditional-template","text":"The tree may include multiple node templates, where a template is chosen for a particular data node via the when predicate of the template. cdk-tree-node *cdkNodeDef= let node cdkTreeNodePadding {{node.value}} /cdk-tree-node cdk-tree-node *cdkNodeDef= let node; when: isSpecial cdkTreeNodePadding [ A special node {{node.value}} ] /cdk-tree-node","title":"Conditional template"},{"location":"site-files/project/8-tree/#data-source","text":"","title":"Data Source"},{"location":"site-files/project/8-tree/#connecting-the-tree-to-a-data-source","text":"Similar to cdk-table , data is provided to the tree through a DataSource . When the tree receives a DataSource it will call its connect() method which returns an observable that emits an array of data. Whenever the data source emits data to this stream, the tree will render an update. Because the data source provides this stream, it bears the responsibility of toggling tree updates. This can be based on anything: tree node expansion change, websocket connections, user interaction, model updates, time-based intervals, etc.","title":"Connecting the tree to a data source"},{"location":"site-files/project/8-tree/#flat-tree_1","text":"The flat tree data source is responsible for the node expansion/collapsing events, since when the expansion status changes, the data nodes feed to the tree are changed. A new list of visible nodes should be sent to tree component based on current expansion status.","title":"Flat tree"},{"location":"site-files/project/8-tree/#nested-tree_1","text":"The data source for nested tree has an option to leave the node expansion/collapsing event for each tree node component to handle.","title":"Nested tree"},{"location":"site-files/project/8-tree/#trackby","text":"To improve performance, a trackBy function can be provided to the tree similar to Angular\u2019s ngFor trackBy . This informs the tree how to uniquely identify nodes to track how the data changes with each update. cdk-tree [dataSource]= dataSource [treeControl]= treeControl [trackBy]= trackByFn","title":"trackBy"},{"location":"site-files/project/9-keycodes/","text":"KeyCodes Commonly used keycode constants. Example import {Directive} from '@angular/core'; import {UP_ARROW, DOWN_ARROW, LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes'; @Directive({ selector: '[count-arrows]' host: { (keypress): 'handleKeyPress($event)' } }) export class ArrowCounterDirective { arrowPressCount = 0; handleKeyPress(event: KeyboardEvent) { if ([UP_ARROW, DOWN_ARROW, LEFT_ARROW, RIGHT_ARROW].includes(event.keyCode)) { this.arrowPresscount++; } } }","title":"9-keycodes"},{"location":"site-files/project/9-keycodes/#keycodes","text":"Commonly used keycode constants.","title":"KeyCodes"},{"location":"site-files/project/9-keycodes/#example","text":"import {Directive} from '@angular/core'; import {UP_ARROW, DOWN_ARROW, LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes'; @Directive({ selector: '[count-arrows]' host: { (keypress): 'handleKeyPress($event)' } }) export class ArrowCounterDirective { arrowPressCount = 0; handleKeyPress(event: KeyboardEvent) { if ([UP_ARROW, DOWN_ARROW, LEFT_ARROW, RIGHT_ARROW].includes(event.keyCode)) { this.arrowPresscount++; } } }","title":"Example"},{"location":"site-files/source/0-README/","text":"Please see the official documentation at https://material.angular.io/components/component/tabs","title":"0-README"},{"location":"site-files/source/1-tabs/","text":"Angular Material tabs organize content into separate views where only one view can be visible at a time. Each tab's label is shown in the tab header and the active tab's label is designated with the animated ink bar. When the list of tab labels exceeds the width of the header, pagination controls appear to let the user scroll left and right across the labels. The active tab may be set using the selectedIndex input or when the user selects one of the tab labels in the header. Events The selectedTabChange output event is emitted when the active tab changes. The focusChange output event is emitted when the user puts focus on any of the tab labels in the header, usually through keyboard navigation. Labels If a tab's label is only text then the simple tab-group API can be used. mat-tab-group mat-tab label= One h1 Some tab content /h1 p ... /p /mat-tab mat-tab label= Two h1 Some more tab content /h1 p ... /p /mat-tab /mat-tab-group For more complex labels, add a template with the mat-tab-label directive inside the mat-tab . mat-tab-group mat-tab ng-template mat-tab-label The em best /em pasta /ng-template h1 Best pasta restaurants /h1 p ... /p /mat-tab mat-tab ng-template mat-tab-label mat-icon thumb_down /mat-icon The worst sushi /ng-template h1 Terrible sushi restaurants /h1 p ... /p /mat-tab /mat-tab-group Dynamic Height By default, the tab group will not change its height to the height of the currently active tab. To change this, set the dynamicHeight input to true. The tab body will animate its height according to the height of the active tab. Tabs and navigation While mat-tab-group is used to switch between views within a single route, nav mat-tab-nav-bar provides a tab-like UI for navigating between routes. nav mat-tab-nav-bar a mat-tab-link *ngFor= let link of navLinks [routerLink]= link.path routerLinkActive #rla= routerLinkActive [active]= rla.isActive {{link.label}} /a /nav router-outlet /router-outlet The tab-nav-bar is not tied to any particular router; it works with normal a elements and uses the active property to determine which tab is currently active. The corresponding router-outlet can be placed anywhere in the view. Lazy Loading By default, the tab contents are eagerly loaded. Eagerly loaded tabs will initalize the child components but not inject them into the DOM until the tab is activated. If the tab contains several complex child components or the tab's contents rely on DOM calculations during initialization, it is advised to lazy load the tab's content. Tab contents can be lazy loaded by declaring the body in a ng-template with the matTabContent attribute. mat-tab-group mat-tab label= First ng-template matTabContent The First Content /ng-template /mat-tab mat-tab label= Second ng-template matTabContent The Second Content /ng-template /mat-tab /mat-tab-group Label alignment If you want to align the tab labels in the center or towards the end of the container, you can do so using the [mat-align-tabs] attribute. Controlling the tab animation You can control the duration of the tabs' animation using the animationDuration input. If you want to disable the animation completely, you can do so by setting the properties to 0ms . The duration can be configured globally using the MAT_TABS_CONFIG injection token. Accessibility Tabs without text or labels should be given a meaningful label via aria-label or aria-labelledby . For MatTabNav , the nav element should have a label as well. Keyboard interaction Shortcut Action LEFT_ARROW Move focus to previous tab RIGHT_ARROW Move focus to next tab HOME Move focus to first tab END Move focus to last tab SPACE or ENTER Switch to focused tab","title":"1-tabs"},{"location":"site-files/source/1-tabs/#events","text":"The selectedTabChange output event is emitted when the active tab changes. The focusChange output event is emitted when the user puts focus on any of the tab labels in the header, usually through keyboard navigation.","title":"Events"},{"location":"site-files/source/1-tabs/#labels","text":"If a tab's label is only text then the simple tab-group API can be used. mat-tab-group mat-tab label= One h1 Some tab content /h1 p ... /p /mat-tab mat-tab label= Two h1 Some more tab content /h1 p ... /p /mat-tab /mat-tab-group For more complex labels, add a template with the mat-tab-label directive inside the mat-tab . mat-tab-group mat-tab ng-template mat-tab-label The em best /em pasta /ng-template h1 Best pasta restaurants /h1 p ... /p /mat-tab mat-tab ng-template mat-tab-label mat-icon thumb_down /mat-icon The worst sushi /ng-template h1 Terrible sushi restaurants /h1 p ... /p /mat-tab /mat-tab-group","title":"Labels"},{"location":"site-files/source/1-tabs/#dynamic-height","text":"By default, the tab group will not change its height to the height of the currently active tab. To change this, set the dynamicHeight input to true. The tab body will animate its height according to the height of the active tab.","title":"Dynamic Height"},{"location":"site-files/source/1-tabs/#tabs-and-navigation","text":"While mat-tab-group is used to switch between views within a single route, nav mat-tab-nav-bar provides a tab-like UI for navigating between routes. nav mat-tab-nav-bar a mat-tab-link *ngFor= let link of navLinks [routerLink]= link.path routerLinkActive #rla= routerLinkActive [active]= rla.isActive {{link.label}} /a /nav router-outlet /router-outlet The tab-nav-bar is not tied to any particular router; it works with normal a elements and uses the active property to determine which tab is currently active. The corresponding router-outlet can be placed anywhere in the view.","title":"Tabs and navigation"},{"location":"site-files/source/1-tabs/#lazy-loading","text":"By default, the tab contents are eagerly loaded. Eagerly loaded tabs will initalize the child components but not inject them into the DOM until the tab is activated. If the tab contains several complex child components or the tab's contents rely on DOM calculations during initialization, it is advised to lazy load the tab's content. Tab contents can be lazy loaded by declaring the body in a ng-template with the matTabContent attribute. mat-tab-group mat-tab label= First ng-template matTabContent The First Content /ng-template /mat-tab mat-tab label= Second ng-template matTabContent The Second Content /ng-template /mat-tab /mat-tab-group","title":"Lazy Loading"},{"location":"site-files/source/1-tabs/#label-alignment","text":"If you want to align the tab labels in the center or towards the end of the container, you can do so using the [mat-align-tabs] attribute.","title":"Label alignment"},{"location":"site-files/source/1-tabs/#controlling-the-tab-animation","text":"You can control the duration of the tabs' animation using the animationDuration input. If you want to disable the animation completely, you can do so by setting the properties to 0ms . The duration can be configured globally using the MAT_TABS_CONFIG injection token.","title":"Controlling the tab animation"},{"location":"site-files/source/1-tabs/#accessibility","text":"Tabs without text or labels should be given a meaningful label via aria-label or aria-labelledby . For MatTabNav , the nav element should have a label as well.","title":"Accessibility"},{"location":"site-files/source/1-tabs/#keyboard-interaction","text":"Shortcut Action LEFT_ARROW Move focus to previous tab RIGHT_ARROW Move focus to next tab HOME Move focus to first tab END Move focus to last tab SPACE or ENTER Switch to focused tab","title":"Keyboard interaction"},{"location":"site-files/source/10-README/","text":"Please see the official documentation at https://material.angular.io/components/component/card","title":"10-README"},{"location":"site-files/source/11-README/","text":"Core library code for other @angular/material components.","title":"11-README"},{"location":"site-files/source/12-ripple/","text":"Connect user input to screen reactions by using ripples to both indicate the point of touch, and to confirm that touch input was received. For touch or mouse, this occurs at the point of contact. The matRipple attribute directive defines an area in which a ripple animates on user interaction. div matRipple [matRippleColor]= myColor ng-content /ng-content /div By default, a ripple is activated when the host element of the matRipple directive receives mouse or touch events. Upon being pressed, a ripple will begin fading in from the point of contact, radiating to cover the host element. Each ripple will fade out only upon release of the mouse or touch. Ripples can also be triggered programmatically by getting a reference to the MatRipple directive and calling its launch method. Ripple trigger By default ripples will fade in on interaction with the directive's host element. In some situations, developers may want to show ripples on interaction with some other element, but still want to have the ripples placed in another location. This can be done by specifying the matRippleTrigger option that expects a reference to an HTMLElement . div div matRipple [matRippleTrigger]= trigger class= my-ripple-container !-- This is the ripple container, but not the trigger element for ripples. -- /div div #trigger /div /div Manual ripples Ripples can be shown programmatically by getting a reference to the MatRipple directive. class MyComponent { /** Reference to the directive instance of the ripple. */ @ViewChild(MatRipple) ripple: MatRipple; /** Shows a centered and persistent ripple. */ launchRipple() { const rippleRef = this.ripple.launch({ persistent: true, centered: true }); // Fade out the ripple later. rippleRef.fadeOut(); } } In the example above, no specific coordinates have been passed, because the centered ripple option has been set to true and the coordinates would not matter. Ripples that are being dispatched programmatically can be launched with the persistent option. This means that the ripples will not fade out automatically, and need to be faded out using the RippleRef ( useful for focus indicators ). In case, developers want to launch ripples at specific coordinates within the element, the launch() method also accepts x and y coordinates as parameters. Those coordinates are relative to the ripple container element. const rippleRef = this.ripple.launch(10, 10, {persistent: true}); Global options Developers are able to specify options for all ripples inside of their application. The speed of the ripples can be adjusted and the ripples can be disabled globally as well. Global ripple options can be specified by setting the MAT_RIPPLE_GLOBAL_OPTIONS provider. const globalRippleConfig: RippleGlobalOptions = { disabled: true, animation: { enterDuration: 300, exitDuration: 0 } }; @NgModule({ providers: [ {provide: MAT_RIPPLE_GLOBAL_OPTIONS, useValue: globalRippleConfig} ] }) All available global options can be seen in the RippleGlobalOptions interface. Disabling animation The animation of ripples can be disabled by using the animation global option. If the enterDuration and exitDuration is being set to 0 , ripples will just appear without any animation. This is specifically useful in combination with the disabled global option, because globally disabling ripples won't affect the focus indicator ripples. If someone still wants to disable those ripples for performance reasons, the duration can be set to 0 , to remove the ripple feel. const globalRippleConfig: RippleGlobalOptions = { disabled: true, animation: { enterDuration: 0, exitDuration: 0 } }; Note : Ripples will also have no animation if the NoopAnimationsModule is being used. This also means that the durations in the animation configuration won't be taken into account. Animation behavior There are two different animation behaviors for the fade-out of ripples shown in the Material Design specifications. By default, all ripples will start fading out if the mouse or touch is released and the enter animation completed. The second possible behavior, which is also shown in the specifications, is that ripples start to fade out immediately on mouse or touch release. In some scenarios, developers might prefer that behavior over the default and would like to have the same for Angular Material. This behavior can be activated by specifying the terminateOnPointerUp global ripple option. const globalRippleConfig: RippleGlobalOptions = { terminateOnPointerUp: true }; Updating global options at runtime To change global ripple options at runtime, just inject the MAT_RIPPLE_GLOBAL_OPTIONS provider and update the desired options. There are various ways of injecting the global options. In order to make it easier to inject and update options at runtime, it's recommended to create a service that implements the RippleGlobalOptions interface. @Injectable({providedIn: 'root'}) export class AppGlobalRippleOptions implements RippleGlobalOptions { /** Whether ripples should be disabled globally. */ disabled: boolean = false; } @NgModule({ providers: [ {provide: MAT_RIPPLE_GLOBAL_OPTIONS, useExisting: AppGlobalRippleOptions}, ] }) export class MyModule {...} Now that the global ripple options are set to a service we can inject, the service can be used update any global ripple option at runtime. @Component(...) export class MyComponent { constructor(private _appRippleOptions: AppGlobalRippleOptions) {} disableRipples() { this._appRippleOptions.disabled = true; } }","title":"12-ripple"},{"location":"site-files/source/12-ripple/#ripple-trigger","text":"By default ripples will fade in on interaction with the directive's host element. In some situations, developers may want to show ripples on interaction with some other element, but still want to have the ripples placed in another location. This can be done by specifying the matRippleTrigger option that expects a reference to an HTMLElement . div div matRipple [matRippleTrigger]= trigger class= my-ripple-container !-- This is the ripple container, but not the trigger element for ripples. -- /div div #trigger /div /div","title":"Ripple trigger"},{"location":"site-files/source/12-ripple/#manual-ripples","text":"Ripples can be shown programmatically by getting a reference to the MatRipple directive. class MyComponent { /** Reference to the directive instance of the ripple. */ @ViewChild(MatRipple) ripple: MatRipple; /** Shows a centered and persistent ripple. */ launchRipple() { const rippleRef = this.ripple.launch({ persistent: true, centered: true }); // Fade out the ripple later. rippleRef.fadeOut(); } } In the example above, no specific coordinates have been passed, because the centered ripple option has been set to true and the coordinates would not matter. Ripples that are being dispatched programmatically can be launched with the persistent option. This means that the ripples will not fade out automatically, and need to be faded out using the RippleRef ( useful for focus indicators ). In case, developers want to launch ripples at specific coordinates within the element, the launch() method also accepts x and y coordinates as parameters. Those coordinates are relative to the ripple container element. const rippleRef = this.ripple.launch(10, 10, {persistent: true});","title":"Manual ripples"},{"location":"site-files/source/12-ripple/#global-options","text":"Developers are able to specify options for all ripples inside of their application. The speed of the ripples can be adjusted and the ripples can be disabled globally as well. Global ripple options can be specified by setting the MAT_RIPPLE_GLOBAL_OPTIONS provider. const globalRippleConfig: RippleGlobalOptions = { disabled: true, animation: { enterDuration: 300, exitDuration: 0 } }; @NgModule({ providers: [ {provide: MAT_RIPPLE_GLOBAL_OPTIONS, useValue: globalRippleConfig} ] }) All available global options can be seen in the RippleGlobalOptions interface.","title":"Global options"},{"location":"site-files/source/12-ripple/#disabling-animation","text":"The animation of ripples can be disabled by using the animation global option. If the enterDuration and exitDuration is being set to 0 , ripples will just appear without any animation. This is specifically useful in combination with the disabled global option, because globally disabling ripples won't affect the focus indicator ripples. If someone still wants to disable those ripples for performance reasons, the duration can be set to 0 , to remove the ripple feel. const globalRippleConfig: RippleGlobalOptions = { disabled: true, animation: { enterDuration: 0, exitDuration: 0 } }; Note : Ripples will also have no animation if the NoopAnimationsModule is being used. This also means that the durations in the animation configuration won't be taken into account.","title":"Disabling animation"},{"location":"site-files/source/12-ripple/#animation-behavior","text":"There are two different animation behaviors for the fade-out of ripples shown in the Material Design specifications. By default, all ripples will start fading out if the mouse or touch is released and the enter animation completed. The second possible behavior, which is also shown in the specifications, is that ripples start to fade out immediately on mouse or touch release. In some scenarios, developers might prefer that behavior over the default and would like to have the same for Angular Material. This behavior can be activated by specifying the terminateOnPointerUp global ripple option. const globalRippleConfig: RippleGlobalOptions = { terminateOnPointerUp: true };","title":"Animation behavior"},{"location":"site-files/source/12-ripple/#updating-global-options-at-runtime","text":"To change global ripple options at runtime, just inject the MAT_RIPPLE_GLOBAL_OPTIONS provider and update the desired options. There are various ways of injecting the global options. In order to make it easier to inject and update options at runtime, it's recommended to create a service that implements the RippleGlobalOptions interface. @Injectable({providedIn: 'root'}) export class AppGlobalRippleOptions implements RippleGlobalOptions { /** Whether ripples should be disabled globally. */ disabled: boolean = false; } @NgModule({ providers: [ {provide: MAT_RIPPLE_GLOBAL_OPTIONS, useExisting: AppGlobalRippleOptions}, ] }) export class MyModule {...} Now that the global ripple options are set to a service we can inject, the service can be used update any global ripple option at runtime. @Component(...) export class MyComponent { constructor(private _appRippleOptions: AppGlobalRippleOptions) {} disableRipples() { this._appRippleOptions.disabled = true; } }","title":"Updating global options at runtime"},{"location":"site-files/source/13-autocomplete/","text":"The autocomplete is a normal text input enhanced by a panel of suggested options. Simple autocomplete Start by adding a regular matInput to your template. Let's assume you're using the formControl directive from ReactiveFormsModule to track the value of the input. Note: It is possible to use template-driven forms instead, if you prefer. We use reactive forms in this example because it makes subscribing to changes in the input's value easy. For this example, be sure to import ReactiveFormsModule from @angular/forms into your NgModule . If you are unfamiliar with using reactive forms, you can read more about the subject in the Angular documentation . my-comp.html mat-form-field input type= text matInput [formControl]= myControl /mat-form-field Next, create the autocomplete panel and the options displayed inside it. Each option should be defined by a mat-option tag. Set each option's value property to whatever you'd like the value of the text input to be upon that option's selection. my-comp.html mat-autocomplete mat-option *ngFor= let option of options [value]= option {{ option }} /mat-option /mat-autocomplete Now we'll need to link the text input to its panel. We can do this by exporting the autocomplete panel instance into a local template variable (here we called it \"auto\"), and binding that variable to the input's matAutocomplete property. my-comp.html mat-form-field input type= text matInput [formControl]= myControl [matAutocomplete]= auto /mat-form-field mat-autocomplete #auto= matAutocomplete mat-option *ngFor= let option of options [value]= option {{option}} /mat-option /mat-autocomplete Adding a custom filter At this point, the autocomplete panel should be toggleable on focus and options should be selectable. But if we want our options to filter when we type, we need to add a custom filter. You can filter the options in any way you like based on the text input*. Here we will perform a simple string test on the option value to see if it matches the input value, starting from the option's first letter. We already have access to the built-in valueChanges Observable on the FormControl , so we can simply map the text input's values to the suggested options by passing them through this filter. The resulting Observable, filteredOptions , can be added to the template in place of the options property using the async pipe. Below we are also priming our value change stream with an empty string so that the options are filtered by that value on init (before there are any value changes). *For optimal accessibility, you may want to consider adding text guidance on the page to explain filter criteria. This is especially helpful for screenreader users if you're using a non-standard filter that doesn't limit matches to the beginning of the string. Setting separate control and display values If you want the option's control value (what is saved in the form) to be different than the option's display value (what is displayed in the text field), you'll need to set the displayWith property on your autocomplete element. A common use case for this might be if you want to save your data as an object, but display just one of the option's string properties. To make this work, create a function on your component class that maps the control value to the desired display value. Then bind it to the autocomplete's displayWith property. Automatically highlighting the first option If your use case requires for the first autocomplete option to be highlighted when the user opens the panel, you can do so by setting the autoActiveFirstOption input on the mat-autocomplete component. This behavior can be configured globally using the MAT_AUTOCOMPLETE_DEFAULT_OPTIONS injection token. Attaching the autocomplete panel to a different element By default the autocomplete panel will be attached to your input element, however in some cases you may want it to attach to a different container element. You can change the element that the autocomplete is attached to using the matAutocompleteOrigin directive together with the matAutocompleteConnectedTo input: div class= custom-wrapper-example matAutocompleteOrigin #origin= matAutocompleteOrigin input matInput [formControl]= myControl [matAutocomplete]= auto [matAutocompleteConnectedTo]= origin /div mat-autocomplete #auto= matAutocomplete mat-option *ngFor= let option of options [value]= option {{option}} /mat-option /mat-autocomplete Keyboard interaction DOWN_ARROW : Next option becomes active UP_ARROW : Previous option becomes active ENTER : Selects currently active item ESCAPE : Closes the autocomplete panel Option groups mat-option can be collected into groups using the mat-optgroup element: mat-autocomplete #auto= matAutocomplete mat-optgroup *ngFor= let group of filteredGroups | async [label]= group.name mat-option *ngFor= let option of group.options [value]= option {{option.name}} /mat-option /mat-optgroup /mat-autocomplete Accessibility The input for an autocomplete without text or labels should be given a meaningful label via aria-label or aria-labelledby . The autocomplete trigger is given role=\"combobox\" . The trigger sets aria-owns to the autocomplete's id, and sets aria-activedescendant to the active option's id.","title":"13-autocomplete"},{"location":"site-files/source/13-autocomplete/#simple-autocomplete","text":"Start by adding a regular matInput to your template. Let's assume you're using the formControl directive from ReactiveFormsModule to track the value of the input. Note: It is possible to use template-driven forms instead, if you prefer. We use reactive forms in this example because it makes subscribing to changes in the input's value easy. For this example, be sure to import ReactiveFormsModule from @angular/forms into your NgModule . If you are unfamiliar with using reactive forms, you can read more about the subject in the Angular documentation . my-comp.html mat-form-field input type= text matInput [formControl]= myControl /mat-form-field Next, create the autocomplete panel and the options displayed inside it. Each option should be defined by a mat-option tag. Set each option's value property to whatever you'd like the value of the text input to be upon that option's selection. my-comp.html mat-autocomplete mat-option *ngFor= let option of options [value]= option {{ option }} /mat-option /mat-autocomplete Now we'll need to link the text input to its panel. We can do this by exporting the autocomplete panel instance into a local template variable (here we called it \"auto\"), and binding that variable to the input's matAutocomplete property. my-comp.html mat-form-field input type= text matInput [formControl]= myControl [matAutocomplete]= auto /mat-form-field mat-autocomplete #auto= matAutocomplete mat-option *ngFor= let option of options [value]= option {{option}} /mat-option /mat-autocomplete","title":"Simple autocomplete"},{"location":"site-files/source/13-autocomplete/#adding-a-custom-filter","text":"At this point, the autocomplete panel should be toggleable on focus and options should be selectable. But if we want our options to filter when we type, we need to add a custom filter. You can filter the options in any way you like based on the text input*. Here we will perform a simple string test on the option value to see if it matches the input value, starting from the option's first letter. We already have access to the built-in valueChanges Observable on the FormControl , so we can simply map the text input's values to the suggested options by passing them through this filter. The resulting Observable, filteredOptions , can be added to the template in place of the options property using the async pipe. Below we are also priming our value change stream with an empty string so that the options are filtered by that value on init (before there are any value changes). *For optimal accessibility, you may want to consider adding text guidance on the page to explain filter criteria. This is especially helpful for screenreader users if you're using a non-standard filter that doesn't limit matches to the beginning of the string.","title":"Adding a custom filter"},{"location":"site-files/source/13-autocomplete/#setting-separate-control-and-display-values","text":"If you want the option's control value (what is saved in the form) to be different than the option's display value (what is displayed in the text field), you'll need to set the displayWith property on your autocomplete element. A common use case for this might be if you want to save your data as an object, but display just one of the option's string properties. To make this work, create a function on your component class that maps the control value to the desired display value. Then bind it to the autocomplete's displayWith property.","title":"Setting separate control and display values"},{"location":"site-files/source/13-autocomplete/#automatically-highlighting-the-first-option","text":"If your use case requires for the first autocomplete option to be highlighted when the user opens the panel, you can do so by setting the autoActiveFirstOption input on the mat-autocomplete component. This behavior can be configured globally using the MAT_AUTOCOMPLETE_DEFAULT_OPTIONS injection token.","title":"Automatically highlighting the first option"},{"location":"site-files/source/13-autocomplete/#attaching-the-autocomplete-panel-to-a-different-element","text":"By default the autocomplete panel will be attached to your input element, however in some cases you may want it to attach to a different container element. You can change the element that the autocomplete is attached to using the matAutocompleteOrigin directive together with the matAutocompleteConnectedTo input: div class= custom-wrapper-example matAutocompleteOrigin #origin= matAutocompleteOrigin input matInput [formControl]= myControl [matAutocomplete]= auto [matAutocompleteConnectedTo]= origin /div mat-autocomplete #auto= matAutocomplete mat-option *ngFor= let option of options [value]= option {{option}} /mat-option /mat-autocomplete","title":"Attaching the autocomplete panel to a different element"},{"location":"site-files/source/13-autocomplete/#keyboard-interaction","text":"DOWN_ARROW : Next option becomes active UP_ARROW : Previous option becomes active ENTER : Selects currently active item ESCAPE : Closes the autocomplete panel","title":"Keyboard interaction"},{"location":"site-files/source/13-autocomplete/#option-groups","text":"mat-option can be collected into groups using the mat-optgroup element: mat-autocomplete #auto= matAutocomplete mat-optgroup *ngFor= let group of filteredGroups | async [label]= group.name mat-option *ngFor= let option of group.options [value]= option {{option.name}} /mat-option /mat-optgroup /mat-autocomplete","title":"Option groups"},{"location":"site-files/source/13-autocomplete/#accessibility","text":"The input for an autocomplete without text or labels should be given a meaningful label via aria-label or aria-labelledby . The autocomplete trigger is given role=\"combobox\" . The trigger sets aria-owns to the autocomplete's id, and sets aria-activedescendant to the active option's id.","title":"Accessibility"},{"location":"site-files/source/14-README/","text":"See documentation on material.angular.io .","title":"14-README"},{"location":"site-files/source/15-sort/","text":"The matSort and mat-sort-header are used, respectively, to add sorting state and display to tabular data. Adding sort to table headers To add sorting behavior and styling to a set of table headers, add the mat-sort-header component to each header and provide an id that will identify it. These headers should be contained within a parent element with the matSort directive, which will emit an matSortChange event when the user triggers sorting on the header. Users can trigger the sort header through a mouse click or keyboard action. When this happens, the matSort will emit an matSortChange event that contains the ID of the header triggered and the direction to sort ( asc or desc ). Changing the sort order By default, a sort header starts its sorting at asc and then desc . Triggering the sort header after desc will remove sorting. To reverse the sort order for all headers, set the matSortStart to desc on the matSort directive. To reverse the order only for a specific header, set the start input only on the header instead. To prevent the user from clearing the sort sort state from an already sorted column, set matSortDisableClear to true on the matSort to affect all headers, or set disableClear to true on a specific header. Disabling sorting If you want to prevent the user from changing the sorting order of any column, you can use the matSortDisabled binding on the mat-sort , or the disabled on an single mat-sort-header . Using sort with the mat-table When used on an mat-table header, it is not required to set an mat-sort-header id on because by default it will use the id of the column. Accessibility The aria-label for the sort button can be set in MatSortHeaderIntl .","title":"15-sort"},{"location":"site-files/source/15-sort/#adding-sort-to-table-headers","text":"To add sorting behavior and styling to a set of table headers, add the mat-sort-header component to each header and provide an id that will identify it. These headers should be contained within a parent element with the matSort directive, which will emit an matSortChange event when the user triggers sorting on the header. Users can trigger the sort header through a mouse click or keyboard action. When this happens, the matSort will emit an matSortChange event that contains the ID of the header triggered and the direction to sort ( asc or desc ).","title":"Adding sort to table headers"},{"location":"site-files/source/15-sort/#changing-the-sort-order","text":"By default, a sort header starts its sorting at asc and then desc . Triggering the sort header after desc will remove sorting. To reverse the sort order for all headers, set the matSortStart to desc on the matSort directive. To reverse the order only for a specific header, set the start input only on the header instead. To prevent the user from clearing the sort sort state from an already sorted column, set matSortDisableClear to true on the matSort to affect all headers, or set disableClear to true on a specific header.","title":"Changing the sort order"},{"location":"site-files/source/15-sort/#disabling-sorting","text":"If you want to prevent the user from changing the sorting order of any column, you can use the matSortDisabled binding on the mat-sort , or the disabled on an single mat-sort-header .","title":"Disabling sorting"},{"location":"site-files/source/15-sort/#using-sort-with-the-mat-table","text":"When used on an mat-table header, it is not required to set an mat-sort-header id on because by default it will use the id of the column.","title":"Using sort with the mat-table"},{"location":"site-files/source/15-sort/#accessibility","text":"The aria-label for the sort button can be set in MatSortHeaderIntl .","title":"Accessibility"},{"location":"site-files/source/16-README/","text":"Please see the official documentation at https://material.angular.io/components/component/chips","title":"16-README"},{"location":"site-files/source/17-chips/","text":"mat-chip-list displays a list of values as individual, keyboard accessible, chips. mat-chip-list mat-chip Papadum /mat-chip mat-chip Naan /mat-chip mat-chip Dal /mat-chip /mat-chip-list Unstyled chips By default, mat-chip has Material Design styles applied. For a chip with no styles applied, use mat-basic-chip . You can then customize the chip appearance by adding your own CSS. Hint: mat-basic-chip receives the mat-basic-chip CSS class in addition to the mat-chip class. Selection Chips can be selected via the selected property. Selection can be disabled by setting selectable to false on the mat-chip-list . Whenever the selection state changes, a ChipSelectionChange event will be emitted via (selectionChange) . Disabled chips Individual chips may be disabled by applying the disabled attribute to the chip. When disabled, chips are neither selectable nor focusable. Chip input The MatChipInput directive can be used together with a chip-list to streamline the interaction between the two components. This directive adds chip-specific behaviors to the input element within mat-form-field for adding and removing chips. The input with MatChipInput can be placed inside or outside the chip-list element. An example of chip input placed inside the chip-list element. An example of chip input placed outside the chip-list element. mat-form-field mat-chip-list #chipList mat-chip Chip 1 /mat-chip mat-chip Chip 2 /mat-chip /mat-chip-list input [matChipInputFor]= chipList /mat-form-field An example of chip input with an autocomplete placed inside the chip-list element. Keyboard interaction Users can move through the chips using the arrow keys and select/deselect them with the space. Chips also gain focus when clicked, ensuring keyboard navigation starts at the appropriate chip. Orientation If you want the chips in the list to be stacked vertically, instead of horizontally, you can apply the mat-chip-list-stacked class, as well as the aria-orientation=\"vertical\" attribute: mat-chip-list class= mat-chip-list-stacked aria-orientation= vertical mat-chip Papadum /mat-chip mat-chip Naan /mat-chip mat-chip Dal /mat-chip /mat-chip-list Specifying global configuration defaults Default options for the chips module can be specified using the MAT_CHIPS_DEFAULT_OPTIONS injection token. @NgModule({ providers: [ { provide: MAT_CHIPS_DEFAULT_OPTIONS, useValue: { separatorKeyCodes: [ENTER, COMMA] } } ] }) Theming The selected color of an mat-chip can be changed by using the color property. By default, chips use a neutral background color based on the current theme (light or dark). This can be changed to 'primary' , 'accent' , or 'warn' . Accessibility A chip-list behaves as a role=\"listbox\" , with each chip being a role=\"option\" . The chip input should have a placeholder or be given a meaningful label via aria-label or aria-labelledby .","title":"17-chips"},{"location":"site-files/source/17-chips/#unstyled-chips","text":"By default, mat-chip has Material Design styles applied. For a chip with no styles applied, use mat-basic-chip . You can then customize the chip appearance by adding your own CSS. Hint: mat-basic-chip receives the mat-basic-chip CSS class in addition to the mat-chip class.","title":"Unstyled chips"},{"location":"site-files/source/17-chips/#selection","text":"Chips can be selected via the selected property. Selection can be disabled by setting selectable to false on the mat-chip-list . Whenever the selection state changes, a ChipSelectionChange event will be emitted via (selectionChange) .","title":"Selection"},{"location":"site-files/source/17-chips/#disabled-chips","text":"Individual chips may be disabled by applying the disabled attribute to the chip. When disabled, chips are neither selectable nor focusable.","title":"Disabled chips"},{"location":"site-files/source/17-chips/#chip-input","text":"The MatChipInput directive can be used together with a chip-list to streamline the interaction between the two components. This directive adds chip-specific behaviors to the input element within mat-form-field for adding and removing chips. The input with MatChipInput can be placed inside or outside the chip-list element. An example of chip input placed inside the chip-list element. An example of chip input placed outside the chip-list element. mat-form-field mat-chip-list #chipList mat-chip Chip 1 /mat-chip mat-chip Chip 2 /mat-chip /mat-chip-list input [matChipInputFor]= chipList /mat-form-field An example of chip input with an autocomplete placed inside the chip-list element.","title":"Chip input"},{"location":"site-files/source/17-chips/#keyboard-interaction","text":"Users can move through the chips using the arrow keys and select/deselect them with the space. Chips also gain focus when clicked, ensuring keyboard navigation starts at the appropriate chip.","title":"Keyboard interaction"},{"location":"site-files/source/17-chips/#orientation","text":"If you want the chips in the list to be stacked vertically, instead of horizontally, you can apply the mat-chip-list-stacked class, as well as the aria-orientation=\"vertical\" attribute: mat-chip-list class= mat-chip-list-stacked aria-orientation= vertical mat-chip Papadum /mat-chip mat-chip Naan /mat-chip mat-chip Dal /mat-chip /mat-chip-list","title":"Orientation"},{"location":"site-files/source/17-chips/#specifying-global-configuration-defaults","text":"Default options for the chips module can be specified using the MAT_CHIPS_DEFAULT_OPTIONS injection token. @NgModule({ providers: [ { provide: MAT_CHIPS_DEFAULT_OPTIONS, useValue: { separatorKeyCodes: [ENTER, COMMA] } } ] })","title":"Specifying global configuration defaults"},{"location":"site-files/source/17-chips/#theming","text":"The selected color of an mat-chip can be changed by using the color property. By default, chips use a neutral background color based on the current theme (light or dark). This can be changed to 'primary' , 'accent' , or 'warn' .","title":"Theming"},{"location":"site-files/source/17-chips/#accessibility","text":"A chip-list behaves as a role=\"listbox\" , with each chip being a role=\"option\" . The chip input should have a placeholder or be given a meaningful label via aria-label or aria-labelledby .","title":"Accessibility"},{"location":"site-files/source/18-input/","text":"matInput is a directive that allows native input and textarea elements to work with mat-form-field . input and textarea attributes All of the attributes that can be used with normal input and textarea elements can be used on elements inside mat-form-field as well. This includes Angular directives such as ngModel and formControl . The only limitation is that the type attribute can only be one of the values supported by matInput . Supported input types The following input types can be used with matInput : color date datetime-local email month number password search tel text time url * week Form field features There are a number of mat-form-field features that can be used with any input matInput or textarea matInput . These include error messages, hint text, prefix suffix, and theming. For additional information about these features, see the form field documentation . Placeholder The placeholder is text shown when the mat-form-field label is floating but the input is empty. It is used to give the user an additional hint about what they should type in the input. The placeholder can be specified by setting the placeholder attribute on the input or textarea element. In some cases that mat-form-field may use the placeholder as the label (see the form field label documentation ). Changing when error messages are shown The mat-form-field allows you to associate error messages with your matInput . By default, these error messages are shown when the control is invalid and either the user has interacted with (touched) the element or the parent form has been submitted. If you wish to override this behavior (e.g. to show the error as soon as the invalid control is dirty or when a parent form group is invalid), you can use the errorStateMatcher property of the matInput . The property takes an instance of an ErrorStateMatcher object. An ErrorStateMatcher must implement a single method isErrorState which takes the FormControl for this matInput as well as the parent form and returns a boolean indicating whether errors should be shown. ( true indicating that they should be shown, and false indicating that they should not.) A global error state matcher can be specified by setting the ErrorStateMatcher provider. This applies to all inputs. For convenience, ShowOnDirtyErrorStateMatcher is available in order to globally cause input errors to show when the input is dirty and invalid. @NgModule({ providers: [ {provide: ErrorStateMatcher, useClass: ShowOnDirtyErrorStateMatcher} ] }) Auto-resizing textarea elements textarea elements can be made to automatically resize by using the cdkTextareaAutosize directive available in the CDK. Responding to changes in the autofill state of an input The CDK provides utilities for detecting when an input becomes autofilled and changing the appearance of the autofilled state. Accessibility The matInput directive works with native input to provide an accessible experience. If the containing mat-form-field has a label it will automatically be used as the aria-label for the input . However, if there's no label specified in the form field, aria-label , aria-labelledby or label for=... should be added. Any mat-error and mat-hint are automatically added to the input's aria-describedby list, and aria-invalid is automatically updated based on the input's validity state. Troubleshooting Error: Input type \"...\" isn't supported by matInput This error is thrown when you attempt to set an input's type property to a value that isn't supported by the matInput directive. If you need to use an unsupported input type with mat-form-field consider writing a custom form field control for it.","title":"18-input"},{"location":"site-files/source/18-input/#ltinputgt-and-lttextareagt-attributes","text":"All of the attributes that can be used with normal input and textarea elements can be used on elements inside mat-form-field as well. This includes Angular directives such as ngModel and formControl . The only limitation is that the type attribute can only be one of the values supported by matInput .","title":"&lt;input&gt; and &lt;textarea&gt; attributes"},{"location":"site-files/source/18-input/#supported-ltinputgt-types","text":"The following input types can be used with matInput : color date datetime-local email month number password search tel text time url * week","title":"Supported &lt;input&gt; types"},{"location":"site-files/source/18-input/#form-field-features","text":"There are a number of mat-form-field features that can be used with any input matInput or textarea matInput . These include error messages, hint text, prefix suffix, and theming. For additional information about these features, see the form field documentation .","title":"Form field features"},{"location":"site-files/source/18-input/#placeholder","text":"The placeholder is text shown when the mat-form-field label is floating but the input is empty. It is used to give the user an additional hint about what they should type in the input. The placeholder can be specified by setting the placeholder attribute on the input or textarea element. In some cases that mat-form-field may use the placeholder as the label (see the form field label documentation ).","title":"Placeholder"},{"location":"site-files/source/18-input/#changing-when-error-messages-are-shown","text":"The mat-form-field allows you to associate error messages with your matInput . By default, these error messages are shown when the control is invalid and either the user has interacted with (touched) the element or the parent form has been submitted. If you wish to override this behavior (e.g. to show the error as soon as the invalid control is dirty or when a parent form group is invalid), you can use the errorStateMatcher property of the matInput . The property takes an instance of an ErrorStateMatcher object. An ErrorStateMatcher must implement a single method isErrorState which takes the FormControl for this matInput as well as the parent form and returns a boolean indicating whether errors should be shown. ( true indicating that they should be shown, and false indicating that they should not.) A global error state matcher can be specified by setting the ErrorStateMatcher provider. This applies to all inputs. For convenience, ShowOnDirtyErrorStateMatcher is available in order to globally cause input errors to show when the input is dirty and invalid. @NgModule({ providers: [ {provide: ErrorStateMatcher, useClass: ShowOnDirtyErrorStateMatcher} ] })","title":"Changing when error messages are shown"},{"location":"site-files/source/18-input/#auto-resizing-lttextareagt-elements","text":"textarea elements can be made to automatically resize by using the cdkTextareaAutosize directive available in the CDK.","title":"Auto-resizing &lt;textarea&gt; elements"},{"location":"site-files/source/18-input/#responding-to-changes-in-the-autofill-state-of-an-ltinputgt","text":"The CDK provides utilities for detecting when an input becomes autofilled and changing the appearance of the autofilled state.","title":"Responding to changes in the autofill state of an &lt;input&gt;"},{"location":"site-files/source/18-input/#accessibility","text":"The matInput directive works with native input to provide an accessible experience. If the containing mat-form-field has a label it will automatically be used as the aria-label for the input . However, if there's no label specified in the form field, aria-label , aria-labelledby or label for=... should be added. Any mat-error and mat-hint are automatically added to the input's aria-describedby list, and aria-invalid is automatically updated based on the input's validity state.","title":"Accessibility"},{"location":"site-files/source/18-input/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"site-files/source/18-input/#error-input-type-isnt-supported-by-matinput","text":"This error is thrown when you attempt to set an input's type property to a value that isn't supported by the matInput directive. If you need to use an unsupported input type with mat-form-field consider writing a custom form field control for it.","title":"Error: Input type \"...\" isn't supported by matInput"},{"location":"site-files/source/19-README/","text":"Please see the official documentation at https://material.angular.io/components/component/input","title":"19-README"},{"location":"site-files/source/2-tree/","text":"The mat-tree provides a Material Design styled tree that can be used to display hierarchy data. This tree builds on the foundation of the CDK tree and uses a similar interface for its data source input and template, except that its element and attribute selectors will be prefixed with mat- instead of cdk- . There are two types of trees: Flat tree and nested tree. The DOM structures are different for these two types of trees. Flat tree In a flat tree, the hierarchy is flattened; nodes are not rendered inside of each other, but instead are rendered as siblings in sequence. An instance of TreeFlattener is used to generate the flat list of items from hierarchical data. The \"level\" of each tree node is read through the getLevel method of the TreeControl ; this level can be used to style the node such that it is indented to the appropriate level. mat-tree mat-tree-node parent node /mat-tree-node mat-tree-node -- child node1 /mat-tree-node mat-tree-node -- child node2 /mat-tree-node /mat-tree Flat trees are generally easier to style and inspect. They are also more friendly to scrolling variations, such as infinite or virtual scrolling Nested tree In Nested tree, children nodes are placed inside their parent node in DOM. The parent node has an outlet to keep all the children nodes. mat-tree mat-nested-tree-node parent node mat-nested-tree-node -- child node1 /mat-nested-tree-node mat-nested-tree-node -- child node2 /mat-nested-tree-node /mat-nested-tree-node /mat-tree Nested trees are easier to work with when hierarchical relationships are visually represented in ways that would be difficult to accomplish with flat nodes. Features The mat-tree itself only deals with the rendering of a tree structure. Additional features can be built on top of the tree by adding behavior inside node templates (e.g., padding and toggle). Interactions that affect the rendered data (such as expand/collapse) should be propagated through the table's data source. TreeControl The TreeControl controls the expand/collapse state of tree nodes. Users can expand/collapse a tree node recursively through tree control. For nested tree node, getChildren function need to pass to the NestedTreeControl to make it work recursively. The getChildren function may return an observable of children for a given node, or an array of children. For flattened tree node, getLevel and isExpandable functions need to pass to the FlatTreeControl to make it work recursively. Toggle A matTreeNodeToggle can be added in the tree node template to expand/collapse the tree node. The toggle toggles the expand/collapse functions in TreeControl and is able to expand/collapse a tree node recursively by setting [matTreeNodeToggleRecursive] to true . The toggle can be placed anywhere in the tree node, and is only toggled by click action. Padding (Flat tree only) The matTreeNodePadding can be placed in a flat tree's node template to display the level information of a flat tree node. Nested tree does not need this padding since padding can be easily added to the hierarchy structure in DOM. Accessibility Trees without text or labels should be given a meaningful label via aria-label or aria-labelledby . The aria-readonly defaults to true if it's not set. Tree's role is tree . Parent nodes are given role=\"group\" , while leaf nodes are given role=\"treeitem\" mat-tree does not manage any focus/keyboard interaction on its own. Users can add desired focus/keyboard interactions in their application.","title":"2-tree"},{"location":"site-files/source/2-tree/#flat-tree","text":"In a flat tree, the hierarchy is flattened; nodes are not rendered inside of each other, but instead are rendered as siblings in sequence. An instance of TreeFlattener is used to generate the flat list of items from hierarchical data. The \"level\" of each tree node is read through the getLevel method of the TreeControl ; this level can be used to style the node such that it is indented to the appropriate level. mat-tree mat-tree-node parent node /mat-tree-node mat-tree-node -- child node1 /mat-tree-node mat-tree-node -- child node2 /mat-tree-node /mat-tree Flat trees are generally easier to style and inspect. They are also more friendly to scrolling variations, such as infinite or virtual scrolling","title":"Flat tree"},{"location":"site-files/source/2-tree/#nested-tree","text":"In Nested tree, children nodes are placed inside their parent node in DOM. The parent node has an outlet to keep all the children nodes. mat-tree mat-nested-tree-node parent node mat-nested-tree-node -- child node1 /mat-nested-tree-node mat-nested-tree-node -- child node2 /mat-nested-tree-node /mat-nested-tree-node /mat-tree Nested trees are easier to work with when hierarchical relationships are visually represented in ways that would be difficult to accomplish with flat nodes.","title":"Nested tree"},{"location":"site-files/source/2-tree/#features","text":"The mat-tree itself only deals with the rendering of a tree structure. Additional features can be built on top of the tree by adding behavior inside node templates (e.g., padding and toggle). Interactions that affect the rendered data (such as expand/collapse) should be propagated through the table's data source.","title":"Features"},{"location":"site-files/source/2-tree/#treecontrol","text":"The TreeControl controls the expand/collapse state of tree nodes. Users can expand/collapse a tree node recursively through tree control. For nested tree node, getChildren function need to pass to the NestedTreeControl to make it work recursively. The getChildren function may return an observable of children for a given node, or an array of children. For flattened tree node, getLevel and isExpandable functions need to pass to the FlatTreeControl to make it work recursively.","title":"TreeControl"},{"location":"site-files/source/2-tree/#toggle","text":"A matTreeNodeToggle can be added in the tree node template to expand/collapse the tree node. The toggle toggles the expand/collapse functions in TreeControl and is able to expand/collapse a tree node recursively by setting [matTreeNodeToggleRecursive] to true . The toggle can be placed anywhere in the tree node, and is only toggled by click action.","title":"Toggle"},{"location":"site-files/source/2-tree/#padding-flat-tree-only","text":"The matTreeNodePadding can be placed in a flat tree's node template to display the level information of a flat tree node. Nested tree does not need this padding since padding can be easily added to the hierarchy structure in DOM.","title":"Padding (Flat tree only)"},{"location":"site-files/source/2-tree/#accessibility","text":"Trees without text or labels should be given a meaningful label via aria-label or aria-labelledby . The aria-readonly defaults to true if it's not set. Tree's role is tree . Parent nodes are given role=\"group\" , while leaf nodes are given role=\"treeitem\" mat-tree does not manage any focus/keyboard interaction on its own. Users can add desired focus/keyboard interactions in their application.","title":"Accessibility"},{"location":"site-files/source/20-README/","text":"Please see the official documentation at https://material.angular.io/components/component/progress-bar","title":"20-README"},{"location":"site-files/source/21-progress-bar/","text":"mat-progress-bar is a horizontal progress-bar for indicating progress and activity. Progress mode The progress-bar supports four modes: determinate, indeterminate, buffer and query. Determinate Operations where the percentage of the operation complete is known should use the determinate indicator. This is the default mode and the progress is represented by the value property. Indeterminate Operations where the user is asked to wait while something finishes and it\u2019s not necessary to indicate how long it will take should use the indeterminate indicator. In this mode the value property is ignored. Buffer Operations where the user wants to indicate some activity or loading from the server, use the buffer indicator. In \"buffer\" mode, value determines the progress of the primary bar while the bufferValue is used to show the additional buffering progress. Query For situations where the user wants to indicate pre-loading (until the loading can actually be made), use the query indicator. In \"query\" mode, the progress-bar renders as an inverted \"indeterminate\" bar. Once the response progress is available, the mode should be changed to determinate to convey the progress. In this mode the value property is ignored. Theming The color of a progress-bar can be changed by using the color property. By default, progress-bars use the theme's primary color. This can be changed to 'accent' or 'warn' . Accessibility Each progress bar should be given a meaningful label via aria-label or aria-labelledby .","title":"21-progress-bar"},{"location":"site-files/source/21-progress-bar/#progress-mode","text":"The progress-bar supports four modes: determinate, indeterminate, buffer and query.","title":"Progress mode"},{"location":"site-files/source/21-progress-bar/#determinate","text":"Operations where the percentage of the operation complete is known should use the determinate indicator. This is the default mode and the progress is represented by the value property.","title":"Determinate"},{"location":"site-files/source/21-progress-bar/#indeterminate","text":"Operations where the user is asked to wait while something finishes and it\u2019s not necessary to indicate how long it will take should use the indeterminate indicator. In this mode the value property is ignored.","title":"Indeterminate"},{"location":"site-files/source/21-progress-bar/#buffer","text":"Operations where the user wants to indicate some activity or loading from the server, use the buffer indicator. In \"buffer\" mode, value determines the progress of the primary bar while the bufferValue is used to show the additional buffering progress.","title":"Buffer"},{"location":"site-files/source/21-progress-bar/#query","text":"For situations where the user wants to indicate pre-loading (until the loading can actually be made), use the query indicator. In \"query\" mode, the progress-bar renders as an inverted \"indeterminate\" bar. Once the response progress is available, the mode should be changed to determinate to convey the progress. In this mode the value property is ignored.","title":"Query"},{"location":"site-files/source/21-progress-bar/#theming","text":"The color of a progress-bar can be changed by using the color property. By default, progress-bars use the theme's primary color. This can be changed to 'accent' or 'warn' .","title":"Theming"},{"location":"site-files/source/21-progress-bar/#accessibility","text":"Each progress bar should be given a meaningful label via aria-label or aria-labelledby .","title":"Accessibility"},{"location":"site-files/source/22-slide-toggle/","text":"mat-slide-toggle is an on/off control that can be toggled via clicking or dragging. The slide-toggle behaves similarly to a checkbox, though it does not support an indeterminate state like mat-checkbox . Note: the sliding behavior for this component requires that HammerJS is loaded on the page. Slide-toggle label The slide-toggle label is provided as the content to the mat-slide-toggle element. If you don't want the label to appear next to the slide-toggle, you can use aria-label or aria-labelledby to specify an appropriate label. Use with @angular/forms mat-slide-toggle is compatible with @angular/forms and supports both FormsModule and ReactiveFormsModule . Theming The color of a mat-slide-toggle can be changed by using the color property. By default, slide-toggles use the theme's accent color. This can be changed to 'primary' or 'warn' . Accessibility The mat-slide-toggle uses an internal input type=\"checkbox\" to provide an accessible experience. This internal checkbox receives focus and is automatically labelled by the text content of the mat-slide-toggle element. Slide toggles without text or labels should be given a meaningful label via aria-label or aria-labelledby .","title":"22-slide-toggle"},{"location":"site-files/source/22-slide-toggle/#slide-toggle-label","text":"The slide-toggle label is provided as the content to the mat-slide-toggle element. If you don't want the label to appear next to the slide-toggle, you can use aria-label or aria-labelledby to specify an appropriate label.","title":"Slide-toggle label"},{"location":"site-files/source/22-slide-toggle/#use-with-angularforms","text":"mat-slide-toggle is compatible with @angular/forms and supports both FormsModule and ReactiveFormsModule .","title":"Use with @angular/forms"},{"location":"site-files/source/22-slide-toggle/#theming","text":"The color of a mat-slide-toggle can be changed by using the color property. By default, slide-toggles use the theme's accent color. This can be changed to 'primary' or 'warn' .","title":"Theming"},{"location":"site-files/source/22-slide-toggle/#accessibility","text":"The mat-slide-toggle uses an internal input type=\"checkbox\" to provide an accessible experience. This internal checkbox receives focus and is automatically labelled by the text content of the mat-slide-toggle element. Slide toggles without text or labels should be given a meaningful label via aria-label or aria-labelledby .","title":"Accessibility"},{"location":"site-files/source/23-README/","text":"Please see the official documentation at https://material.angular.io/components/component/slide-toggle","title":"23-README"},{"location":"site-files/source/24-datepicker/","text":"The datepicker allows users to enter a date either through text input, or by choosing a date from the calendar. It is made up of several components and directives that work together. Connecting a datepicker to an input A datepicker is composed of a text input and a calendar pop-up, connected via the matDatepicker property on the text input. input [matDatepicker]= myDatepicker mat-datepicker #myDatepicker /mat-datepicker An optional datepicker toggle button is available. A toggle can be added to the example above: input [matDatepicker]= myDatepicker mat-datepicker-toggle [for]= myDatepicker /mat-datepicker-toggle mat-datepicker #myDatepicker /mat-datepicker This works exactly the same with an input that is part of an mat-form-field and the toggle can easily be used as a prefix or suffix on the material input: mat-form-field input matInput [matDatepicker]= myDatepicker mat-datepicker-toggle matSuffix [for]= myDatepicker /mat-datepicker-toggle mat-datepicker #myDatepicker /mat-datepicker /mat-form-field If you want to customize the icon that is rendered inside the mat-datepicker-toggle , you can do so by using the matDatepickerToggleIcon directive: Setting the calendar starting view The startView property of mat-datepicker can be used to set the view that will show up when the calendar first opens. It can be set to month , year , or multi-year ; by default it will open to month view. The month, year, or range of years that the calendar opens to is determined by first checking if any date is currently selected, if so it will open to the month or year containing that date. Otherwise it will open to the month or year containing today's date. This behavior can be overridden by using the startAt property of mat-datepicker . In this case the calendar will open to the month or year containing the startAt date. Watching the views for changes on selected years and months When a year or a month is selected in multi-year and year views respectively, the yearSelected and monthSelected outputs emit a normalized date representing the chosen year or month. By \"normalized\" we mean that the dates representing years will have their month set to January and their day set to the 1st. Dates representing months will have their day set to the 1st of the month. For example, if mat-datepicker is configured to work with javascript native Date objects, the yearSelected will emit new Date(2017, 0, 1) if the user selects 2017 in multi-year view. Similarly, monthSelected will emit new Date(2017, 1, 1) if the user selects February in year view and the current date value of the connected input was set to something like new Date(2017, MM, dd) when the calendar was opened (the month and day are irrelevant in this case). Notice that the emitted value does not affect the current value in the connected input , which is only bound to the selection made in the month view. So if the end user closes the calendar after choosing a year in multi-view mode (by pressing the ESC key, for example), the selected year, emitted by yearSelected output, will not cause any change in the value of the date in the associated input . The following example uses yearSelected and monthSelected outputs to emulate a month and year picker (if you're not familiar with the usage of MomentDateAdapter and MAT_DATE_FORMATS you can read more about them below in this document to fully understand the example). Setting the selected date The type of values that the datepicker expects depends on the type of DateAdapter provided in your application. The NativeDateAdapter , for example, works directly with plain JavaScript Date objects. When using the MomentDateAdapter , however, the values will all be Moment.js instances. This use of the adapter pattern allows the datepicker component to work with any arbitrary date representation with a custom DateAdapter . See Choosing a date implementation for more information. Depending on the DateAdapter being used, the datepicker may automatically deserialize certain date formats for you as well. For example, both the NativeDateAdapter and MomentDateAdapter allow ISO 8601 strings to be passed to the datepicker and automatically converted to the proper object type. This can be convenient when binding data directly from your backend to the datepicker. However, the datepicker will not accept date strings formatted in user format such as \"1/2/2017\" as this is ambiguous and will mean different things depending on the locale of the browser running the code. As with other types of input , the datepicker works with @angular/forms directives such as formGroup , formControl , ngModel , etc. Changing the datepicker colors The datepicker popup will automatically inherit the color palette ( primary , accent , or warn ) from the mat-form-field it is attached to. If you would like to specify a different palette for the popup you can do so by setting the color property on mat-datepicker . Date validation There are three properties that add date validation to the datepicker input. The first two are the min and max properties. In addition to enforcing validation on the input, these properties will disable all dates on the calendar popup before or after the respective values and prevent the user from advancing the calendar past the month or year (depending on current view) containing the min or max date. The second way to add date validation is using the matDatepickerFilter property of the datepicker input. This property accepts a function of D = boolean (where D is the date type used by the datepicker, see Choosing a date implementation ). A result of true indicates that the date is valid and a result of false indicates that it is not. Again this will also disable the dates on the calendar that are invalid. However, one important difference between using matDatepickerFilter vs using min or max is that filtering out all dates before or after a certain point, will not prevent the user from advancing the calendar past that point. In this example the user can back past 2005, but all of the dates before then will be unselectable. They will not be able to go further back in the calendar than 2000. If they manually type in a date that is before the min, after the max, or filtered out, the input will have validation errors. Each validation property has a different error that can be checked: * A value that violates the min property will have a matDatepickerMin error. * A value that violates the max property will have a matDatepickerMax error. * A value that violates the matDatepickerFilter property will have a matDatepickerFilter error. Input and change events The input's native (input) and (change) events will only trigger due to user interaction with the input element; they will not fire when the user selects a date from the calendar popup. Therefore, the datepicker input also has support for (dateInput) and (dateChange) events. These trigger when the user interacts with either the input or the popup. The (dateInput) event will fire whenever the value changes due to the user typing or selecting a date from the calendar. The (dateChange) event will fire whenever the user finishes typing input (on input blur), or when the user chooses a date from the calendar. Disabling parts of the datepicker As with any standard input , it is possible to disable the datepicker input by adding the disabled property. By default, the mat-datepicker and mat-datepicker-toggle will inherit their disabled state from the input , but this can be overridden by setting the disabled property on the datepicker or toggle elements. This can be useful if you want to disable text input but allow selection via the calendar or vice-versa. Touch UI mode The datepicker normally opens as a popup under the input. However this is not ideal for touch devices that don't have as much screen real estate and need bigger click targets. For this reason mat-datepicker has a touchUi property that can be set to true in order to enable a more touch friendly UI where the calendar opens in a large dialog. Manually opening and closing the calendar The calendar popup can be programmatically controlled using the open and close methods on the mat-datepicker . It also has an opened property that reflects the status of the popup. Internationalization Internationalization of the datepicker is configured via four aspects: 1. The date locale. 2. The date implementation that the datepicker accepts. 3. The display and parse formats used by the datepicker. 4. The message strings used in the datepicker's UI. Setting the locale code By default, the MAT_DATE_LOCALE injection token will use the existing LOCALE_ID locale code from @angular/core . If you want to override it, you can provide a new value for the MAT_DATE_LOCALE token: @NgModule({ providers: [ {provide: MAT_DATE_LOCALE, useValue: 'en-GB'}, ], }) export class MyApp {} It's also possible to set the locale at runtime using the setLocale method of the DateAdapter . Choosing a date implementation and date format settings The datepicker was built to be date implementation agnostic. This means that it can be made to work with a variety of different date implementations. However it also means that developers need to make sure to provide the appropriate pieces for the datepicker to work with their chosen implementation. The easiest way to ensure this is just to import one of the pre-made modules: Module Date type Supported locales Dependencies Import from MatNativeDateModule Date en-US None @angular/material MatMomentDateModule Moment See project Moment.js @angular/material-moment-adapter Please note: MatNativeDateModule is based off of the functionality available in JavaScript's native Date object, and is thus not suitable for many locales. One of the biggest shortcomings of the native Date object is the inability to set the parse format. We highly recommend using the MomentDateAdapter or a custom DateAdapter that works with the formatting/parsing library of your choice. These modules include providers for DateAdapter and MAT_DATE_FORMATS @NgModule({ imports: [MatDatepickerModule, MatNativeDateModule], }) export class MyApp {} Because DateAdapter is a generic class, MatDatepicker and MatDatepickerInput also need to be made generic. When working with these classes (for example as a ViewChild ) you should include the appropriate generic type that corresponds to the DateAdapter implementation you are using. For example: @Component({...}) export class MyComponent { @ViewChild(MatDatepicker) datepicker: MatDatepicker Date ; } By default the MomentDateAdapter will creates dates in your time zone specific locale. You can change the default behaviour to parse dates as UTC by providing the MAT_MOMENT_DATE_ADAPTER_OPTIONS and setting it to useUtc: true . @NgModule({ imports: [MatDatepickerModule, MatMomentDateModule], providers: [ { provide: MAT_MOMENT_DATE_ADAPTER_OPTIONS, useValue: { useUtc: true } } ] }) It is also possible to create your own DateAdapter that works with any date format your app requires. This is accomplished by subclassing DateAdapter and providing your subclass as the DateAdapter implementation. You will also want to make sure that the MAT_DATE_FORMATS provided in your app are formats that can be understood by your date implementation. See Customizing the parse and display formats for more information about MAT_DATE_FORMATS . @NgModule({ imports: [MatDatepickerModule], providers: [ {provide: DateAdapter, useClass: MyDateAdapter}, {provide: MAT_DATE_FORMATS, useValue: MY_DATE_FORMATS}, ], }) export class MyApp {} Customizing the parse and display formats The MAT_DATE_FORMATS object is just a collection of formats that the datepicker uses when parsing and displaying dates. These formats are passed through to the DateAdapter so you will want to make sure that the format objects you're using are compatible with the DateAdapter used in your app. If you want use one of the DateAdapters that ships with Angular Material, but use your own MAT_DATE_FORMATS , you can import the NativeDateModule or MomentDateModule . These modules are identical to the \"Mat\"-prefixed versions ( MatNativeDateModule and MatMomentDateModule ) except they do not include the default formats. For example: @NgModule({ imports: [MatDatepickerModule, NativeDateModule], providers: [ {provide: MAT_DATE_FORMATS, useValue: MY_NATIVE_DATE_FORMATS}, ], }) export class MyApp {} Customizing the calendar header The header section of the calendar (the part containing the view switcher and previous and next buttons) can be replaced with a custom component if desired. This is accomplished using the calendarHeaderComponent property of mat-datepicker . It takes a component class and constructs an instance of the component to use as the header. In order to interact with the calendar in your custom header component, you can inject the parent MatCalendar in the constructor. To make sure your header stays in sync with the calendar, subscribe to the stateChanges observable of the calendar and mark your header component for change detection. Localizing labels and messages The various text strings used by the datepicker are provided through MatDatepickerIntl . Localization of these messages can be done by providing a subclass with translated values in your application root module. @NgModule({ imports: [MatDatepickerModule, MatNativeDateModule], providers: [ {provide: MatDatepickerIntl, useClass: MyIntl}, ], }) export class MyApp {} Highlighting specific dates If you want to apply one or more CSS classes to some dates in the calendar (e.g. to highlight a holiday), you can do so with the dateClass input. It accepts a function which will be called with each of the dates in the calendar and will apply any classes that are returned. The return value can be anything that is accepted by ngClass . Accessibility The MatDatepickerInput and MatDatepickerToggle directives add the aria-haspopup attribute to the native input and toggle button elements respectively, and they trigger a calendar dialog with role=\"dialog\" . MatDatepickerIntl includes strings that are used for aria-label s. The datepicker input should have a placeholder or be given a meaningful label via aria-label , aria-labelledby or MatDatepickerIntl . Keyboard interaction The datepicker supports the following keyboard shortcuts: Shortcut Action ALT + DOWN_ARROW Open the calendar pop-up ESCAPE Close the calendar pop-up In month view: Shortcut Action LEFT_ARROW Go to previous day RIGHT_ARROW Go to next day UP_ARROW Go to same day in the previous week DOWN_ARROW Go to same day in the next week HOME Go to the first day of the month END Go to the last day of the month PAGE_UP Go to the same day in the previous month ALT + PAGE_UP Go to the same day in the previous year PAGE_DOWN Go to the same day in the next month ALT + PAGE_DOWN Go to the same day in the next year ENTER Select current date In year view: Shortcut Action LEFT_ARROW Go to previous month RIGHT_ARROW Go to next month UP_ARROW Go up a row (back 4 months) DOWN_ARROW Go down a row (forward 4 months) HOME Go to the first month of the year END Go to the last month of the year PAGE_UP Go to the same month in the previous year ALT + PAGE_UP Go to the same month 10 years back PAGE_DOWN Go to the same month in the next year ALT + PAGE_DOWN Go to the same month 10 years forward ENTER Select current month In multi-year view: Shortcut Action LEFT_ARROW Go to previous year RIGHT_ARROW Go to next year UP_ARROW Go up a row (back 4 years) DOWN_ARROW Go down a row (forward 4 years) HOME Go to the first year in the current range END Go to the last year in the current range PAGE_UP Go back 24 years ALT + PAGE_UP Go back 240 years PAGE_DOWN Go forward 24 years ALT + PAGE_DOWN Go forward 240 years ENTER Select current year Troubleshooting Error: MatDatepicker: No provider found for DateAdapter/MAT_DATE_FORMATS This error is thrown if you have not provided all of the injectables the datepicker needs to work. The easiest way to resolve this is to import the MatNativeDateModule or MatMomentDateModule in your application's root module. See Choosing a date implementation ) for more information. Error: A MatDatepicker can only be associated with a single input This error is thrown if more than one input tries to claim ownership over the same mat-datepicker (via the matDatepicker attribute on the input). A datepicker can only be associated with a single input. Error: Attempted to open an MatDatepicker with no associated input. This error occurs if your mat-datepicker is not associated with any input . To associate an input with your datepicker, create a template reference for the datepicker and assign it to the matDatepicker attribute on the input: input [matDatepicker]= picker mat-datepicker #picker /mat-datepicker","title":"24-datepicker"},{"location":"site-files/source/24-datepicker/#connecting-a-datepicker-to-an-input","text":"A datepicker is composed of a text input and a calendar pop-up, connected via the matDatepicker property on the text input. input [matDatepicker]= myDatepicker mat-datepicker #myDatepicker /mat-datepicker An optional datepicker toggle button is available. A toggle can be added to the example above: input [matDatepicker]= myDatepicker mat-datepicker-toggle [for]= myDatepicker /mat-datepicker-toggle mat-datepicker #myDatepicker /mat-datepicker This works exactly the same with an input that is part of an mat-form-field and the toggle can easily be used as a prefix or suffix on the material input: mat-form-field input matInput [matDatepicker]= myDatepicker mat-datepicker-toggle matSuffix [for]= myDatepicker /mat-datepicker-toggle mat-datepicker #myDatepicker /mat-datepicker /mat-form-field If you want to customize the icon that is rendered inside the mat-datepicker-toggle , you can do so by using the matDatepickerToggleIcon directive:","title":"Connecting a datepicker to an input"},{"location":"site-files/source/24-datepicker/#setting-the-calendar-starting-view","text":"The startView property of mat-datepicker can be used to set the view that will show up when the calendar first opens. It can be set to month , year , or multi-year ; by default it will open to month view. The month, year, or range of years that the calendar opens to is determined by first checking if any date is currently selected, if so it will open to the month or year containing that date. Otherwise it will open to the month or year containing today's date. This behavior can be overridden by using the startAt property of mat-datepicker . In this case the calendar will open to the month or year containing the startAt date.","title":"Setting the calendar starting view"},{"location":"site-files/source/24-datepicker/#watching-the-views-for-changes-on-selected-years-and-months","text":"When a year or a month is selected in multi-year and year views respectively, the yearSelected and monthSelected outputs emit a normalized date representing the chosen year or month. By \"normalized\" we mean that the dates representing years will have their month set to January and their day set to the 1st. Dates representing months will have their day set to the 1st of the month. For example, if mat-datepicker is configured to work with javascript native Date objects, the yearSelected will emit new Date(2017, 0, 1) if the user selects 2017 in multi-year view. Similarly, monthSelected will emit new Date(2017, 1, 1) if the user selects February in year view and the current date value of the connected input was set to something like new Date(2017, MM, dd) when the calendar was opened (the month and day are irrelevant in this case). Notice that the emitted value does not affect the current value in the connected input , which is only bound to the selection made in the month view. So if the end user closes the calendar after choosing a year in multi-view mode (by pressing the ESC key, for example), the selected year, emitted by yearSelected output, will not cause any change in the value of the date in the associated input . The following example uses yearSelected and monthSelected outputs to emulate a month and year picker (if you're not familiar with the usage of MomentDateAdapter and MAT_DATE_FORMATS you can read more about them below in this document to fully understand the example).","title":"Watching the views for changes on selected years and months"},{"location":"site-files/source/24-datepicker/#setting-the-selected-date","text":"The type of values that the datepicker expects depends on the type of DateAdapter provided in your application. The NativeDateAdapter , for example, works directly with plain JavaScript Date objects. When using the MomentDateAdapter , however, the values will all be Moment.js instances. This use of the adapter pattern allows the datepicker component to work with any arbitrary date representation with a custom DateAdapter . See Choosing a date implementation for more information. Depending on the DateAdapter being used, the datepicker may automatically deserialize certain date formats for you as well. For example, both the NativeDateAdapter and MomentDateAdapter allow ISO 8601 strings to be passed to the datepicker and automatically converted to the proper object type. This can be convenient when binding data directly from your backend to the datepicker. However, the datepicker will not accept date strings formatted in user format such as \"1/2/2017\" as this is ambiguous and will mean different things depending on the locale of the browser running the code. As with other types of input , the datepicker works with @angular/forms directives such as formGroup , formControl , ngModel , etc.","title":"Setting the selected date"},{"location":"site-files/source/24-datepicker/#changing-the-datepicker-colors","text":"The datepicker popup will automatically inherit the color palette ( primary , accent , or warn ) from the mat-form-field it is attached to. If you would like to specify a different palette for the popup you can do so by setting the color property on mat-datepicker .","title":"Changing the datepicker colors"},{"location":"site-files/source/24-datepicker/#date-validation","text":"There are three properties that add date validation to the datepicker input. The first two are the min and max properties. In addition to enforcing validation on the input, these properties will disable all dates on the calendar popup before or after the respective values and prevent the user from advancing the calendar past the month or year (depending on current view) containing the min or max date. The second way to add date validation is using the matDatepickerFilter property of the datepicker input. This property accepts a function of D = boolean (where D is the date type used by the datepicker, see Choosing a date implementation ). A result of true indicates that the date is valid and a result of false indicates that it is not. Again this will also disable the dates on the calendar that are invalid. However, one important difference between using matDatepickerFilter vs using min or max is that filtering out all dates before or after a certain point, will not prevent the user from advancing the calendar past that point. In this example the user can back past 2005, but all of the dates before then will be unselectable. They will not be able to go further back in the calendar than 2000. If they manually type in a date that is before the min, after the max, or filtered out, the input will have validation errors. Each validation property has a different error that can be checked: * A value that violates the min property will have a matDatepickerMin error. * A value that violates the max property will have a matDatepickerMax error. * A value that violates the matDatepickerFilter property will have a matDatepickerFilter error.","title":"Date validation"},{"location":"site-files/source/24-datepicker/#input-and-change-events","text":"The input's native (input) and (change) events will only trigger due to user interaction with the input element; they will not fire when the user selects a date from the calendar popup. Therefore, the datepicker input also has support for (dateInput) and (dateChange) events. These trigger when the user interacts with either the input or the popup. The (dateInput) event will fire whenever the value changes due to the user typing or selecting a date from the calendar. The (dateChange) event will fire whenever the user finishes typing input (on input blur), or when the user chooses a date from the calendar.","title":"Input and change events"},{"location":"site-files/source/24-datepicker/#disabling-parts-of-the-datepicker","text":"As with any standard input , it is possible to disable the datepicker input by adding the disabled property. By default, the mat-datepicker and mat-datepicker-toggle will inherit their disabled state from the input , but this can be overridden by setting the disabled property on the datepicker or toggle elements. This can be useful if you want to disable text input but allow selection via the calendar or vice-versa.","title":"Disabling parts of the datepicker"},{"location":"site-files/source/24-datepicker/#touch-ui-mode","text":"The datepicker normally opens as a popup under the input. However this is not ideal for touch devices that don't have as much screen real estate and need bigger click targets. For this reason mat-datepicker has a touchUi property that can be set to true in order to enable a more touch friendly UI where the calendar opens in a large dialog.","title":"Touch UI mode"},{"location":"site-files/source/24-datepicker/#manually-opening-and-closing-the-calendar","text":"The calendar popup can be programmatically controlled using the open and close methods on the mat-datepicker . It also has an opened property that reflects the status of the popup.","title":"Manually opening and closing the calendar"},{"location":"site-files/source/24-datepicker/#internationalization","text":"Internationalization of the datepicker is configured via four aspects: 1. The date locale. 2. The date implementation that the datepicker accepts. 3. The display and parse formats used by the datepicker. 4. The message strings used in the datepicker's UI.","title":"Internationalization"},{"location":"site-files/source/24-datepicker/#setting-the-locale-code","text":"By default, the MAT_DATE_LOCALE injection token will use the existing LOCALE_ID locale code from @angular/core . If you want to override it, you can provide a new value for the MAT_DATE_LOCALE token: @NgModule({ providers: [ {provide: MAT_DATE_LOCALE, useValue: 'en-GB'}, ], }) export class MyApp {} It's also possible to set the locale at runtime using the setLocale method of the DateAdapter .","title":"Setting the locale code"},{"location":"site-files/source/24-datepicker/#choosing-a-date-implementation-and-date-format-settings","text":"The datepicker was built to be date implementation agnostic. This means that it can be made to work with a variety of different date implementations. However it also means that developers need to make sure to provide the appropriate pieces for the datepicker to work with their chosen implementation. The easiest way to ensure this is just to import one of the pre-made modules: Module Date type Supported locales Dependencies Import from MatNativeDateModule Date en-US None @angular/material MatMomentDateModule Moment See project Moment.js @angular/material-moment-adapter Please note: MatNativeDateModule is based off of the functionality available in JavaScript's native Date object, and is thus not suitable for many locales. One of the biggest shortcomings of the native Date object is the inability to set the parse format. We highly recommend using the MomentDateAdapter or a custom DateAdapter that works with the formatting/parsing library of your choice. These modules include providers for DateAdapter and MAT_DATE_FORMATS @NgModule({ imports: [MatDatepickerModule, MatNativeDateModule], }) export class MyApp {} Because DateAdapter is a generic class, MatDatepicker and MatDatepickerInput also need to be made generic. When working with these classes (for example as a ViewChild ) you should include the appropriate generic type that corresponds to the DateAdapter implementation you are using. For example: @Component({...}) export class MyComponent { @ViewChild(MatDatepicker) datepicker: MatDatepicker Date ; } By default the MomentDateAdapter will creates dates in your time zone specific locale. You can change the default behaviour to parse dates as UTC by providing the MAT_MOMENT_DATE_ADAPTER_OPTIONS and setting it to useUtc: true . @NgModule({ imports: [MatDatepickerModule, MatMomentDateModule], providers: [ { provide: MAT_MOMENT_DATE_ADAPTER_OPTIONS, useValue: { useUtc: true } } ] }) It is also possible to create your own DateAdapter that works with any date format your app requires. This is accomplished by subclassing DateAdapter and providing your subclass as the DateAdapter implementation. You will also want to make sure that the MAT_DATE_FORMATS provided in your app are formats that can be understood by your date implementation. See Customizing the parse and display formats for more information about MAT_DATE_FORMATS . @NgModule({ imports: [MatDatepickerModule], providers: [ {provide: DateAdapter, useClass: MyDateAdapter}, {provide: MAT_DATE_FORMATS, useValue: MY_DATE_FORMATS}, ], }) export class MyApp {}","title":"Choosing a date implementation and date format settings"},{"location":"site-files/source/24-datepicker/#customizing-the-parse-and-display-formats","text":"The MAT_DATE_FORMATS object is just a collection of formats that the datepicker uses when parsing and displaying dates. These formats are passed through to the DateAdapter so you will want to make sure that the format objects you're using are compatible with the DateAdapter used in your app. If you want use one of the DateAdapters that ships with Angular Material, but use your own MAT_DATE_FORMATS , you can import the NativeDateModule or MomentDateModule . These modules are identical to the \"Mat\"-prefixed versions ( MatNativeDateModule and MatMomentDateModule ) except they do not include the default formats. For example: @NgModule({ imports: [MatDatepickerModule, NativeDateModule], providers: [ {provide: MAT_DATE_FORMATS, useValue: MY_NATIVE_DATE_FORMATS}, ], }) export class MyApp {}","title":"Customizing the parse and display formats"},{"location":"site-files/source/24-datepicker/#customizing-the-calendar-header","text":"The header section of the calendar (the part containing the view switcher and previous and next buttons) can be replaced with a custom component if desired. This is accomplished using the calendarHeaderComponent property of mat-datepicker . It takes a component class and constructs an instance of the component to use as the header. In order to interact with the calendar in your custom header component, you can inject the parent MatCalendar in the constructor. To make sure your header stays in sync with the calendar, subscribe to the stateChanges observable of the calendar and mark your header component for change detection.","title":"Customizing the calendar header"},{"location":"site-files/source/24-datepicker/#localizing-labels-and-messages","text":"The various text strings used by the datepicker are provided through MatDatepickerIntl . Localization of these messages can be done by providing a subclass with translated values in your application root module. @NgModule({ imports: [MatDatepickerModule, MatNativeDateModule], providers: [ {provide: MatDatepickerIntl, useClass: MyIntl}, ], }) export class MyApp {}","title":"Localizing labels and messages"},{"location":"site-files/source/24-datepicker/#highlighting-specific-dates","text":"If you want to apply one or more CSS classes to some dates in the calendar (e.g. to highlight a holiday), you can do so with the dateClass input. It accepts a function which will be called with each of the dates in the calendar and will apply any classes that are returned. The return value can be anything that is accepted by ngClass .","title":"Highlighting specific dates"},{"location":"site-files/source/24-datepicker/#accessibility","text":"The MatDatepickerInput and MatDatepickerToggle directives add the aria-haspopup attribute to the native input and toggle button elements respectively, and they trigger a calendar dialog with role=\"dialog\" . MatDatepickerIntl includes strings that are used for aria-label s. The datepicker input should have a placeholder or be given a meaningful label via aria-label , aria-labelledby or MatDatepickerIntl .","title":"Accessibility"},{"location":"site-files/source/24-datepicker/#keyboard-interaction","text":"The datepicker supports the following keyboard shortcuts: Shortcut Action ALT + DOWN_ARROW Open the calendar pop-up ESCAPE Close the calendar pop-up In month view: Shortcut Action LEFT_ARROW Go to previous day RIGHT_ARROW Go to next day UP_ARROW Go to same day in the previous week DOWN_ARROW Go to same day in the next week HOME Go to the first day of the month END Go to the last day of the month PAGE_UP Go to the same day in the previous month ALT + PAGE_UP Go to the same day in the previous year PAGE_DOWN Go to the same day in the next month ALT + PAGE_DOWN Go to the same day in the next year ENTER Select current date In year view: Shortcut Action LEFT_ARROW Go to previous month RIGHT_ARROW Go to next month UP_ARROW Go up a row (back 4 months) DOWN_ARROW Go down a row (forward 4 months) HOME Go to the first month of the year END Go to the last month of the year PAGE_UP Go to the same month in the previous year ALT + PAGE_UP Go to the same month 10 years back PAGE_DOWN Go to the same month in the next year ALT + PAGE_DOWN Go to the same month 10 years forward ENTER Select current month In multi-year view: Shortcut Action LEFT_ARROW Go to previous year RIGHT_ARROW Go to next year UP_ARROW Go up a row (back 4 years) DOWN_ARROW Go down a row (forward 4 years) HOME Go to the first year in the current range END Go to the last year in the current range PAGE_UP Go back 24 years ALT + PAGE_UP Go back 240 years PAGE_DOWN Go forward 24 years ALT + PAGE_DOWN Go forward 240 years ENTER Select current year","title":"Keyboard interaction"},{"location":"site-files/source/24-datepicker/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"site-files/source/24-datepicker/#error-matdatepicker-no-provider-found-for-dateadaptermat_date_formats","text":"This error is thrown if you have not provided all of the injectables the datepicker needs to work. The easiest way to resolve this is to import the MatNativeDateModule or MatMomentDateModule in your application's root module. See Choosing a date implementation ) for more information.","title":"Error: MatDatepicker: No provider found for DateAdapter/MAT_DATE_FORMATS"},{"location":"site-files/source/24-datepicker/#error-a-matdatepicker-can-only-be-associated-with-a-single-input","text":"This error is thrown if more than one input tries to claim ownership over the same mat-datepicker (via the matDatepicker attribute on the input). A datepicker can only be associated with a single input.","title":"Error: A MatDatepicker can only be associated with a single input"},{"location":"site-files/source/24-datepicker/#error-attempted-to-open-an-matdatepicker-with-no-associated-input","text":"This error occurs if your mat-datepicker is not associated with any input . To associate an input with your datepicker, create a template reference for the datepicker and assign it to the matDatepicker attribute on the input: input [matDatepicker]= picker mat-datepicker #picker /mat-datepicker","title":"Error: Attempted to open an MatDatepicker with no associated input."},{"location":"site-files/source/25-README/","text":"Please see the official documentation at https://material.angular.io/components/component/datepicker","title":"25-README"},{"location":"site-files/source/26-toolbar/","text":"mat-toolbar is a container for headers, titles, or actions. Single row In the most situations, a toolbar will be placed at the top of your application and will only have a single row that includes the title of your application. mat-toolbar span My Application /span /mat-toolbar Multiple rows The Material Design specifications describe that toolbars can also have multiple rows. Creating toolbars with multiple rows in Angular Material can be done by placing mat-toolbar-row elements inside of a mat-toolbar . mat-toolbar mat-toolbar-row span First Row /span /mat-toolbar-row mat-toolbar-row span Second Row /span /mat-toolbar-row /mat-toolbar Note : Placing content outside of a mat-toolbar-row when multiple rows are specified is not supported. Positioning toolbar content The toolbar does not perform any positioning of its content. This gives the user full power to position the content as it suits their application. A common pattern is to position a title on the left with some actions on the right. This can be easily accomplished with display: flex : mat-toolbar color= primary span Application Title /span !-- This fills the remaining space of the current row -- span class= example-fill-remaining-space /span span Right Aligned Text /span /mat-toolbar .example-fill-remaining-space { /* This fills the remaining space, by using flexbox. Every toolbar row uses a flexbox row layout. */ flex: 1 1 auto; } Theming The color of a mat-toolbar can be changed by using the color property. By default, toolbars use a neutral background color based on the current theme (light or dark). This can be changed to 'primary' , 'accent' , or 'warn' . Accessibility By default, the toolbar assumes that it will be used in a purely decorative fashion and thus sets no roles, ARIA attributes, or keyboard shortcuts. This is equivalent to having a sequence of div elements on the page. Generally, the toolbar is used as a header where role=\"heading\" would be appropriate. Only if the use-case of the toolbar match that of role=\"toolbar\", the user should add the role and an appropriate label via aria-label or aria-labelledby .","title":"26-toolbar"},{"location":"site-files/source/26-toolbar/#single-row","text":"In the most situations, a toolbar will be placed at the top of your application and will only have a single row that includes the title of your application. mat-toolbar span My Application /span /mat-toolbar","title":"Single row"},{"location":"site-files/source/26-toolbar/#multiple-rows","text":"The Material Design specifications describe that toolbars can also have multiple rows. Creating toolbars with multiple rows in Angular Material can be done by placing mat-toolbar-row elements inside of a mat-toolbar . mat-toolbar mat-toolbar-row span First Row /span /mat-toolbar-row mat-toolbar-row span Second Row /span /mat-toolbar-row /mat-toolbar Note : Placing content outside of a mat-toolbar-row when multiple rows are specified is not supported.","title":"Multiple rows"},{"location":"site-files/source/26-toolbar/#positioning-toolbar-content","text":"The toolbar does not perform any positioning of its content. This gives the user full power to position the content as it suits their application. A common pattern is to position a title on the left with some actions on the right. This can be easily accomplished with display: flex : mat-toolbar color= primary span Application Title /span !-- This fills the remaining space of the current row -- span class= example-fill-remaining-space /span span Right Aligned Text /span /mat-toolbar .example-fill-remaining-space { /* This fills the remaining space, by using flexbox. Every toolbar row uses a flexbox row layout. */ flex: 1 1 auto; }","title":"Positioning toolbar content"},{"location":"site-files/source/26-toolbar/#theming","text":"The color of a mat-toolbar can be changed by using the color property. By default, toolbars use a neutral background color based on the current theme (light or dark). This can be changed to 'primary' , 'accent' , or 'warn' .","title":"Theming"},{"location":"site-files/source/26-toolbar/#accessibility","text":"By default, the toolbar assumes that it will be used in a purely decorative fashion and thus sets no roles, ARIA attributes, or keyboard shortcuts. This is equivalent to having a sequence of div elements on the page. Generally, the toolbar is used as a header where role=\"heading\" would be appropriate. Only if the use-case of the toolbar match that of role=\"toolbar\", the user should add the role and an appropriate label via aria-label or aria-labelledby .","title":"Accessibility"},{"location":"site-files/source/27-README/","text":"Please see the official documentation at https://material.angular.io/components/component/toolbar","title":"27-README"},{"location":"site-files/source/28-checkbox/","text":"mat-checkbox provides the same functionality as a native input type=\"checkbox\" enhanced with Material Design styling and animations. Checkbox label The checkbox label is provided as the content to the mat-checkbox element. The label can be positioned before or after the checkbox by setting the labelPosition property to 'before' or 'after' . If you don't want the label to appear next to the checkbox, you can use aria-label or aria-labelledby to specify an appropriate label. Use with @angular/forms mat-checkbox is compatible with @angular/forms and supports both FormsModule and ReactiveFormsModule . Indeterminate state mat-checkbox supports an indeterminate state, similar to the native input type=\"checkbox\" . While the indeterminate property of the checkbox is true, it will render as indeterminate regardless of the checked value. Any interaction with the checkbox by a user (i.e., clicking) will remove the indeterminate state. Click action config When user clicks on the mat-checkbox , the default behavior is toggle checked value and set indeterminate to false . This behavior can be customized by providing a new value of MAT_CHECKBOX_CLICK_ACTION to the checkbox. providers: [ {provide: MAT_CHECKBOX_CLICK_ACTION, useValue: 'check'} ] The possible values are: noop Do not change the checked value or indeterminate value. Developers have the power to implement customized click actions. check Toggle checked value of the checkbox, ignore indeterminate value. If the checkbox is in indeterminate state, the checkbox will display as an indeterminate checkbox regardless the checked value. check-indeterminate Default behavior of mat-checkbox . Always set indeterminate to false when user click on the mat-checkbox . This matches the behavior of native input type=\"checkbox\" . Theming The color of a mat-checkbox can be changed by using the color property. By default, checkboxes use the theme's accent color. This can be changed to 'primary' or 'warn' . Accessibility The mat-checkbox uses an internal input type=\"checkbox\" to provide an accessible experience. This internal checkbox receives focus and is automatically labelled by the text content of the mat-checkbox element. Checkboxes without text or labels should be given a meaningful label via aria-label or aria-labelledby .","title":"28-checkbox"},{"location":"site-files/source/28-checkbox/#checkbox-label","text":"The checkbox label is provided as the content to the mat-checkbox element. The label can be positioned before or after the checkbox by setting the labelPosition property to 'before' or 'after' . If you don't want the label to appear next to the checkbox, you can use aria-label or aria-labelledby to specify an appropriate label.","title":"Checkbox label"},{"location":"site-files/source/28-checkbox/#use-with-angularforms","text":"mat-checkbox is compatible with @angular/forms and supports both FormsModule and ReactiveFormsModule .","title":"Use with @angular/forms"},{"location":"site-files/source/28-checkbox/#indeterminate-state","text":"mat-checkbox supports an indeterminate state, similar to the native input type=\"checkbox\" . While the indeterminate property of the checkbox is true, it will render as indeterminate regardless of the checked value. Any interaction with the checkbox by a user (i.e., clicking) will remove the indeterminate state.","title":"Indeterminate state"},{"location":"site-files/source/28-checkbox/#click-action-config","text":"When user clicks on the mat-checkbox , the default behavior is toggle checked value and set indeterminate to false . This behavior can be customized by providing a new value of MAT_CHECKBOX_CLICK_ACTION to the checkbox. providers: [ {provide: MAT_CHECKBOX_CLICK_ACTION, useValue: 'check'} ] The possible values are:","title":"Click action config"},{"location":"site-files/source/28-checkbox/#noop","text":"Do not change the checked value or indeterminate value. Developers have the power to implement customized click actions.","title":"noop"},{"location":"site-files/source/28-checkbox/#check","text":"Toggle checked value of the checkbox, ignore indeterminate value. If the checkbox is in indeterminate state, the checkbox will display as an indeterminate checkbox regardless the checked value.","title":"check"},{"location":"site-files/source/28-checkbox/#check-indeterminate","text":"Default behavior of mat-checkbox . Always set indeterminate to false when user click on the mat-checkbox . This matches the behavior of native input type=\"checkbox\" .","title":"check-indeterminate"},{"location":"site-files/source/28-checkbox/#theming","text":"The color of a mat-checkbox can be changed by using the color property. By default, checkboxes use the theme's accent color. This can be changed to 'primary' or 'warn' .","title":"Theming"},{"location":"site-files/source/28-checkbox/#accessibility","text":"The mat-checkbox uses an internal input type=\"checkbox\" to provide an accessible experience. This internal checkbox receives focus and is automatically labelled by the text content of the mat-checkbox element. Checkboxes without text or labels should be given a meaningful label via aria-label or aria-labelledby .","title":"Accessibility"},{"location":"site-files/source/29-README/","text":"Please see the official documentation at https://material.angular.io/components/component/checkbox","title":"29-README"},{"location":"site-files/source/3-README/","text":"Please see the official documentation at https://material.angular.io/components/component/tooltip","title":"3-README"},{"location":"site-files/source/30-slider/","text":"mat-slider allows for the selection of a value from a range via mouse, touch, or keyboard, similar to input type=\"range\" . Note: the sliding behavior for this component requires that HammerJS is loaded on the page. Selecting a value By default the minimum value of the slider is 0 , the maximum value is 100 , and the thumb moves in increments of 1 . These values can be changed by setting the min , max , and step attributes respectively. The initial value is set to the minimum value unless otherwise specified. mat-slider min= 1 max= 5 step= 0.5 value= 1.5 /mat-slider Orientation By default sliders are horizontal with the minimum value on the left and the maximum value on the right. The vertical attribute can be added to a slider to make it vertical with the minimum value on bottom and the maximum value on top. mat-slider vertical /mat-slider An invert attribute is also available which can be specified to flip the axis that the thumb moves along. An inverted horizontal slider will have the minimum value on the right and the maximum value on the left, while an inverted vertical slider will have the minimum value on top and the maximum value on bottom. mat-slider invert /mat-slider Thumb label By default, the exact selected value of a slider is not visible to the user. However, this value can be added to the thumb by adding the thumbLabel attribute. The Material Design spec recommends using the thumbLabel attribute (along with tickInterval=\"1\" ) only for sliders that are used to display a discrete value (such as a 1-5 rating). mat-slider thumbLabel tickInterval= 1 /mat-slider Formatting the thumb label By default, the value in the slider's thumb label will be the same as the model value, however this may end up being too large to fit into the label. If you want to control the value that is being displayed, you can do so using the displayWith input. Tick marks By default, sliders do not show tick marks along the thumb track. This can be enabled using the tickInterval attribute. The value of tickInterval should be a number representing the number of steps between between ticks. For example a tickInterval of 3 with a step of 4 will draw tick marks at every 3 steps, which is the same as every 12 values. mat-slider step= 4 tickInterval= 3 /mat-slider The tickInterval can also be set to auto which will automatically choose the number of steps such that there is at least 30px of space between ticks. mat-slider tickInterval= auto /mat-slider The slider will always show a tick at the beginning and end of the track. If the remaining space doesn't add up perfectly the last interval will be shortened or lengthened so that the tick can be shown at the end of the track. The Material Design spec recommends using the tickInterval attribute (set to 1 along with the thumbLabel attribute) only for sliders that are used to display a discrete value (such as a 1-5 rating). Keyboard interaction The slider has the following keyboard bindings: Key Action Right arrow Increment the slider value by one step (decrements in RTL). Up arrow Increment the slider value by one step. Left arrow Decrement the slider value by one step (increments in RTL). Down arrow Decrement the slider value by one step. Page up Increment the slider value by 10 steps. Page down Decrement the slider value by 10 steps. End Set the value to the maximum possible. Home Set the value to the minimum possible. Accessibility Sliders without text or labels should be given a meaningful label via aria-label or aria-labelledby .","title":"30-slider"},{"location":"site-files/source/30-slider/#selecting-a-value","text":"By default the minimum value of the slider is 0 , the maximum value is 100 , and the thumb moves in increments of 1 . These values can be changed by setting the min , max , and step attributes respectively. The initial value is set to the minimum value unless otherwise specified. mat-slider min= 1 max= 5 step= 0.5 value= 1.5 /mat-slider","title":"Selecting a value"},{"location":"site-files/source/30-slider/#orientation","text":"By default sliders are horizontal with the minimum value on the left and the maximum value on the right. The vertical attribute can be added to a slider to make it vertical with the minimum value on bottom and the maximum value on top. mat-slider vertical /mat-slider An invert attribute is also available which can be specified to flip the axis that the thumb moves along. An inverted horizontal slider will have the minimum value on the right and the maximum value on the left, while an inverted vertical slider will have the minimum value on top and the maximum value on bottom. mat-slider invert /mat-slider","title":"Orientation"},{"location":"site-files/source/30-slider/#thumb-label","text":"By default, the exact selected value of a slider is not visible to the user. However, this value can be added to the thumb by adding the thumbLabel attribute. The Material Design spec recommends using the thumbLabel attribute (along with tickInterval=\"1\" ) only for sliders that are used to display a discrete value (such as a 1-5 rating). mat-slider thumbLabel tickInterval= 1 /mat-slider","title":"Thumb label"},{"location":"site-files/source/30-slider/#formatting-the-thumb-label","text":"By default, the value in the slider's thumb label will be the same as the model value, however this may end up being too large to fit into the label. If you want to control the value that is being displayed, you can do so using the displayWith input.","title":"Formatting the thumb label"},{"location":"site-files/source/30-slider/#tick-marks","text":"By default, sliders do not show tick marks along the thumb track. This can be enabled using the tickInterval attribute. The value of tickInterval should be a number representing the number of steps between between ticks. For example a tickInterval of 3 with a step of 4 will draw tick marks at every 3 steps, which is the same as every 12 values. mat-slider step= 4 tickInterval= 3 /mat-slider The tickInterval can also be set to auto which will automatically choose the number of steps such that there is at least 30px of space between ticks. mat-slider tickInterval= auto /mat-slider The slider will always show a tick at the beginning and end of the track. If the remaining space doesn't add up perfectly the last interval will be shortened or lengthened so that the tick can be shown at the end of the track. The Material Design spec recommends using the tickInterval attribute (set to 1 along with the thumbLabel attribute) only for sliders that are used to display a discrete value (such as a 1-5 rating).","title":"Tick marks"},{"location":"site-files/source/30-slider/#keyboard-interaction","text":"The slider has the following keyboard bindings: Key Action Right arrow Increment the slider value by one step (decrements in RTL). Up arrow Increment the slider value by one step. Left arrow Decrement the slider value by one step (increments in RTL). Down arrow Decrement the slider value by one step. Page up Increment the slider value by 10 steps. Page down Decrement the slider value by 10 steps. End Set the value to the maximum possible. Home Set the value to the minimum possible.","title":"Keyboard interaction"},{"location":"site-files/source/30-slider/#accessibility","text":"Sliders without text or labels should be given a meaningful label via aria-label or aria-labelledby .","title":"Accessibility"},{"location":"site-files/source/31-README/","text":"Please see the official documentation at https://material.angular.io/components/component/slider","title":"31-README"},{"location":"site-files/source/32-stepper/","text":"Angular Material's stepper provides a wizard-like workflow by dividing content into logical steps. Material stepper builds on the foundation of the CDK stepper that is responsible for the logic that drives a stepped workflow. Material stepper extends the CDK stepper and has Material Design styling. Stepper variants There are two stepper components: mat-horizontal-stepper and mat-vertical-stepper . They can be used the same way. The only difference is the orientation of stepper. mat-horizontal-stepper selector can be used to create a horizontal stepper, and mat-vertical-stepper can be used to create a vertical stepper. mat-step components need to be placed inside either one of the two stepper components. Labels If a step's label is only text, then the label attribute can be used. mat-vertical-stepper mat-step label= Step 1 Content 1 /mat-step mat-step label= Step 1 Content 2 /mat-step /mat-vertical-stepper For more complex labels, add a template with the matStepLabel directive inside the mat-step . mat-vertical-stepper mat-step ng-template matStepLabel ... /ng-template ... /mat-step /mat-vertical-stepper Label position For mat-horizontal-stepper it's possible to define the position of the label. end is the default value, while bottom will place it under the step icon instead of at its side. This behaviour is controlled by labelPosition property. Stepper buttons There are two button directives to support navigation between different steps: matStepperPrevious and matStepperNext . mat-horizontal-stepper mat-step ... div button mat-button matStepperPrevious Back /button button mat-button matStepperNext Next /button /div /mat-step /mat-horizontal-stepper Linear stepper The linear attribute can be set on mat-horizontal-stepper and mat-vertical-stepper to create a linear stepper that requires the user to complete previous steps before proceeding to following steps. For each mat-step , the stepControl attribute can be set to the top level AbstractControl that is used to check the validity of the step. There are two possible approaches. One is using a single form for stepper, and the other is using a different form for each step. Alternatively, if you don't want to use the Angular forms, you can pass in the completed property to each of the steps which won't allow the user to continue until it becomes true . Note that if both completed and stepControl are set, the stepControl will take precedence. Using a single form When using a single form for the stepper, matStepperPrevious and matStepperNext have to be set to type=\"button\" in order to prevent submission of the form before all steps are completed. form [formGroup]= formGroup mat-horizontal-stepper formArrayName= formArray linear mat-step formGroupName= 0 [stepControl]= formArray.get([0]) ... div button mat-button matStepperNext type= button Next /button /div /mat-step mat-step formGroupName= 1 [stepControl]= formArray.get([1]) ... div button mat-button matStepperPrevious type= button Back /button button mat-button matStepperNext type= button Next /button /div /mat-step ... /mat-horizontal-stepper /form Using a different form for each step mat-vertical-stepper linear mat-step [stepControl]= formGroup1 form [formGroup]= formGroup1 ... /form /mat-step mat-step [stepControl]= formGroup2 form [formGroup]= formGroup2 ... /form /mat-step /mat-vertical-stepper Types of steps Optional step If completion of a step in linear stepper is not required, then the optional attribute can be set on mat-step . Editable step By default, steps are editable, which means users can return to previously completed steps and edit their responses. editable=\"false\" can be set on mat-step to change the default. Completed step By default, the completed attribute of a step returns true if the step is valid (in case of linear stepper) and the user has interacted with the step. The user, however, can also override this default completed behavior by setting the completed attribute as needed. Overriding icons By default, the step headers will use the create and done icons from the Material design icon set via mat-icon elements. If you want to provide a different set of icons, you can do so by placing a matStepperIcon for each of the icons that you want to override. The index , active , and optional values of the individual steps are available through template variables: mat-vertical-stepper ng-template matStepperIcon= edit mat-icon insert_drive_file /mat-icon /ng-template ng-template matStepperIcon= done mat-icon done_all /mat-icon /ng-template !-- Custom icon with a context variable. -- ng-template matStepperIcon= number let-index= index {{index + 10}} /ng-template !-- Stepper steps go here -- /mat-vertical-stepper Note that you aren't limited to using the mat-icon component when providing custom icons. Step States You can set the state of a step to whatever you want. The given state by default maps to an icon. However, it can be overridden the same way as mentioned above. mat-horizontal-stepper mat-step label= Step 1 state= phone p Put down your phones. /p div button mat-button matStepperNext Next /button /div /mat-step mat-step label= Step 2 state= chat p Socialize with each other. /p div button mat-button matStepperPrevious Back /button button mat-button matStepperNext Next /button /div /mat-step mat-step label= Step 3 p You're welcome. /p /mat-step !-- Icon overrides. -- ng-template matStepperIcon= phone mat-icon call_end /mat-icon /ng-template ng-template matStepperIcon= chat mat-icon forum /mat-icon /ng-template /mat-horizontal-stepper In order to use the custom step states, you must add the displayDefaultIndicatorType option to the global default stepper options which can be specified by providing a value for STEPPER_GLOBAL_OPTIONS in your application's root module. @NgModule({ providers: [ { provide: STEPPER_GLOBAL_OPTIONS, useValue: { displayDefaultIndicatorType: false } } ] }) Error State The stepper can now show error states by simply providing the showError option to the STEPPER_GLOBAL_OPTIONS in your application's root module as mentioned above. @NgModule({ providers: [ { provide: STEPPER_GLOBAL_OPTIONS, useValue: { showError: true } } ] }) Keyboard interaction LEFT_ARROW : Focuses the previous step header RIGHT_ARROW : Focuses the next step header HOME : Focuses the first step header END : Focuses the last step header ENTER , SPACE : Selects the step that the focus is currently on TAB : Focuses the next tabbable element SHIFT + TAB : Focuses the previous tabbable element Localizing labels Labels used by the stepper are provided through MatStepperIntl . Localization of these messages can be done by providing a subclass with translated values in your application root module. @NgModule({ imports: [MatStepperModule], providers: [ {provide: MatStepperIntl, useClass: MyIntl}, ], }) export class MyApp {} Accessibility The stepper is treated as a tabbed view for accessibility purposes, so it is given role=\"tablist\" by default. The header of step that can be clicked to select the step is given role=\"tab\" , and the content that can be expanded upon selection is given role=\"tabpanel\" . aria-selected attribute of step header and aria-expanded attribute of step content is automatically set based on step selection change. The stepper and each step should be given a meaningful label via aria-label or aria-labelledby .","title":"32-stepper"},{"location":"site-files/source/32-stepper/#stepper-variants","text":"There are two stepper components: mat-horizontal-stepper and mat-vertical-stepper . They can be used the same way. The only difference is the orientation of stepper. mat-horizontal-stepper selector can be used to create a horizontal stepper, and mat-vertical-stepper can be used to create a vertical stepper. mat-step components need to be placed inside either one of the two stepper components.","title":"Stepper variants"},{"location":"site-files/source/32-stepper/#labels","text":"If a step's label is only text, then the label attribute can be used. mat-vertical-stepper mat-step label= Step 1 Content 1 /mat-step mat-step label= Step 1 Content 2 /mat-step /mat-vertical-stepper For more complex labels, add a template with the matStepLabel directive inside the mat-step . mat-vertical-stepper mat-step ng-template matStepLabel ... /ng-template ... /mat-step /mat-vertical-stepper","title":"Labels"},{"location":"site-files/source/32-stepper/#label-position","text":"For mat-horizontal-stepper it's possible to define the position of the label. end is the default value, while bottom will place it under the step icon instead of at its side. This behaviour is controlled by labelPosition property.","title":"Label position"},{"location":"site-files/source/32-stepper/#stepper-buttons","text":"There are two button directives to support navigation between different steps: matStepperPrevious and matStepperNext . mat-horizontal-stepper mat-step ... div button mat-button matStepperPrevious Back /button button mat-button matStepperNext Next /button /div /mat-step /mat-horizontal-stepper","title":"Stepper buttons"},{"location":"site-files/source/32-stepper/#linear-stepper","text":"The linear attribute can be set on mat-horizontal-stepper and mat-vertical-stepper to create a linear stepper that requires the user to complete previous steps before proceeding to following steps. For each mat-step , the stepControl attribute can be set to the top level AbstractControl that is used to check the validity of the step. There are two possible approaches. One is using a single form for stepper, and the other is using a different form for each step. Alternatively, if you don't want to use the Angular forms, you can pass in the completed property to each of the steps which won't allow the user to continue until it becomes true . Note that if both completed and stepControl are set, the stepControl will take precedence.","title":"Linear stepper"},{"location":"site-files/source/32-stepper/#using-a-single-form","text":"When using a single form for the stepper, matStepperPrevious and matStepperNext have to be set to type=\"button\" in order to prevent submission of the form before all steps are completed. form [formGroup]= formGroup mat-horizontal-stepper formArrayName= formArray linear mat-step formGroupName= 0 [stepControl]= formArray.get([0]) ... div button mat-button matStepperNext type= button Next /button /div /mat-step mat-step formGroupName= 1 [stepControl]= formArray.get([1]) ... div button mat-button matStepperPrevious type= button Back /button button mat-button matStepperNext type= button Next /button /div /mat-step ... /mat-horizontal-stepper /form","title":"Using a single form"},{"location":"site-files/source/32-stepper/#using-a-different-form-for-each-step","text":"mat-vertical-stepper linear mat-step [stepControl]= formGroup1 form [formGroup]= formGroup1 ... /form /mat-step mat-step [stepControl]= formGroup2 form [formGroup]= formGroup2 ... /form /mat-step /mat-vertical-stepper","title":"Using a different form for each step"},{"location":"site-files/source/32-stepper/#types-of-steps","text":"","title":"Types of steps"},{"location":"site-files/source/32-stepper/#optional-step","text":"If completion of a step in linear stepper is not required, then the optional attribute can be set on mat-step .","title":"Optional step"},{"location":"site-files/source/32-stepper/#editable-step","text":"By default, steps are editable, which means users can return to previously completed steps and edit their responses. editable=\"false\" can be set on mat-step to change the default.","title":"Editable step"},{"location":"site-files/source/32-stepper/#completed-step","text":"By default, the completed attribute of a step returns true if the step is valid (in case of linear stepper) and the user has interacted with the step. The user, however, can also override this default completed behavior by setting the completed attribute as needed.","title":"Completed step"},{"location":"site-files/source/32-stepper/#overriding-icons","text":"By default, the step headers will use the create and done icons from the Material design icon set via mat-icon elements. If you want to provide a different set of icons, you can do so by placing a matStepperIcon for each of the icons that you want to override. The index , active , and optional values of the individual steps are available through template variables: mat-vertical-stepper ng-template matStepperIcon= edit mat-icon insert_drive_file /mat-icon /ng-template ng-template matStepperIcon= done mat-icon done_all /mat-icon /ng-template !-- Custom icon with a context variable. -- ng-template matStepperIcon= number let-index= index {{index + 10}} /ng-template !-- Stepper steps go here -- /mat-vertical-stepper Note that you aren't limited to using the mat-icon component when providing custom icons.","title":"Overriding icons"},{"location":"site-files/source/32-stepper/#step-states","text":"You can set the state of a step to whatever you want. The given state by default maps to an icon. However, it can be overridden the same way as mentioned above. mat-horizontal-stepper mat-step label= Step 1 state= phone p Put down your phones. /p div button mat-button matStepperNext Next /button /div /mat-step mat-step label= Step 2 state= chat p Socialize with each other. /p div button mat-button matStepperPrevious Back /button button mat-button matStepperNext Next /button /div /mat-step mat-step label= Step 3 p You're welcome. /p /mat-step !-- Icon overrides. -- ng-template matStepperIcon= phone mat-icon call_end /mat-icon /ng-template ng-template matStepperIcon= chat mat-icon forum /mat-icon /ng-template /mat-horizontal-stepper In order to use the custom step states, you must add the displayDefaultIndicatorType option to the global default stepper options which can be specified by providing a value for STEPPER_GLOBAL_OPTIONS in your application's root module. @NgModule({ providers: [ { provide: STEPPER_GLOBAL_OPTIONS, useValue: { displayDefaultIndicatorType: false } } ] })","title":"Step States"},{"location":"site-files/source/32-stepper/#error-state","text":"The stepper can now show error states by simply providing the showError option to the STEPPER_GLOBAL_OPTIONS in your application's root module as mentioned above. @NgModule({ providers: [ { provide: STEPPER_GLOBAL_OPTIONS, useValue: { showError: true } } ] })","title":"Error State"},{"location":"site-files/source/32-stepper/#keyboard-interaction","text":"LEFT_ARROW : Focuses the previous step header RIGHT_ARROW : Focuses the next step header HOME : Focuses the first step header END : Focuses the last step header ENTER , SPACE : Selects the step that the focus is currently on TAB : Focuses the next tabbable element SHIFT + TAB : Focuses the previous tabbable element","title":"Keyboard interaction"},{"location":"site-files/source/32-stepper/#localizing-labels","text":"Labels used by the stepper are provided through MatStepperIntl . Localization of these messages can be done by providing a subclass with translated values in your application root module. @NgModule({ imports: [MatStepperModule], providers: [ {provide: MatStepperIntl, useClass: MyIntl}, ], }) export class MyApp {}","title":"Localizing labels"},{"location":"site-files/source/32-stepper/#accessibility","text":"The stepper is treated as a tabbed view for accessibility purposes, so it is given role=\"tablist\" by default. The header of step that can be clicked to select the step is given role=\"tab\" , and the content that can be expanded upon selection is given role=\"tabpanel\" . aria-selected attribute of step header and aria-expanded attribute of step content is automatically set based on step selection change. The stepper and each step should be given a meaningful label via aria-label or aria-labelledby .","title":"Accessibility"},{"location":"site-files/source/33-README/","text":"Please see the official documentation at https://material.angular.io/components/component/progress-spinner","title":"33-README"},{"location":"site-files/source/34-progress-spinner/","text":"mat-progress-spinner and mat-spinner are a circular indicators of progress and activity. Progress mode The progress-spinner supports two modes, \"determinate\" and \"indeterminate\". The mat-spinner component is an alias for mat-progress-spinner mode=\"indeterminate\" . Mode Description determinate Standard progress indicator, fills from 0% to 100% indeterminate Indicates that something is happening without conveying a discrete progress The default mode is \"determinate\". In this mode, the progress is set via the value property, which can be a whole number between 0 and 100. In \"indeterminate\" mode, the value property is ignored. Theming The color of a progress-spinner can be changed by using the color property. By default, progress-spinners use the theme's primary color. This can be changed to 'accent' or 'warn' . Accessibility Each progress spinner should be given a meaningful label via aria-label or aria-labelledby .","title":"34-progress-spinner"},{"location":"site-files/source/34-progress-spinner/#progress-mode","text":"The progress-spinner supports two modes, \"determinate\" and \"indeterminate\". The mat-spinner component is an alias for mat-progress-spinner mode=\"indeterminate\" . Mode Description determinate Standard progress indicator, fills from 0% to 100% indeterminate Indicates that something is happening without conveying a discrete progress The default mode is \"determinate\". In this mode, the progress is set via the value property, which can be a whole number between 0 and 100. In \"indeterminate\" mode, the value property is ignored.","title":"Progress mode"},{"location":"site-files/source/34-progress-spinner/#theming","text":"The color of a progress-spinner can be changed by using the color property. By default, progress-spinners use the theme's primary color. This can be changed to 'accent' or 'warn' .","title":"Theming"},{"location":"site-files/source/34-progress-spinner/#accessibility","text":"Each progress spinner should be given a meaningful label via aria-label or aria-labelledby .","title":"Accessibility"},{"location":"site-files/source/35-README/","text":"Please see the official documentation at https://material.angular.io/components/component/dialog","title":"35-README"},{"location":"site-files/source/36-dialog/","text":"The MatDialog service can be used to open modal dialogs with Material Design styling and animations. A dialog is opened by calling the open method with a component to be loaded and an optional config object. The open method will return an instance of MatDialogRef : let dialogRef = dialog.open(UserProfileComponent, { height: '400px', width: '600px', }); The MatDialogRef provides a handle on the opened dialog. It can be used to close the dialog and to receive notification when the dialog has been closed. dialogRef.afterClosed().subscribe(result = { console.log(`Dialog result: ${result}`); // Pizza! }); dialogRef.close('Pizza!'); Components created via MatDialog can inject MatDialogRef and use it to close the dialog in which they are contained. When closing, an optional result value can be provided. This result value is forwarded as the result of the afterClosed promise. @Component({/* ... */}) export class YourDialog { constructor(public dialogRef: MatDialogRef YourDialog ) { } closeDialog() { this.dialogRef.close('Pizza!'); } } Specifying global configuration defaults Default dialog options can be specified by providing an instance of MatDialogConfig for MAT_DIALOG_DEFAULT_OPTIONS in your application's root module. @NgModule({ providers: [ {provide: MAT_DIALOG_DEFAULT_OPTIONS, useValue: {hasBackdrop: false}} ] }) Sharing data with the Dialog component. If you want to share data with your dialog, you can use the data option to pass information to the dialog component. let dialogRef = dialog.open(YourDialog, { data: { name: 'austin' }, }); To access the data in your dialog component, you have to use the MAT_DIALOG_DATA injection token: import {Component, Inject} from '@angular/core'; import {MAT_DIALOG_DATA} from '@angular/material'; @Component({ selector: 'your-dialog', template: 'passed in {{ data.name }}', }) export class YourDialog { constructor(@Inject(MAT_DIALOG_DATA) public data: any) { } } Dialog content Several directives are available to make it easier to structure your dialog content: Name Description mat-dialog-title [Attr] Dialog title, applied to a heading element (e.g., h1 , h2 ) mat-dialog-content Primary scrollable content of the dialog mat-dialog-actions Container for action buttons at the bottom of the dialog mat-dialog-close [Attr] Added to a button , makes the button close the dialog with an optional result from the bound value. For example: h2 mat-dialog-title Delete all /h2 mat-dialog-content Are you sure? /mat-dialog-content mat-dialog-actions button mat-button mat-dialog-close No /button !-- The mat-dialog-close directive optionally accepts a value as a result for the dialog. -- button mat-button [mat-dialog-close]= true Yes /button /mat-dialog-actions Once a dialog opens, the dialog will automatically focus the first tabbable element. You can control which elements are tab stops with the tabindex attribute button mat-button tabindex= -1 Not Tabbable /button Configuring dialog content via entryComponents Because MatDialog instantiates components at run-time, the Angular compiler needs extra information to create the necessary ComponentFactory for your dialog content component. For any component loaded into a dialog, you must include your component class in the list of entryComponents in your NgModule definition so that the Angular compiler knows to create the ComponentFactory for it. @NgModule({ imports: [ // ... MatDialogModule ], declarations: [ AppComponent, ExampleDialogComponent ], entryComponents: [ ExampleDialogComponent ], providers: [], bootstrap: [AppComponent] }) export class AppModule {} Accessibility By default, each dialog has role=\"dialog\" on the root element. The role can be changed to alertdialog via the MatDialogConfig when opening. The aria-label , aria-labelledby , and aria-describedby attributes can all be set to the dialog element via the MatDialogConfig as well. Each dialog should typically have a label set via aria-label or aria-labelledby . When a dialog is opened, it will move focus to the first focusable element that it can find. In order to prevent users from tabbing into elements in the background, the Material dialog uses a focus trap to contain focus within itself. Once a dialog is closed, it will return focus to the element that was focused before the dialog was opened. Focus management By default, the first tabbable element within the dialog will receive focus upon open. This can be configured by setting the cdkFocusInitial attribute on another focusable element. Tabbing through the elements of the dialog will keep focus inside of the dialog element, wrapping back to the first tabbable element when reaching the end of the tab sequence. Keyboard interaction By default pressing the escape key will close the dialog. While this behavior can be turned off via the disableClose option, users should generally avoid doing so as it breaks the expected interaction pattern for screen-reader users.","title":"36-dialog"},{"location":"site-files/source/36-dialog/#specifying-global-configuration-defaults","text":"Default dialog options can be specified by providing an instance of MatDialogConfig for MAT_DIALOG_DEFAULT_OPTIONS in your application's root module. @NgModule({ providers: [ {provide: MAT_DIALOG_DEFAULT_OPTIONS, useValue: {hasBackdrop: false}} ] })","title":"Specifying global configuration defaults"},{"location":"site-files/source/36-dialog/#sharing-data-with-the-dialog-component","text":"If you want to share data with your dialog, you can use the data option to pass information to the dialog component. let dialogRef = dialog.open(YourDialog, { data: { name: 'austin' }, }); To access the data in your dialog component, you have to use the MAT_DIALOG_DATA injection token: import {Component, Inject} from '@angular/core'; import {MAT_DIALOG_DATA} from '@angular/material'; @Component({ selector: 'your-dialog', template: 'passed in {{ data.name }}', }) export class YourDialog { constructor(@Inject(MAT_DIALOG_DATA) public data: any) { } }","title":"Sharing data with the Dialog component."},{"location":"site-files/source/36-dialog/#dialog-content","text":"Several directives are available to make it easier to structure your dialog content: Name Description mat-dialog-title [Attr] Dialog title, applied to a heading element (e.g., h1 , h2 ) mat-dialog-content Primary scrollable content of the dialog mat-dialog-actions Container for action buttons at the bottom of the dialog mat-dialog-close [Attr] Added to a button , makes the button close the dialog with an optional result from the bound value. For example: h2 mat-dialog-title Delete all /h2 mat-dialog-content Are you sure? /mat-dialog-content mat-dialog-actions button mat-button mat-dialog-close No /button !-- The mat-dialog-close directive optionally accepts a value as a result for the dialog. -- button mat-button [mat-dialog-close]= true Yes /button /mat-dialog-actions Once a dialog opens, the dialog will automatically focus the first tabbable element. You can control which elements are tab stops with the tabindex attribute button mat-button tabindex= -1 Not Tabbable /button","title":"Dialog content"},{"location":"site-files/source/36-dialog/#configuring-dialog-content-via-entrycomponents","text":"Because MatDialog instantiates components at run-time, the Angular compiler needs extra information to create the necessary ComponentFactory for your dialog content component. For any component loaded into a dialog, you must include your component class in the list of entryComponents in your NgModule definition so that the Angular compiler knows to create the ComponentFactory for it. @NgModule({ imports: [ // ... MatDialogModule ], declarations: [ AppComponent, ExampleDialogComponent ], entryComponents: [ ExampleDialogComponent ], providers: [], bootstrap: [AppComponent] }) export class AppModule {}","title":"Configuring dialog content via entryComponents"},{"location":"site-files/source/36-dialog/#accessibility","text":"By default, each dialog has role=\"dialog\" on the root element. The role can be changed to alertdialog via the MatDialogConfig when opening. The aria-label , aria-labelledby , and aria-describedby attributes can all be set to the dialog element via the MatDialogConfig as well. Each dialog should typically have a label set via aria-label or aria-labelledby . When a dialog is opened, it will move focus to the first focusable element that it can find. In order to prevent users from tabbing into elements in the background, the Material dialog uses a focus trap to contain focus within itself. Once a dialog is closed, it will return focus to the element that was focused before the dialog was opened.","title":"Accessibility"},{"location":"site-files/source/36-dialog/#focus-management","text":"By default, the first tabbable element within the dialog will receive focus upon open. This can be configured by setting the cdkFocusInitial attribute on another focusable element. Tabbing through the elements of the dialog will keep focus inside of the dialog element, wrapping back to the first tabbable element when reaching the end of the tab sequence.","title":"Focus management"},{"location":"site-files/source/36-dialog/#keyboard-interaction","text":"By default pressing the escape key will close the dialog. While this behavior can be turned off via the disableClose option, users should generally avoid doing so as it breaks the expected interaction pattern for screen-reader users.","title":"Keyboard interaction"},{"location":"site-files/source/37-form-field/","text":"mat-form-field is a component used to wrap several Angular Material components and apply common Text field styles such as the underline, floating label, and hint messages. In this document, \"form field\" refers to the wrapper component mat-form-field and \"form field control\" refers to the component that the mat-form-field is wrapping (e.g. the input, textarea, select, etc.) The following Angular Material components are designed to work inside a mat-form-field : input matNativeControl textarea matNativeControl select matNativeControl mat-select mat-chip-list Form field appearance variants The mat-form-field supports 4 different appearance variants which can be set via the appearance input. The legacy appearance is the default style that the mat-form-field has traditionally had. It shows the input box with an underline underneath it. The standard appearance is a slightly updated version of the legacy appearance that has spacing that is more consistent with the fill and outline appearances. The fill appearance displays the form field with a filled background box in addition to the underline. Finally the outline appearance shows the form field with a border all the way around, not just an underline. There are a couple differences to be aware of between the legacy appearance and the newer standard , fill , and outline appearances. The matPrefix and matSuffix elements are center aligned by default for the newer appearances. The Material Design spec shows this as being the standard way to align prefix and suffix icons in the newer appearance variants. We do not recommend using text prefix and suffixes in the new variants because the label and input do not have the same alignment. It is therefore impossible to align the prefix or suffix in a way that looks good when compared with both the label and input text. The second important difference is that the standard , fill , and outline appearances do not promote placeholders to labels. For the legacy appearance specifying input placeholder=\"placeholder\" will result in a floating label being added to the mat-form-field . For the newer variants it will just add a normal placeholder to the input. If you want a floating label, add a mat-label to the mat-form-field . Floating label The floating label is a text label displayed on top of the form field control when the control does not contain any text or when select matNativeControl does not show any option text. By default, when text is present the floating label floats above the form field control. The label for a form field can be specified by adding a mat-label element. In the legacy version of the mat-form-field (one that has no appearance attribute or has appearance=\"legacy\" ) if a label is not specified, the placeholder attribute on the form control is promoted to a label. If a label is specified, the placeholder will be displayed as a normal placeholder. The placeholder will never be promoted to a label for standard , fill , and outline form fields. If you want to create a legacy form field with a placeholder but no label, you will need to specify an empty label to prevent the placeholder from being promoted. mat-form-field mat-label /mat-label input placeholder= Just a placeholder /mat-form-field If the form field control is marked with a required attribute, an asterisk will be appended to the label to indicate the fact that it is a required field. If unwanted, this can be disabled by setting the hideRequiredMarker property on mat-form-field The floatLabel property of mat-form-field can be used to change this default floating behavior. It can set to never to hide the label instead of float it when text is present in the form field control. It can be set to always to float the label even when no text is present in the form field control. It can also be set to auto to restore the default behavior. Global default label options can be specified by providing a value for MAT_LABEL_GLOBAL_OPTIONS in your application's root module. Like the property, the global setting can be either always , never , or auto . @NgModule({ providers: [ {provide: MAT_LABEL_GLOBAL_OPTIONS, useValue: {float: 'always'}} ] }) Hint labels Hint labels are additional descriptive text that appears below the form field's underline. A mat-form-field can have up to two hint labels; one start-aligned (left in an LTR language, right in RTL), and one end-aligned. Hint labels are specified in one of two ways: either by using the hintLabel property of mat-form-field , or by adding a mat-hint element inside the form field. When adding a hint via the hintLabel property, it will be treated as the start hint. Hints added via the mat-hint hint element can be added to either side by setting the align property on mat-hint to either start or end . Attempting to add multiple hints to the same side will raise an error. Error messages Error messages can be shown under the form field underline by adding mat-error elements inside the form field. Errors are hidden initially and will be displayed on invalid form fields after the user has interacted with the element or the parent form has been submitted. Since the errors occupy the same space as the hints, the hints are hidden when the errors are shown. If a form field can have more than one error state, it is up to the consumer to toggle which messages should be displayed. This can be done with CSS, ngIf or ngSwitch . Multiple error messages can be shown at the same time if desired, but the mat-form-field only reserves enough space to display one error message at a time. Ensuring that enough space is available to display multiple errors is up to the user. Prefix suffix Custom content can be included before and after the input tag, as a prefix or suffix. It will be included within the visual container that wraps the form control as per the Material specification. Adding the matPrefix directive to an element inside the mat-form-field will designate it as the prefix. Similarly, adding matSuffix will designate it as the suffix. Custom form field controls In addition to the form field controls that Angular Material provides, it is possible to create custom form field controls that work with mat-form-field in the same way. For additional information on this see the guide on Creating Custom mat-form-field Controls . Theming mat-form-field has a color property which can be set to primary , accent , or warn . This will set the color of the form field underline and floating label based on the theme colors of your app. mat-form-field inherits its font-size from its parent element. This can be overridden to an explicit size using CSS. We recommend a specificity of at least 1 element + 1 class. mat-form-field.mat-form-field { font-size: 16px; } Accessibility If a floating label is specified, it will be automatically used as the label for the form field control. If no floating label is specified, the user should label the form field control themselves using aria-label , aria-labelledby or label for=... . Any errors and hints added to the form field are automatically added to the form field control's aria-describedby set. Troubleshooting Error: Placeholder attribute and child element were both specified This error occurs when you have specified two conflicting placeholders. Make sure that you haven't included both a placeholder property on your form field control and a mat-placeholder element. The mat-placeholder element is deprecated, you should use placeholder for placeholders and mat-label for labels. Error: A hint was already declared for align=\"...\" This error occurs if you have added multiple hints for the same side. Keep in mind that the hintLabel property adds a hint to the start side. Error: mat-form-field must contain a MatFormFieldControl This error occurs when you have not added a form field control to your form field. If your form field contains a native input or textarea element, make sure you've added the matInput directive to it and have imported MatInputModule . Other components that can act as a form field control include mat-select , mat-chip-list , and any custom form field controls you've created.","title":"37-form-field"},{"location":"site-files/source/37-form-field/#form-field-appearance-variants","text":"The mat-form-field supports 4 different appearance variants which can be set via the appearance input. The legacy appearance is the default style that the mat-form-field has traditionally had. It shows the input box with an underline underneath it. The standard appearance is a slightly updated version of the legacy appearance that has spacing that is more consistent with the fill and outline appearances. The fill appearance displays the form field with a filled background box in addition to the underline. Finally the outline appearance shows the form field with a border all the way around, not just an underline. There are a couple differences to be aware of between the legacy appearance and the newer standard , fill , and outline appearances. The matPrefix and matSuffix elements are center aligned by default for the newer appearances. The Material Design spec shows this as being the standard way to align prefix and suffix icons in the newer appearance variants. We do not recommend using text prefix and suffixes in the new variants because the label and input do not have the same alignment. It is therefore impossible to align the prefix or suffix in a way that looks good when compared with both the label and input text. The second important difference is that the standard , fill , and outline appearances do not promote placeholders to labels. For the legacy appearance specifying input placeholder=\"placeholder\" will result in a floating label being added to the mat-form-field . For the newer variants it will just add a normal placeholder to the input. If you want a floating label, add a mat-label to the mat-form-field .","title":"Form field appearance variants"},{"location":"site-files/source/37-form-field/#floating-label","text":"The floating label is a text label displayed on top of the form field control when the control does not contain any text or when select matNativeControl does not show any option text. By default, when text is present the floating label floats above the form field control. The label for a form field can be specified by adding a mat-label element. In the legacy version of the mat-form-field (one that has no appearance attribute or has appearance=\"legacy\" ) if a label is not specified, the placeholder attribute on the form control is promoted to a label. If a label is specified, the placeholder will be displayed as a normal placeholder. The placeholder will never be promoted to a label for standard , fill , and outline form fields. If you want to create a legacy form field with a placeholder but no label, you will need to specify an empty label to prevent the placeholder from being promoted. mat-form-field mat-label /mat-label input placeholder= Just a placeholder /mat-form-field If the form field control is marked with a required attribute, an asterisk will be appended to the label to indicate the fact that it is a required field. If unwanted, this can be disabled by setting the hideRequiredMarker property on mat-form-field The floatLabel property of mat-form-field can be used to change this default floating behavior. It can set to never to hide the label instead of float it when text is present in the form field control. It can be set to always to float the label even when no text is present in the form field control. It can also be set to auto to restore the default behavior. Global default label options can be specified by providing a value for MAT_LABEL_GLOBAL_OPTIONS in your application's root module. Like the property, the global setting can be either always , never , or auto . @NgModule({ providers: [ {provide: MAT_LABEL_GLOBAL_OPTIONS, useValue: {float: 'always'}} ] })","title":"Floating label"},{"location":"site-files/source/37-form-field/#hint-labels","text":"Hint labels are additional descriptive text that appears below the form field's underline. A mat-form-field can have up to two hint labels; one start-aligned (left in an LTR language, right in RTL), and one end-aligned. Hint labels are specified in one of two ways: either by using the hintLabel property of mat-form-field , or by adding a mat-hint element inside the form field. When adding a hint via the hintLabel property, it will be treated as the start hint. Hints added via the mat-hint hint element can be added to either side by setting the align property on mat-hint to either start or end . Attempting to add multiple hints to the same side will raise an error.","title":"Hint labels"},{"location":"site-files/source/37-form-field/#error-messages","text":"Error messages can be shown under the form field underline by adding mat-error elements inside the form field. Errors are hidden initially and will be displayed on invalid form fields after the user has interacted with the element or the parent form has been submitted. Since the errors occupy the same space as the hints, the hints are hidden when the errors are shown. If a form field can have more than one error state, it is up to the consumer to toggle which messages should be displayed. This can be done with CSS, ngIf or ngSwitch . Multiple error messages can be shown at the same time if desired, but the mat-form-field only reserves enough space to display one error message at a time. Ensuring that enough space is available to display multiple errors is up to the user.","title":"Error messages"},{"location":"site-files/source/37-form-field/#prefix-suffix","text":"Custom content can be included before and after the input tag, as a prefix or suffix. It will be included within the visual container that wraps the form control as per the Material specification. Adding the matPrefix directive to an element inside the mat-form-field will designate it as the prefix. Similarly, adding matSuffix will designate it as the suffix.","title":"Prefix &amp; suffix"},{"location":"site-files/source/37-form-field/#custom-form-field-controls","text":"In addition to the form field controls that Angular Material provides, it is possible to create custom form field controls that work with mat-form-field in the same way. For additional information on this see the guide on Creating Custom mat-form-field Controls .","title":"Custom form field controls"},{"location":"site-files/source/37-form-field/#theming","text":"mat-form-field has a color property which can be set to primary , accent , or warn . This will set the color of the form field underline and floating label based on the theme colors of your app. mat-form-field inherits its font-size from its parent element. This can be overridden to an explicit size using CSS. We recommend a specificity of at least 1 element + 1 class. mat-form-field.mat-form-field { font-size: 16px; }","title":"Theming"},{"location":"site-files/source/37-form-field/#accessibility","text":"If a floating label is specified, it will be automatically used as the label for the form field control. If no floating label is specified, the user should label the form field control themselves using aria-label , aria-labelledby or label for=... . Any errors and hints added to the form field are automatically added to the form field control's aria-describedby set.","title":"Accessibility"},{"location":"site-files/source/37-form-field/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"site-files/source/37-form-field/#error-placeholder-attribute-and-child-element-were-both-specified","text":"This error occurs when you have specified two conflicting placeholders. Make sure that you haven't included both a placeholder property on your form field control and a mat-placeholder element. The mat-placeholder element is deprecated, you should use placeholder for placeholders and mat-label for labels.","title":"Error: Placeholder attribute and child element were both specified"},{"location":"site-files/source/37-form-field/#error-a-hint-was-already-declared-for-align","text":"This error occurs if you have added multiple hints for the same side. Keep in mind that the hintLabel property adds a hint to the start side.","title":"Error: A hint was already declared for align=\"...\""},{"location":"site-files/source/37-form-field/#error-mat-form-field-must-contain-a-matformfieldcontrol","text":"This error occurs when you have not added a form field control to your form field. If your form field contains a native input or textarea element, make sure you've added the matInput directive to it and have imported MatInputModule . Other components that can act as a form field control include mat-select , mat-chip-list , and any custom form field controls you've created.","title":"Error: mat-form-field must contain a MatFormFieldControl"},{"location":"site-files/source/38-README/","text":"Please see the official documentation at https://material.angular.io/components/component/form-field","title":"38-README"},{"location":"site-files/source/39-README/","text":"Note that this is not an entry-point. This directory is just used to share testing logic that is specific to Angular Material.","title":"39-README"},{"location":"site-files/source/4-tooltip/","text":"The Angular Material tooltip provides a text label that is displayed when the user hovers over or longpresses an element. Positioning The tooltip will be displayed below the element but this can be configured using the matTooltipPosition input. The tooltip can be displayed above, below, left, or right of the element. By default the position will be below. If the tooltip should switch left/right positions in an RTL layout direction, then the positions before and after should be used instead of left and right , respectively. Position Description above Always display above the element below Always display beneath the element left Always display to the left of the element right Always display to the right of the element before Display to the left in left-to-right layout and to the right in right-to-left layout after Display to the right in left-to-right layout and to the left in right-to-left layout Showing and hiding By default, the tooltip will be immediately shown when the user's mouse hovers over the tooltip's trigger element and immediately hides when the user's mouse leaves. On mobile, the tooltip is displayed when the user longpresses the element and hides after a delay of 1500ms. The longpress behavior requires HammerJS to be loaded on the page. To learn more about adding HammerJS to your app, check out the Gesture Support section of the Getting Started guide. Show and hide delays To add a delay before showing or hiding the tooltip, you can use the inputs matTooltipShowDelay and matTooltipHideDelay to provide a delay time in milliseconds. The following example has a tooltip that waits one second to display after the user hovers over the button, and waits two seconds to hide after the user moves the mouse away. Changing the default delay behavior You can configure your app's tooltip default show/hide delays by configuring and providing your options using the MAT_TOOLTIP_DEFAULT_OPTIONS injection token. Manually calling show() and hide() To manually cause the tooltip to show or hide, you can call the show and hide directive methods, which both accept a number in milliseconds to delay before applying the display change. Disabling the tooltip from showing To completely disable a tooltip, set matTooltipDisabled . While disabled, a tooltip will never be shown. Accessibility Elements with the matTooltip will add an aria-describedby label that provides a reference to a visually hidden element containing the tooltip's message. This provides screenreaders the information needed to read out the tooltip's contents when the end-user focuses on the element triggering the tooltip. The element referenced via aria-describedby is not the tooltip itself, but instead an invisible copy of the tooltip content that is always present in the DOM. If a tooltip will only be shown manually via click, keypress, etc., then extra care should be taken such that the action behaves similarly for screen-reader users. One possible approach would be to use the LiveAnnouncer from the cdk/a11y package to announce the tooltip content on such an interaction.","title":"4-tooltip"},{"location":"site-files/source/4-tooltip/#positioning","text":"The tooltip will be displayed below the element but this can be configured using the matTooltipPosition input. The tooltip can be displayed above, below, left, or right of the element. By default the position will be below. If the tooltip should switch left/right positions in an RTL layout direction, then the positions before and after should be used instead of left and right , respectively. Position Description above Always display above the element below Always display beneath the element left Always display to the left of the element right Always display to the right of the element before Display to the left in left-to-right layout and to the right in right-to-left layout after Display to the right in left-to-right layout and to the left in right-to-left layout","title":"Positioning"},{"location":"site-files/source/4-tooltip/#showing-and-hiding","text":"By default, the tooltip will be immediately shown when the user's mouse hovers over the tooltip's trigger element and immediately hides when the user's mouse leaves. On mobile, the tooltip is displayed when the user longpresses the element and hides after a delay of 1500ms. The longpress behavior requires HammerJS to be loaded on the page. To learn more about adding HammerJS to your app, check out the Gesture Support section of the Getting Started guide.","title":"Showing and hiding"},{"location":"site-files/source/4-tooltip/#show-and-hide-delays","text":"To add a delay before showing or hiding the tooltip, you can use the inputs matTooltipShowDelay and matTooltipHideDelay to provide a delay time in milliseconds. The following example has a tooltip that waits one second to display after the user hovers over the button, and waits two seconds to hide after the user moves the mouse away.","title":"Show and hide delays"},{"location":"site-files/source/4-tooltip/#changing-the-default-delay-behavior","text":"You can configure your app's tooltip default show/hide delays by configuring and providing your options using the MAT_TOOLTIP_DEFAULT_OPTIONS injection token.","title":"Changing the default delay behavior"},{"location":"site-files/source/4-tooltip/#manually-calling-show-and-hide","text":"To manually cause the tooltip to show or hide, you can call the show and hide directive methods, which both accept a number in milliseconds to delay before applying the display change.","title":"Manually calling show() and hide()"},{"location":"site-files/source/4-tooltip/#disabling-the-tooltip-from-showing","text":"To completely disable a tooltip, set matTooltipDisabled . While disabled, a tooltip will never be shown.","title":"Disabling the tooltip from showing"},{"location":"site-files/source/4-tooltip/#accessibility","text":"Elements with the matTooltip will add an aria-describedby label that provides a reference to a visually hidden element containing the tooltip's message. This provides screenreaders the information needed to read out the tooltip's contents when the end-user focuses on the element triggering the tooltip. The element referenced via aria-describedby is not the tooltip itself, but instead an invisible copy of the tooltip content that is always present in the DOM. If a tooltip will only be shown manually via click, keypress, etc., then extra care should be taken such that the action behaves similarly for screen-reader users. One possible approach would be to use the LiveAnnouncer from the cdk/a11y package to announce the tooltip content on such an interaction.","title":"Accessibility"},{"location":"site-files/source/40-expansion/","text":"mat-expansion-panel provides an expandable details-summary view. Expansion-panel content Each expansion-panel must include a header and may optionally include an action bar. Header The mat-expansion-panel-header shows a summary of the panel content and acts as the control for expanding and collapsing. This header may optionally contain an mat-panel-title and an mat-panel-description , which format the content of the header to align with Material Design specifications. By default, the expansion-panel header includes a toggle icon at the end of the header to indicate the expansion state. This icon can be hidden via the hideToggle property. mat-expansion-panel mat-expansion-panel-header mat-panel-title This is the expansion title /mat-panel-title mat-panel-description This is a summary of the content /mat-panel-description /mat-expansion-panel-header p This is the primary content of the panel. /p /mat-expansion-panel Action bar Actions may optionally be included at the bottom of the panel, visible only when the expansion is in its expanded state. mat-expansion-panel mat-expansion-panel-header This is the expansion title /mat-expansion-panel-header p This is the primary content of the panel. /p mat-action-row button mat-button Click me /button /mat-action-row /mat-expansion-panel Disabling a panel Expansion panels can be disabled using the disabled attribute. A disabled expansion panel can't be toggled by the user, but can still be manipulated programmatically. mat-expansion-panel [disabled]= isDisabled mat-expansion-panel-header This is the expansion title /mat-expansion-panel-header mat-panel-description This is a summary of the content /mat-panel-description /mat-expansion-panel Accordion Multiple expansion-panels can be combined into an accordion. The multi=\"true\" input allows the expansions state to be set independently of each other. When multi=\"false\" (default) just one panel can be expanded at a given time: mat-accordion mat-expansion-panel mat-expansion-panel-header This is the expansion 1 title /mat-expansion-panel-header This the expansion 1 content /mat-expansion-panel mat-expansion-panel mat-expansion-panel-header This is the expansion 2 title /mat-expansion-panel-header This the expansion 2 content /mat-expansion-panel /mat-accordion Lazy rendering By default, the expansion panel content will be initialized even when the panel is closed. To instead defer initialization until the panel is open, the content should be provided as an ng-template : mat-expansion-panel mat-expansion-panel-header This is the expansion title /mat-expansion-panel-header ng-template matExpansionPanelContent Some deferred content /ng-template /mat-expansion-panel Accessibility The expansion-panel aims to mimic the experience of the native details and summary elements. The expansion panel header has role=\"button\" and also the attribute aria-controls with the expansion panel's id as value. The expansion panel headers are buttons. Users can use the keyboard to activate the expansion panel header to switch between expanded state and collapsed state. Because the header acts as a button, additional interactive elements should not be put inside of the header.","title":"40-expansion"},{"location":"site-files/source/40-expansion/#expansion-panel-content","text":"Each expansion-panel must include a header and may optionally include an action bar.","title":"Expansion-panel content"},{"location":"site-files/source/40-expansion/#header","text":"The mat-expansion-panel-header shows a summary of the panel content and acts as the control for expanding and collapsing. This header may optionally contain an mat-panel-title and an mat-panel-description , which format the content of the header to align with Material Design specifications. By default, the expansion-panel header includes a toggle icon at the end of the header to indicate the expansion state. This icon can be hidden via the hideToggle property. mat-expansion-panel mat-expansion-panel-header mat-panel-title This is the expansion title /mat-panel-title mat-panel-description This is a summary of the content /mat-panel-description /mat-expansion-panel-header p This is the primary content of the panel. /p /mat-expansion-panel","title":"Header"},{"location":"site-files/source/40-expansion/#action-bar","text":"Actions may optionally be included at the bottom of the panel, visible only when the expansion is in its expanded state. mat-expansion-panel mat-expansion-panel-header This is the expansion title /mat-expansion-panel-header p This is the primary content of the panel. /p mat-action-row button mat-button Click me /button /mat-action-row /mat-expansion-panel","title":"Action bar"},{"location":"site-files/source/40-expansion/#disabling-a-panel","text":"Expansion panels can be disabled using the disabled attribute. A disabled expansion panel can't be toggled by the user, but can still be manipulated programmatically. mat-expansion-panel [disabled]= isDisabled mat-expansion-panel-header This is the expansion title /mat-expansion-panel-header mat-panel-description This is a summary of the content /mat-panel-description /mat-expansion-panel","title":"Disabling a panel"},{"location":"site-files/source/40-expansion/#accordion","text":"Multiple expansion-panels can be combined into an accordion. The multi=\"true\" input allows the expansions state to be set independently of each other. When multi=\"false\" (default) just one panel can be expanded at a given time: mat-accordion mat-expansion-panel mat-expansion-panel-header This is the expansion 1 title /mat-expansion-panel-header This the expansion 1 content /mat-expansion-panel mat-expansion-panel mat-expansion-panel-header This is the expansion 2 title /mat-expansion-panel-header This the expansion 2 content /mat-expansion-panel /mat-accordion","title":"Accordion"},{"location":"site-files/source/40-expansion/#lazy-rendering","text":"By default, the expansion panel content will be initialized even when the panel is closed. To instead defer initialization until the panel is open, the content should be provided as an ng-template : mat-expansion-panel mat-expansion-panel-header This is the expansion title /mat-expansion-panel-header ng-template matExpansionPanelContent Some deferred content /ng-template /mat-expansion-panel","title":"Lazy rendering"},{"location":"site-files/source/40-expansion/#accessibility","text":"The expansion-panel aims to mimic the experience of the native details and summary elements. The expansion panel header has role=\"button\" and also the attribute aria-controls with the expansion panel's id as value. The expansion panel headers are buttons. Users can use the keyboard to activate the expansion panel header to switch between expanded state and collapsed state. Because the header acts as a button, additional interactive elements should not be put inside of the header.","title":"Accessibility"},{"location":"site-files/source/41-README/","text":"Please see the official documentation at https://material.angular.io/components/component/button-toggle","title":"41-README"},{"location":"site-files/source/42-button-toggle/","text":"mat-button-toggle are on/off toggles with the appearance of a button. These toggles can be configured to behave as either radio-buttons or checkboxes. While they can be standalone, they are typically part of a mat-button-toggle-group . Exclusive selection vs. multiple selection By default, mat-button-toggle-group acts like a radio-button group- only one item can be selected. In this mode, the value of the mat-button-toggle-group will reflect the value of the selected button and ngModel is supported. Adding the multiple attribute allows multiple items to be selected (checkbox behavior). In this mode the values of the toggles are not used, the mat-button-toggle-group does not have a value, and ngModel is not supported. Appearance By default, the appearance of mat-button-toggle-group and mat-button-toggle will follow the latest Material Design guidelines. If you want to, you can switch back to the appearance that was following the previous Material Design spec by using the appearance input. The appearance can be configured globally using the MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS injection token. Accessibility The button-toggles will present themselves as either checkboxes or radio-buttons based on the presence of the multiple attribute. For button toggles containing only icons, each button toggle should be given a meaningful label via aria-label or aria-labelledby . For button toggle groups, each group should be given a meaningful label via aria-label or aria-labelledby . Orientation The button-toggles can be rendered in a vertical orientation by adding the vertical attribute.","title":"42-button-toggle"},{"location":"site-files/source/42-button-toggle/#exclusive-selection-vs-multiple-selection","text":"By default, mat-button-toggle-group acts like a radio-button group- only one item can be selected. In this mode, the value of the mat-button-toggle-group will reflect the value of the selected button and ngModel is supported. Adding the multiple attribute allows multiple items to be selected (checkbox behavior). In this mode the values of the toggles are not used, the mat-button-toggle-group does not have a value, and ngModel is not supported.","title":"Exclusive selection vs. multiple selection"},{"location":"site-files/source/42-button-toggle/#appearance","text":"By default, the appearance of mat-button-toggle-group and mat-button-toggle will follow the latest Material Design guidelines. If you want to, you can switch back to the appearance that was following the previous Material Design spec by using the appearance input. The appearance can be configured globally using the MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS injection token.","title":"Appearance"},{"location":"site-files/source/42-button-toggle/#accessibility","text":"The button-toggles will present themselves as either checkboxes or radio-buttons based on the presence of the multiple attribute. For button toggles containing only icons, each button toggle should be given a meaningful label via aria-label or aria-labelledby . For button toggle groups, each group should be given a meaningful label via aria-label or aria-labelledby .","title":"Accessibility"},{"location":"site-files/source/42-button-toggle/#orientation","text":"The button-toggles can be rendered in a vertical orientation by adding the vertical attribute.","title":"Orientation"},{"location":"site-files/source/43-button/","text":"Angular Material buttons are native button or a elements enhanced with Material Design styling and ink ripples. Native button and a elements are always used in order to provide the most straightforward and accessible experience for users. A button element should be used whenever some action is performed. An a element should be used whenever the user will navigate to another view. There are several button variants, each applied as an attribute: Attribute Description mat-button Rectangular text button w/ no elevation mat-raised-button Rectangular contained button w/ elevation mat-flat-button Rectangular contained button w/ no elevation mat-stroked-button Rectangular outlined button w/ no elevation mat-icon-button Circular button with a transparent background, meant to contain an icon mat-fab Circular button w/ elevation, defaults to theme's accent color mat-mini-fab Same as mat-fab but smaller Theming Buttons can be colored in terms of the current theme using the color property to set the background color to primary , accent , or warn . Capitalization According to the Material design spec button text has to be capitalized, however we have opted not to capitalize buttons automatically via text-transform: uppercase , because it can cause issues in certain locales. It is also worth noting that using ALL CAPS in the text itself causes issues for screen-readers, which will read the text character-by-character. We leave the decision of how to approach this to the consuming app. Accessibility Angular Material uses native button and a elements to ensure an accessible experience by default. The button element should be used for any interaction that performs an action on the current page . The a element should be used for any interaction that navigates to another view . Buttons or links containing only icons (such as mat-fab , mat-mini-fab , and mat-icon-button ) should be given a meaningful label via aria-label or aria-labelledby .","title":"43-button"},{"location":"site-files/source/43-button/#theming","text":"Buttons can be colored in terms of the current theme using the color property to set the background color to primary , accent , or warn .","title":"Theming"},{"location":"site-files/source/43-button/#capitalization","text":"According to the Material design spec button text has to be capitalized, however we have opted not to capitalize buttons automatically via text-transform: uppercase , because it can cause issues in certain locales. It is also worth noting that using ALL CAPS in the text itself causes issues for screen-readers, which will read the text character-by-character. We leave the decision of how to approach this to the consuming app.","title":"Capitalization"},{"location":"site-files/source/43-button/#accessibility","text":"Angular Material uses native button and a elements to ensure an accessible experience by default. The button element should be used for any interaction that performs an action on the current page . The a element should be used for any interaction that navigates to another view . Buttons or links containing only icons (such as mat-fab , mat-mini-fab , and mat-icon-button ) should be given a meaningful label via aria-label or aria-labelledby .","title":"Accessibility"},{"location":"site-files/source/44-README/","text":"Please see the official documentation at https://material.angular.io/components/component/button","title":"44-README"},{"location":"site-files/source/45-table/","text":"The mat-table provides a Material Design styled data-table that can be used to display rows of data. This table builds on the foundation of the CDK data-table and uses a similar interface for its data input and template, except that its element and attribute selectors will be prefixed with mat- instead of cdk- . For more information on the interface and a detailed look at how the table is implemented, see the guide covering the CDK data-table . Getting Started 1. Write your mat-table and provide data Begin by adding the table mat-table component to your template and passing in data. The simplest way to provide data to the table is by passing a data array to the table's dataSource input. The table will take the array and render a row for each object in the data array. table mat-table [dataSource]=\u201dmyDataArray\u201d ... /table Since the table optimizes for performance, it will not automatically check for changes to the data array. Instead, when objects are added, removed, or moved on the data array, you can trigger an update to the table's rendered rows by calling its renderRows() method. While an array is the simplest way to bind data into the data source, it is also the most limited. For more complex applications, using a DataSource instance is recommended. See the section \"Advanced data sources\" below for more information. 2. Define the column templates Next, write your table's column templates. Each column definition should be given a unique name and contain the content for its header and row cells. Here's a simple column definition with the name 'userName' . The header cell contains the text \"Name\" and each row cell will render the name property of each row's data. ng-container matColumnDef= userName th mat-header-cell *matHeaderCellDef Name /th td mat-cell *matCellDef= let user {{user.name}} /td /ng-container 3. Define the row templates Finally, once you have defined your columns, you need to tell the table which columns will be rendered in the header and data rows. To start, create a variable in your component that contains the list of the columns you want to render. columnsToDisplay = ['userName', 'age']; Then add mat-header-row and mat-row to the content of your mat-table and provide your column list as inputs. tr mat-header-row *matHeaderRowDef= columnsToDisplay /tr tr mat-row *matRowDef= let myRowData; columns: columnsToDisplay /tr Note that this list of columns provided to the rows can be in any order, not necessary the order in which you wrote the column definitions. Also, you do not necessarily have to include every column that was defined in your template. This means that by changing your column list provided to the rows, you can easily re-order and include/exclude columns dynamically. Advanced data sources The simplest way to provide data to your table is by passing a data array. More complex use-cases may benefit from a more flexible approach involving an Observable stream or by encapsulating your data source logic into a DataSource class. Observable stream of data arrays An alternative approach to providing data to the table is by passing an Observable stream that emits the data array to be rendered each time it is changed. The table will listen to this stream and automatically trigger an update to the rows each time a new data array is emitted. DataSource For most real-world applications, providing the table a DataSource instance will be the best way to manage data. The DataSource is meant to serve a place to encapsulate any sorting, filtering, pagination, and data retrieval logic specific to the application. A DataSource is simply a base class that has two functions: connect and disconnect . The connect function will be called by the table to receive a stream that emits the data array that should be rendered. The table will call disconnect when the table is destroyed, which may be the right time to clean up any subscriptions that may have been registered during the connect process. Features The MatTable is focused on a single responsibility: efficiently render rows of data in a performant and accessible way. You'll notice that the table itself doesn't come out of the box with a lot of features, but expects that the table will be included in a composition of components that fills out its features. For example, you can add sorting and pagination to the table by using MatSort and MatPaginator and mutating the data provided to the table according to their outputs. To simplify the use case of having a table that can sort, paginate, and filter an array of data, the Angular Material library comes with a MatTableDataSource that has already implemented the logic of determining what rows should be rendered according to the current table state. To add these feature to the table, check out their respective sections below. Pagination To paginate the table's data, add a mat-paginator after the table. If you are using the MatTableDataSource for your table's data source, simply provide the MatPaginator to your data source. It will automatically listen for page changes made by the user and send the right paged data to the table. Otherwise if you are implementing the logic to paginate your data, you will want to listen to the paginator's (page) output and pass the right slice of data to your table. For more information on using and configuring the mat-paginator , check out the mat-paginator docs . The MatPaginator is one provided solution to paginating your table's data, but it is not the only option. In fact, the table can work with any custom pagination UI or strategy since the MatTable and its interface is not tied to any one specific implementation. Sorting To add sorting behavior to the table, add the matSort directive to the table and add mat-sort-header to each column header cell that should trigger sorting. Note that you have to import MatSortModule in order to initialize the matSort directive (see API docs ). !-- Name Column -- ng-container matColumnDef= position th mat-header-cell *matHeaderCellDef mat-sort-header Name /th td mat-cell *matCellDef= let element {{element.position}} /td /ng-container If you are using the MatTableDataSource for your table's data source, provide the MatSort directive to the data source and it will automatically listen for sorting changes and change the order of data rendered by the table. By default, the MatTableDataSource sorts with the assumption that the sorted column's name matches the data property name that the column displays. For example, the following column definition is named position , which matches the name of the property displayed in the row cell. Note that if the data properties do not match the column names, or if a more complex data property accessor is required, then a custom sortingDataAccessor function can be set to override the default data accessor on the MatTableDataSource . If you are not using the MatTableDataSource , but instead implementing custom logic to sort your data, listen to the sort's (matSortChange) event and re-order your data according to the sort state. If you are providing a data array directly to the table, don't forget to call renderRows() on the table, since it will not automatically check the array for changes. For more information on using and configuring the sorting behavior, check out the matSort docs . The MatSort is one provided solution to sorting your table's data, but it is not the only option. In fact, the table can work with any custom pagination UI or strategy since the MatTable and its interface is not tied to any one specific implementation. Filtering Angular Material does not provide a specific component to be used for filtering the MatTable since there is no single common approach to adding a filter UI to table data. A general strategy is to add an input where users can type in a filter string and listen to this input to change what data is offered from the data source to the table. If you are using the MatTableDataSource , simply provide the filter string to the MatTableDataSource . The data source will reduce each row data to a serialized form and will filter out the row if it does not contain the filter string. By default, the row data reducing function will concatenate all the object values and convert them to lowercase. For example, the data object {id: 123, name: 'Mr. Smith', favoriteColor: 'blue'} will be reduced to 123mr. smithblue . If your filter string was blue then it would be considered a match because it is contained in the reduced string, and the row would be displayed in the table. To override the default filtering behavior, a custom filterPredicate function can be set which takes a data object and filter string and returns true if the data object is considered a match. Selection Right now there is no formal support for adding a selection UI to the table, but Angular Material does offer the right components and pieces to set this up. The following steps are one solution but it is not the only way to incorporate row selection in your table. 1. Add a selection model Get started by setting up a SelectionModel from @angular/cdk/collections that will maintain the selection state. const initialSelection = []; const allowMultiSelect = true; this.selection = new SelectionModel MyDataType (allowMultiSelect, initialSelection); 2. Define a selection column Add a column definition for displaying the row checkboxes, including a master toggle checkbox for the header. The column name should be added to the list of displayed columns provided to the header and data row. ng-container matColumnDef= select th mat-header-cell *matHeaderCellDef mat-checkbox (change)= $event ? masterToggle() : null [checked]= selection.hasValue() isAllSelected() [indeterminate]= selection.hasValue() !isAllSelected() /mat-checkbox /th td mat-cell *matCellDef= let row mat-checkbox (click)= $event.stopPropagation() (change)= $event ? selection.toggle(row) : null [checked]= selection.isSelected(row) /mat-checkbox /td /ng-container 3. Add event handling logic Implement the behavior in your component's logic to handle the header's master toggle and checking if all rows are selected. /** Whether the number of selected elements matches the total number of rows. */ isAllSelected() { const numSelected = this.selection.selected.length; const numRows = this.dataSource.data.length; return numSelected == numRows; } /** Selects all rows if they are not all selected; otherwise clear selection. */ masterToggle() { this.isAllSelected() ? this.selection.clear() : this.dataSource.data.forEach(row = this.selection.select(row)); } 4. Include overflow styling Finally, adjust the styling for the select column so that its overflow is not hidden. This allows the ripple effect to extend beyond the cell. .mat-column-select { overflow: initial; } Footer row A footer row can be added to the table by adding a footer row definition to the table and adding footer cell templates to column definitions. The footer row will be rendered after the rendered data rows. ng-container matColumnDef= cost th mat-header-cell *matHeaderCellDef Cost /th td mat-cell *matCellDef= let data {{data.cost}} /td td mat-footer-cell *matFooterCellDef {{totalCost}} /td /ng-container ... tr mat-header-row *matHeaderRowDef= columnsToDisplay /tr tr mat-row *matRowDef= let myRowData; columns: columnsToDisplay /tr tr mat-footer-row *matFooterRowDef= columnsToDisplay /tr Sticky Rows and Columns By using position: sticky styling, the table's rows and columns can be fixed so that they do not leave the viewport even when scrolled. The table provides inputs that will automatically apply the correct CSS styling so that the rows and columns become sticky. In order to fix the header row to the top of the scrolling viewport containing the table, you can add a sticky input to the matHeaderRowDef . Similarly, this can also be applied to the table's footer row. Note that if you are using the native table and using Safari, then the footer will only stick if sticky is applied to all the rendered footer rows. It is also possible to fix cell columns to the start or end of the horizontally scrolling viewport. To do this, add the sticky or stickyEnd directive to the ng-container column definition. This feature is supported by Chrome, Firefox, Safari, and Edge. It is not supported in IE, but it does fail gracefully so that the rows simply do not stick. Note that on Safari mobile when using the flex-based table, a cell stuck in more than one direction will struggle to stay in the correct position as you scroll. For example, if a header row is stuck to the top and the first column is stuck, then the top-left-most cell will appear jittery as you scroll. Also, sticky positioning in Edge will appear shaky for special cases. For example, if the scrolling container has a complex box shadow and has sibling elements, the stuck cells will appear jittery. There is currently an open issue with Edge to resolve this. Accessibility Tables without text or labels should be given a meaningful label via aria-label or aria-labelledby . The aria-readonly defaults to true if it's not set. Table's default role is grid , and it can be changed to treegrid through role attribute. mat-table does not manage any focus/keyboard interaction on its own. Users can add desired focus/keyboard interactions in their application. Tables with display: flex The MatTable does not require that you use a native HTML table. Instead, you can use an alternative approach that uses display: flex for the table's styles. This alternative approach replaces the native table element tags with the MatTable directive selectors. For example, table mat-table becomes mat-table ; tr mat-row becomes mat-row . The following shows a previous example using this alternative template: mat-table [dataSource]= dataSource !-- User name Definition -- ng-container cdkColumnDef= username mat-header-cell *cdkHeaderCellDef User name /mat-header-cell mat-cell *cdkCellDef= let row {{row.username}} /mat-cell /ng-container !-- Age Definition -- ng-container cdkColumnDef= age mat-header-cell *cdkHeaderCellDef Age /mat-header-cell mat-cell *cdkCellDef= let row {{row.age}} /mat-cell /ng-container !-- Title Definition -- ng-container cdkColumnDef= title mat-header-cell *cdkHeaderCellDef Title /mat-header-cell mat-cell *cdkCellDef= let row {{row.title}} /mat-cell /ng-container !-- Header and Row Declarations -- mat-header-row *cdkHeaderRowDef= ['username', 'age', 'title'] /mat-header-row mat-row *cdkRowDef= let row; columns: ['username', 'age', 'title'] /mat-row /mat-table Note that this approach means you cannot include certain native-table features such colspan/rowspan or have columns that resize themselves based on their content.","title":"45-table"},{"location":"site-files/source/45-table/#getting-started","text":"","title":"Getting Started"},{"location":"site-files/source/45-table/#1-write-your-mat-table-and-provide-data","text":"Begin by adding the table mat-table component to your template and passing in data. The simplest way to provide data to the table is by passing a data array to the table's dataSource input. The table will take the array and render a row for each object in the data array. table mat-table [dataSource]=\u201dmyDataArray\u201d ... /table Since the table optimizes for performance, it will not automatically check for changes to the data array. Instead, when objects are added, removed, or moved on the data array, you can trigger an update to the table's rendered rows by calling its renderRows() method. While an array is the simplest way to bind data into the data source, it is also the most limited. For more complex applications, using a DataSource instance is recommended. See the section \"Advanced data sources\" below for more information.","title":"1. Write your mat-table and provide data"},{"location":"site-files/source/45-table/#2-define-the-column-templates","text":"Next, write your table's column templates. Each column definition should be given a unique name and contain the content for its header and row cells. Here's a simple column definition with the name 'userName' . The header cell contains the text \"Name\" and each row cell will render the name property of each row's data. ng-container matColumnDef= userName th mat-header-cell *matHeaderCellDef Name /th td mat-cell *matCellDef= let user {{user.name}} /td /ng-container","title":"2. Define the column templates"},{"location":"site-files/source/45-table/#3-define-the-row-templates","text":"Finally, once you have defined your columns, you need to tell the table which columns will be rendered in the header and data rows. To start, create a variable in your component that contains the list of the columns you want to render. columnsToDisplay = ['userName', 'age']; Then add mat-header-row and mat-row to the content of your mat-table and provide your column list as inputs. tr mat-header-row *matHeaderRowDef= columnsToDisplay /tr tr mat-row *matRowDef= let myRowData; columns: columnsToDisplay /tr Note that this list of columns provided to the rows can be in any order, not necessary the order in which you wrote the column definitions. Also, you do not necessarily have to include every column that was defined in your template. This means that by changing your column list provided to the rows, you can easily re-order and include/exclude columns dynamically.","title":"3. Define the row templates"},{"location":"site-files/source/45-table/#advanced-data-sources","text":"The simplest way to provide data to your table is by passing a data array. More complex use-cases may benefit from a more flexible approach involving an Observable stream or by encapsulating your data source logic into a DataSource class.","title":"Advanced data sources"},{"location":"site-files/source/45-table/#observable-stream-of-data-arrays","text":"An alternative approach to providing data to the table is by passing an Observable stream that emits the data array to be rendered each time it is changed. The table will listen to this stream and automatically trigger an update to the rows each time a new data array is emitted.","title":"Observable stream of data arrays"},{"location":"site-files/source/45-table/#datasource","text":"For most real-world applications, providing the table a DataSource instance will be the best way to manage data. The DataSource is meant to serve a place to encapsulate any sorting, filtering, pagination, and data retrieval logic specific to the application. A DataSource is simply a base class that has two functions: connect and disconnect . The connect function will be called by the table to receive a stream that emits the data array that should be rendered. The table will call disconnect when the table is destroyed, which may be the right time to clean up any subscriptions that may have been registered during the connect process.","title":"DataSource"},{"location":"site-files/source/45-table/#features","text":"The MatTable is focused on a single responsibility: efficiently render rows of data in a performant and accessible way. You'll notice that the table itself doesn't come out of the box with a lot of features, but expects that the table will be included in a composition of components that fills out its features. For example, you can add sorting and pagination to the table by using MatSort and MatPaginator and mutating the data provided to the table according to their outputs. To simplify the use case of having a table that can sort, paginate, and filter an array of data, the Angular Material library comes with a MatTableDataSource that has already implemented the logic of determining what rows should be rendered according to the current table state. To add these feature to the table, check out their respective sections below.","title":"Features"},{"location":"site-files/source/45-table/#pagination","text":"To paginate the table's data, add a mat-paginator after the table. If you are using the MatTableDataSource for your table's data source, simply provide the MatPaginator to your data source. It will automatically listen for page changes made by the user and send the right paged data to the table. Otherwise if you are implementing the logic to paginate your data, you will want to listen to the paginator's (page) output and pass the right slice of data to your table. For more information on using and configuring the mat-paginator , check out the mat-paginator docs . The MatPaginator is one provided solution to paginating your table's data, but it is not the only option. In fact, the table can work with any custom pagination UI or strategy since the MatTable and its interface is not tied to any one specific implementation.","title":"Pagination"},{"location":"site-files/source/45-table/#sorting","text":"To add sorting behavior to the table, add the matSort directive to the table and add mat-sort-header to each column header cell that should trigger sorting. Note that you have to import MatSortModule in order to initialize the matSort directive (see API docs ). !-- Name Column -- ng-container matColumnDef= position th mat-header-cell *matHeaderCellDef mat-sort-header Name /th td mat-cell *matCellDef= let element {{element.position}} /td /ng-container If you are using the MatTableDataSource for your table's data source, provide the MatSort directive to the data source and it will automatically listen for sorting changes and change the order of data rendered by the table. By default, the MatTableDataSource sorts with the assumption that the sorted column's name matches the data property name that the column displays. For example, the following column definition is named position , which matches the name of the property displayed in the row cell. Note that if the data properties do not match the column names, or if a more complex data property accessor is required, then a custom sortingDataAccessor function can be set to override the default data accessor on the MatTableDataSource . If you are not using the MatTableDataSource , but instead implementing custom logic to sort your data, listen to the sort's (matSortChange) event and re-order your data according to the sort state. If you are providing a data array directly to the table, don't forget to call renderRows() on the table, since it will not automatically check the array for changes. For more information on using and configuring the sorting behavior, check out the matSort docs . The MatSort is one provided solution to sorting your table's data, but it is not the only option. In fact, the table can work with any custom pagination UI or strategy since the MatTable and its interface is not tied to any one specific implementation.","title":"Sorting"},{"location":"site-files/source/45-table/#filtering","text":"Angular Material does not provide a specific component to be used for filtering the MatTable since there is no single common approach to adding a filter UI to table data. A general strategy is to add an input where users can type in a filter string and listen to this input to change what data is offered from the data source to the table. If you are using the MatTableDataSource , simply provide the filter string to the MatTableDataSource . The data source will reduce each row data to a serialized form and will filter out the row if it does not contain the filter string. By default, the row data reducing function will concatenate all the object values and convert them to lowercase. For example, the data object {id: 123, name: 'Mr. Smith', favoriteColor: 'blue'} will be reduced to 123mr. smithblue . If your filter string was blue then it would be considered a match because it is contained in the reduced string, and the row would be displayed in the table. To override the default filtering behavior, a custom filterPredicate function can be set which takes a data object and filter string and returns true if the data object is considered a match.","title":"Filtering"},{"location":"site-files/source/45-table/#selection","text":"Right now there is no formal support for adding a selection UI to the table, but Angular Material does offer the right components and pieces to set this up. The following steps are one solution but it is not the only way to incorporate row selection in your table.","title":"Selection"},{"location":"site-files/source/45-table/#1-add-a-selection-model","text":"Get started by setting up a SelectionModel from @angular/cdk/collections that will maintain the selection state. const initialSelection = []; const allowMultiSelect = true; this.selection = new SelectionModel MyDataType (allowMultiSelect, initialSelection);","title":"1. Add a selection model"},{"location":"site-files/source/45-table/#2-define-a-selection-column","text":"Add a column definition for displaying the row checkboxes, including a master toggle checkbox for the header. The column name should be added to the list of displayed columns provided to the header and data row. ng-container matColumnDef= select th mat-header-cell *matHeaderCellDef mat-checkbox (change)= $event ? masterToggle() : null [checked]= selection.hasValue() isAllSelected() [indeterminate]= selection.hasValue() !isAllSelected() /mat-checkbox /th td mat-cell *matCellDef= let row mat-checkbox (click)= $event.stopPropagation() (change)= $event ? selection.toggle(row) : null [checked]= selection.isSelected(row) /mat-checkbox /td /ng-container","title":"2. Define a selection column"},{"location":"site-files/source/45-table/#3-add-event-handling-logic","text":"Implement the behavior in your component's logic to handle the header's master toggle and checking if all rows are selected. /** Whether the number of selected elements matches the total number of rows. */ isAllSelected() { const numSelected = this.selection.selected.length; const numRows = this.dataSource.data.length; return numSelected == numRows; } /** Selects all rows if they are not all selected; otherwise clear selection. */ masterToggle() { this.isAllSelected() ? this.selection.clear() : this.dataSource.data.forEach(row = this.selection.select(row)); }","title":"3. Add event handling logic"},{"location":"site-files/source/45-table/#4-include-overflow-styling","text":"Finally, adjust the styling for the select column so that its overflow is not hidden. This allows the ripple effect to extend beyond the cell. .mat-column-select { overflow: initial; }","title":"4. Include overflow styling"},{"location":"site-files/source/45-table/#footer-row","text":"A footer row can be added to the table by adding a footer row definition to the table and adding footer cell templates to column definitions. The footer row will be rendered after the rendered data rows. ng-container matColumnDef= cost th mat-header-cell *matHeaderCellDef Cost /th td mat-cell *matCellDef= let data {{data.cost}} /td td mat-footer-cell *matFooterCellDef {{totalCost}} /td /ng-container ... tr mat-header-row *matHeaderRowDef= columnsToDisplay /tr tr mat-row *matRowDef= let myRowData; columns: columnsToDisplay /tr tr mat-footer-row *matFooterRowDef= columnsToDisplay /tr","title":"Footer row"},{"location":"site-files/source/45-table/#sticky-rows-and-columns","text":"By using position: sticky styling, the table's rows and columns can be fixed so that they do not leave the viewport even when scrolled. The table provides inputs that will automatically apply the correct CSS styling so that the rows and columns become sticky. In order to fix the header row to the top of the scrolling viewport containing the table, you can add a sticky input to the matHeaderRowDef . Similarly, this can also be applied to the table's footer row. Note that if you are using the native table and using Safari, then the footer will only stick if sticky is applied to all the rendered footer rows. It is also possible to fix cell columns to the start or end of the horizontally scrolling viewport. To do this, add the sticky or stickyEnd directive to the ng-container column definition. This feature is supported by Chrome, Firefox, Safari, and Edge. It is not supported in IE, but it does fail gracefully so that the rows simply do not stick. Note that on Safari mobile when using the flex-based table, a cell stuck in more than one direction will struggle to stay in the correct position as you scroll. For example, if a header row is stuck to the top and the first column is stuck, then the top-left-most cell will appear jittery as you scroll. Also, sticky positioning in Edge will appear shaky for special cases. For example, if the scrolling container has a complex box shadow and has sibling elements, the stuck cells will appear jittery. There is currently an open issue with Edge to resolve this.","title":"Sticky Rows and Columns"},{"location":"site-files/source/45-table/#accessibility","text":"Tables without text or labels should be given a meaningful label via aria-label or aria-labelledby . The aria-readonly defaults to true if it's not set. Table's default role is grid , and it can be changed to treegrid through role attribute. mat-table does not manage any focus/keyboard interaction on its own. Users can add desired focus/keyboard interactions in their application.","title":"Accessibility"},{"location":"site-files/source/45-table/#tables-with-display-flex","text":"The MatTable does not require that you use a native HTML table. Instead, you can use an alternative approach that uses display: flex for the table's styles. This alternative approach replaces the native table element tags with the MatTable directive selectors. For example, table mat-table becomes mat-table ; tr mat-row becomes mat-row . The following shows a previous example using this alternative template: mat-table [dataSource]= dataSource !-- User name Definition -- ng-container cdkColumnDef= username mat-header-cell *cdkHeaderCellDef User name /mat-header-cell mat-cell *cdkCellDef= let row {{row.username}} /mat-cell /ng-container !-- Age Definition -- ng-container cdkColumnDef= age mat-header-cell *cdkHeaderCellDef Age /mat-header-cell mat-cell *cdkCellDef= let row {{row.age}} /mat-cell /ng-container !-- Title Definition -- ng-container cdkColumnDef= title mat-header-cell *cdkHeaderCellDef Title /mat-header-cell mat-cell *cdkCellDef= let row {{row.title}} /mat-cell /ng-container !-- Header and Row Declarations -- mat-header-row *cdkHeaderRowDef= ['username', 'age', 'title'] /mat-header-row mat-row *cdkRowDef= let row; columns: ['username', 'age', 'title'] /mat-row /mat-table Note that this approach means you cannot include certain native-table features such colspan/rowspan or have columns that resize themselves based on their content.","title":"Tables with display: flex"},{"location":"site-files/source/46-list/","text":"mat-list is a container component that wraps and formats a series of line items. As the base list component, it provides Material Design styling, but no behavior of its own. Simple lists An mat-list element contains a number of mat-list-item elements. mat-list mat-list-item Pepper /mat-list-item mat-list-item Salt /mat-list-item mat-list-item Paprika /mat-list-item /mat-list Navigation lists Use mat-nav-list tags for navigation lists (i.e. lists that have anchor tags). Simple navigation lists can use the mat-list-item attribute on anchor tag elements directly: mat-nav-list a mat-list-item href= ... *ngFor= let link of links {{ link }} /a /mat-nav-list For more complex navigation lists (e.g. with more than one target per item), wrap the anchor element in an mat-list-item . mat-nav-list mat-list-item *ngFor= let link of links a matLine href= ... {{ link }} /a button mat-icon-button (click)= showInfo(link) mat-icon info /mat-icon /button /mat-list-item /mat-nav-list Action lists Use the mat-action-list element when each item in the list performs some action . Each item in an action list is a button element. Simple action lists can use the mat-list-item attribute on button tag elements directly: mat-action-list button mat-list-item (click)= save() Save /button button mat-list-item (click)= undo() Undo /button /mat-action-list Selection lists A selection list provides an interface for selecting values, where each list item is an option. The options within a selection-list should not contain further interactive controls, such as buttons and anchors. Multi-line lists For lists that require multiple lines per item, annotate each line with an matLine attribute. Whichever heading tag is appropriate for your DOM hierarchy should be used (not necessarily h3 as shown in the example). !-- two line list -- mat-list mat-list-item *ngFor= let message of messages h3 matLine {{message.from}} /h3 p matLine span {{message.subject}} /span span class= demo-2 -- {{message.content}} /span /p /mat-list-item /mat-list !-- three line list -- mat-list mat-list-item *ngFor= let message of messages h3 matLine {{message.from}} /h3 p matLine {{message.subject}} /p p matLine class= demo-2 {{message.content}} /p /mat-list-item /mat-list Lists with icons To add an icon to your list item, use the matListIcon attribute. mat-list mat-list-item *ngFor= let message of messages mat-icon matListIcon folder /mat-icon h3 matLine {{message.from}} /h3 p matLine span {{message.subject}} /span span class= demo-2 -- {{message.content}} /span /p /mat-list-item /mat-list Lists with avatars To include an avatar image, add an image tag with an matListAvatar attribute. mat-list mat-list-item *ngFor= let message of messages img matListAvatar src= ... alt= ... h3 matLine {{message.from}} /h3 p matLine span {{message.subject}} /span span class= demo-2 -- {{message.content}} /span /p /mat-list-item /mat-list Dense lists Lists are also available in \"dense layout\" mode, which shrinks the font size and height of the list to suit UIs that may need to display more information. To enable this mode, add a dense attribute to the main mat-list tag. mat-list dense mat-list-item Pepper /mat-list-item mat-list-item Salt /mat-list-item mat-list-item Paprika /mat-list-item /mat-list Lists with multiple sections Subheader can be added to a list by annotating a heading tag with an matSubheader attribute. To add a divider, use mat-divider . mat-list h3 matSubheader Folders /h3 mat-list-item *ngFor= let folder of folders mat-icon matListIcon folder /mat-icon h4 matLine {{folder.name}} /h4 p matLine class= demo-2 {{folder.updated}} /p /mat-list-item mat-divider /mat-divider h3 matSubheader Notes /h3 mat-list-item *ngFor= let note of notes mat-icon matListIcon note /mat-icon h4 matLine {{note.name}} /h4 p matLine class= demo-2 {{note.updated}} /p /mat-list-item /mat-list Accessibility The type of list used in any given situation depends on how the end-user will be interacting with the it. Navigation When the list-items navigate somewhere, mat-nav-list should be used with a mat-list-item elements as the list items. The nav-list will be rendered using role=\"navigation\" and can be given an aria-label to give context on the set of navigation options presented. Additional interactive content, such as buttons, should not be added inside the anchors. Selection When the list is primarily used to select one or more values, a mat-selection-list should be used with mat-list-option , which map to role=\"listbox\" and role=\"option\" , respectively. The list should be given an aria-label that describes the value or values being selected. Each option should not contain any additional interactive elements, such as buttons. Custom scenarios By default, the list assumes that it will be used in a purely decorative fashion and thus sets no roles, ARIA attributes, or keyboard shortcuts. This is equivalent to having a sequence of div elements on the page. Any interactive content within the list should be given an appropriate accessibility treatment based on the specific workflow of your application. If the list is used to present a list of non-interactive content items, then the list element should be given role=\"list\" and each list item should be given role=\"listitem\" .","title":"46-list"},{"location":"site-files/source/46-list/#simple-lists","text":"An mat-list element contains a number of mat-list-item elements. mat-list mat-list-item Pepper /mat-list-item mat-list-item Salt /mat-list-item mat-list-item Paprika /mat-list-item /mat-list","title":"Simple lists"},{"location":"site-files/source/46-list/#navigation-lists","text":"Use mat-nav-list tags for navigation lists (i.e. lists that have anchor tags). Simple navigation lists can use the mat-list-item attribute on anchor tag elements directly: mat-nav-list a mat-list-item href= ... *ngFor= let link of links {{ link }} /a /mat-nav-list For more complex navigation lists (e.g. with more than one target per item), wrap the anchor element in an mat-list-item . mat-nav-list mat-list-item *ngFor= let link of links a matLine href= ... {{ link }} /a button mat-icon-button (click)= showInfo(link) mat-icon info /mat-icon /button /mat-list-item /mat-nav-list","title":"Navigation lists"},{"location":"site-files/source/46-list/#action-lists","text":"Use the mat-action-list element when each item in the list performs some action . Each item in an action list is a button element. Simple action lists can use the mat-list-item attribute on button tag elements directly: mat-action-list button mat-list-item (click)= save() Save /button button mat-list-item (click)= undo() Undo /button /mat-action-list","title":"Action lists"},{"location":"site-files/source/46-list/#selection-lists","text":"A selection list provides an interface for selecting values, where each list item is an option. The options within a selection-list should not contain further interactive controls, such as buttons and anchors.","title":"Selection lists"},{"location":"site-files/source/46-list/#multi-line-lists","text":"For lists that require multiple lines per item, annotate each line with an matLine attribute. Whichever heading tag is appropriate for your DOM hierarchy should be used (not necessarily h3 as shown in the example). !-- two line list -- mat-list mat-list-item *ngFor= let message of messages h3 matLine {{message.from}} /h3 p matLine span {{message.subject}} /span span class= demo-2 -- {{message.content}} /span /p /mat-list-item /mat-list !-- three line list -- mat-list mat-list-item *ngFor= let message of messages h3 matLine {{message.from}} /h3 p matLine {{message.subject}} /p p matLine class= demo-2 {{message.content}} /p /mat-list-item /mat-list","title":"Multi-line lists"},{"location":"site-files/source/46-list/#lists-with-icons","text":"To add an icon to your list item, use the matListIcon attribute. mat-list mat-list-item *ngFor= let message of messages mat-icon matListIcon folder /mat-icon h3 matLine {{message.from}} /h3 p matLine span {{message.subject}} /span span class= demo-2 -- {{message.content}} /span /p /mat-list-item /mat-list","title":"Lists with icons"},{"location":"site-files/source/46-list/#lists-with-avatars","text":"To include an avatar image, add an image tag with an matListAvatar attribute. mat-list mat-list-item *ngFor= let message of messages img matListAvatar src= ... alt= ... h3 matLine {{message.from}} /h3 p matLine span {{message.subject}} /span span class= demo-2 -- {{message.content}} /span /p /mat-list-item /mat-list","title":"Lists with avatars"},{"location":"site-files/source/46-list/#dense-lists","text":"Lists are also available in \"dense layout\" mode, which shrinks the font size and height of the list to suit UIs that may need to display more information. To enable this mode, add a dense attribute to the main mat-list tag. mat-list dense mat-list-item Pepper /mat-list-item mat-list-item Salt /mat-list-item mat-list-item Paprika /mat-list-item /mat-list","title":"Dense lists"},{"location":"site-files/source/46-list/#lists-with-multiple-sections","text":"Subheader can be added to a list by annotating a heading tag with an matSubheader attribute. To add a divider, use mat-divider . mat-list h3 matSubheader Folders /h3 mat-list-item *ngFor= let folder of folders mat-icon matListIcon folder /mat-icon h4 matLine {{folder.name}} /h4 p matLine class= demo-2 {{folder.updated}} /p /mat-list-item mat-divider /mat-divider h3 matSubheader Notes /h3 mat-list-item *ngFor= let note of notes mat-icon matListIcon note /mat-icon h4 matLine {{note.name}} /h4 p matLine class= demo-2 {{note.updated}} /p /mat-list-item /mat-list","title":"Lists with multiple sections"},{"location":"site-files/source/46-list/#accessibility","text":"The type of list used in any given situation depends on how the end-user will be interacting with the it.","title":"Accessibility"},{"location":"site-files/source/46-list/#navigation","text":"When the list-items navigate somewhere, mat-nav-list should be used with a mat-list-item elements as the list items. The nav-list will be rendered using role=\"navigation\" and can be given an aria-label to give context on the set of navigation options presented. Additional interactive content, such as buttons, should not be added inside the anchors.","title":"Navigation"},{"location":"site-files/source/46-list/#selection","text":"When the list is primarily used to select one or more values, a mat-selection-list should be used with mat-list-option , which map to role=\"listbox\" and role=\"option\" , respectively. The list should be given an aria-label that describes the value or values being selected. Each option should not contain any additional interactive elements, such as buttons.","title":"Selection"},{"location":"site-files/source/46-list/#custom-scenarios","text":"By default, the list assumes that it will be used in a purely decorative fashion and thus sets no roles, ARIA attributes, or keyboard shortcuts. This is equivalent to having a sequence of div elements on the page. Any interactive content within the list should be given an appropriate accessibility treatment based on the specific workflow of your application. If the list is used to present a list of non-interactive content items, then the list element should be given role=\"list\" and each list item should be given role=\"listitem\" .","title":"Custom scenarios"},{"location":"site-files/source/47-README/","text":"Please see the official documentation at https://material.angular.io/components/component/list","title":"47-README"},{"location":"site-files/source/48-README/","text":"Please see the official documentation at https://material.angular.io/components/component/divider","title":"48-README"},{"location":"site-files/source/49-divider/","text":"mat-divider is a component that allows for Material styling of a line separator with various orientation options. Simple divider A mat-divider element can be used on its own to create a horizontal or vertical line styled with a Material theme mat-divider /mat-divider Inset divider Add the inset attribute in order to set whether or not the divider is an inset divider. mat-divider [inset]= true /mat-divider Vertical divider Add the vertical attribute in order to set whether or not the divider is vertically-oriented. mat-divider [vertical]= true /mat-divider Lists with inset dividers Dividers can be added to lists as a means of separating content into distinct sections. Inset dividers can also be added to provide the appearance of distinct elements in a list without cluttering content like avatar images or icons. Make sure to avoid adding an inset divider to the last element in a list, because it will overlap with the section divider. mat-list h3 mat-subheader Folders /h3 mat-list-item *ngFor= let folder of folders; last as last mat-icon mat-list-icon folder /mat-icon h4 mat-line {{folder.name}} /h4 p mat-line class= demo-2 {{folder.updated}} /p mat-divider [inset]= true *ngIf= !last /mat-divider /mat-list-item mat-divider /mat-divider h3 mat-subheader Notes /h3 mat-list-item *ngFor= let note of notes mat-icon mat-list-icon note /mat-icon h4 mat-line {{note.name}} /h4 p mat-line class= demo-2 {{note.updated}} /p /mat-list-item /mat-list","title":"49-divider"},{"location":"site-files/source/49-divider/#simple-divider","text":"A mat-divider element can be used on its own to create a horizontal or vertical line styled with a Material theme mat-divider /mat-divider","title":"Simple divider"},{"location":"site-files/source/49-divider/#inset-divider","text":"Add the inset attribute in order to set whether or not the divider is an inset divider. mat-divider [inset]= true /mat-divider","title":"Inset divider"},{"location":"site-files/source/49-divider/#vertical-divider","text":"Add the vertical attribute in order to set whether or not the divider is vertically-oriented. mat-divider [vertical]= true /mat-divider","title":"Vertical divider"},{"location":"site-files/source/49-divider/#lists-with-inset-dividers","text":"Dividers can be added to lists as a means of separating content into distinct sections. Inset dividers can also be added to provide the appearance of distinct elements in a list without cluttering content like avatar images or icons. Make sure to avoid adding an inset divider to the last element in a list, because it will overlap with the section divider. mat-list h3 mat-subheader Folders /h3 mat-list-item *ngFor= let folder of folders; last as last mat-icon mat-list-icon folder /mat-icon h4 mat-line {{folder.name}} /h4 p mat-line class= demo-2 {{folder.updated}} /p mat-divider [inset]= true *ngIf= !last /mat-divider /mat-list-item mat-divider /mat-divider h3 mat-subheader Notes /h3 mat-list-item *ngFor= let note of notes mat-icon mat-list-icon note /mat-icon h4 mat-line {{note.name}} /h4 p mat-line class= demo-2 {{note.updated}} /p /mat-list-item /mat-list","title":"Lists with inset dividers"},{"location":"site-files/source/5-README/","text":"Please see the official documentation at https://material.angular.io/components/component/sidenav","title":"5-README"},{"location":"site-files/source/50-menu/","text":"mat-menu is a floating panel containing list of options. By itself, the mat-menu element does not render anything. The menu is attached to and opened via application of the matMenuTriggerFor directive: mat-menu #appMenu= matMenu button mat-menu-item Settings /button button mat-menu-item Help /button /mat-menu button mat-icon-button [matMenuTriggerFor]= appMenu mat-icon more_vert /mat-icon /button Toggling the menu programmatically The menu exposes an API to open/close programmatically. Please note that in this case, an matMenuTriggerFor directive is still necessary to attach the menu to a trigger element in the DOM. class MyComponent { @ViewChild(MatMenuTrigger) trigger: MatMenuTrigger; someMethod() { this.trigger.openMenu(); } } Icons Menus support displaying mat-icon elements before the menu item text. my-comp.html mat-menu #menu= matMenu button mat-menu-item mat-icon dialpad /mat-icon span Redial /span /button button mat-menu-item disabled mat-icon voicemail /mat-icon span Check voicemail /span /button button mat-menu-item mat-icon notifications_off /mat-icon span Disable alerts /span /button /mat-menu Customizing menu position By default, the menu will display below (y-axis), after (x-axis), and overlapping its trigger. The position can be changed using the xPosition ( before | after ) and yPosition ( above | below ) attributes. The menu can be be forced to not overlap the trigger using [overlapTrigger]=\"false\" attribute. mat-menu #appMenu= matMenu yPosition= above button mat-menu-item Settings /button button mat-menu-item Help /button /mat-menu button mat-icon-button [matMenuTriggerFor]= appMenu mat-icon more_vert /mat-icon /button Nested menu Material supports the ability for an mat-menu-item to open a sub-menu. To do so, you have to define your root menu and sub-menus, in addition to setting the [matMenuTriggerFor] on the mat-menu-item that should trigger the sub-menu: mat-menu #rootMenu= matMenu button mat-menu-item [matMenuTriggerFor]= subMenu Power /button button mat-menu-item System settings /button /mat-menu mat-menu #subMenu= matMenu button mat-menu-item Shut down /button button mat-menu-item Restart /button button mat-menu-item Hibernate /button /mat-menu button mat-icon-button [matMenuTriggerFor]= rootMenu mat-icon more_vert /mat-icon /button Lazy rendering By default, the menu content will be initialized even when the panel is closed. To defer initialization until the menu is open, the content can be provided as an ng-template with the matMenuContent attribute: mat-menu #appMenu= matMenu ng-template matMenuContent button mat-menu-item Settings /button button mat-menu-item Help /button /ng-template /mat-menu button mat-icon-button [matMenuTriggerFor]= appMenu mat-icon more_vert /mat-icon /button Passing in data to a menu When using lazy rendering, additional context data can be passed to the menu panel via the matMenuTriggerData input. This allows for a single menu instance to be rendered with a different set of data, depending on the trigger that opened it: mat-menu #appMenu= matMenu ng-template matMenuContent let-name= name button mat-menu-item Settings /button button mat-menu-item Log off {{name}} /button /ng-template /mat-menu button mat-icon-button [matMenuTriggerFor]= appMenu [matMenuTriggerData]= {name: 'Sally'} mat-icon more_vert /mat-icon /button button mat-icon-button [matMenuTriggerFor]= appMenu [matMenuTriggerData]= {name: 'Bob'} mat-icon more_vert /mat-icon /button Keyboard interaction DOWN_ARROW : Focuses the next menu item UP_ARROW : Focuses previous menu item RIGHT_ARROW : Opens the menu item's sub-menu LEFT_ARROW : Closes the current menu, if it is a sub-menu ENTER : Activates the focused menu item ESCAPE : Closes the menu Accessibility Menu triggers or menu items without text or labels should be given a meaningful label via aria-label or aria-labelledby .","title":"50-menu"},{"location":"site-files/source/50-menu/#toggling-the-menu-programmatically","text":"The menu exposes an API to open/close programmatically. Please note that in this case, an matMenuTriggerFor directive is still necessary to attach the menu to a trigger element in the DOM. class MyComponent { @ViewChild(MatMenuTrigger) trigger: MatMenuTrigger; someMethod() { this.trigger.openMenu(); } }","title":"Toggling the menu programmatically"},{"location":"site-files/source/50-menu/#icons","text":"Menus support displaying mat-icon elements before the menu item text. my-comp.html mat-menu #menu= matMenu button mat-menu-item mat-icon dialpad /mat-icon span Redial /span /button button mat-menu-item disabled mat-icon voicemail /mat-icon span Check voicemail /span /button button mat-menu-item mat-icon notifications_off /mat-icon span Disable alerts /span /button /mat-menu","title":"Icons"},{"location":"site-files/source/50-menu/#customizing-menu-position","text":"By default, the menu will display below (y-axis), after (x-axis), and overlapping its trigger. The position can be changed using the xPosition ( before | after ) and yPosition ( above | below ) attributes. The menu can be be forced to not overlap the trigger using [overlapTrigger]=\"false\" attribute. mat-menu #appMenu= matMenu yPosition= above button mat-menu-item Settings /button button mat-menu-item Help /button /mat-menu button mat-icon-button [matMenuTriggerFor]= appMenu mat-icon more_vert /mat-icon /button","title":"Customizing menu position"},{"location":"site-files/source/50-menu/#nested-menu","text":"Material supports the ability for an mat-menu-item to open a sub-menu. To do so, you have to define your root menu and sub-menus, in addition to setting the [matMenuTriggerFor] on the mat-menu-item that should trigger the sub-menu: mat-menu #rootMenu= matMenu button mat-menu-item [matMenuTriggerFor]= subMenu Power /button button mat-menu-item System settings /button /mat-menu mat-menu #subMenu= matMenu button mat-menu-item Shut down /button button mat-menu-item Restart /button button mat-menu-item Hibernate /button /mat-menu button mat-icon-button [matMenuTriggerFor]= rootMenu mat-icon more_vert /mat-icon /button","title":"Nested menu"},{"location":"site-files/source/50-menu/#lazy-rendering","text":"By default, the menu content will be initialized even when the panel is closed. To defer initialization until the menu is open, the content can be provided as an ng-template with the matMenuContent attribute: mat-menu #appMenu= matMenu ng-template matMenuContent button mat-menu-item Settings /button button mat-menu-item Help /button /ng-template /mat-menu button mat-icon-button [matMenuTriggerFor]= appMenu mat-icon more_vert /mat-icon /button","title":"Lazy rendering"},{"location":"site-files/source/50-menu/#passing-in-data-to-a-menu","text":"When using lazy rendering, additional context data can be passed to the menu panel via the matMenuTriggerData input. This allows for a single menu instance to be rendered with a different set of data, depending on the trigger that opened it: mat-menu #appMenu= matMenu ng-template matMenuContent let-name= name button mat-menu-item Settings /button button mat-menu-item Log off {{name}} /button /ng-template /mat-menu button mat-icon-button [matMenuTriggerFor]= appMenu [matMenuTriggerData]= {name: 'Sally'} mat-icon more_vert /mat-icon /button button mat-icon-button [matMenuTriggerFor]= appMenu [matMenuTriggerData]= {name: 'Bob'} mat-icon more_vert /mat-icon /button","title":"Passing in data to a menu"},{"location":"site-files/source/50-menu/#keyboard-interaction","text":"DOWN_ARROW : Focuses the next menu item UP_ARROW : Focuses previous menu item RIGHT_ARROW : Opens the menu item's sub-menu LEFT_ARROW : Closes the current menu, if it is a sub-menu ENTER : Activates the focused menu item ESCAPE : Closes the menu","title":"Keyboard interaction"},{"location":"site-files/source/50-menu/#accessibility","text":"Menu triggers or menu items without text or labels should be given a meaningful label via aria-label or aria-labelledby .","title":"Accessibility"},{"location":"site-files/source/51-README/","text":"Please see the official documentation at https://material.angular.io/components/component/menu","title":"51-README"},{"location":"site-files/source/52-grid-list/","text":"mat-grid-list is a two-dimensional list view that arranges cells into grid-based layout. See Material Design spec here . Setting the number of columns An mat-grid-list must specify a cols attribute which sets the number of columns in the grid. The number of rows will be automatically determined based on the number of columns and the number of items. Setting the row height The height of the rows in a grid list can be set via the rowHeight attribute. Row height for the list can be calculated in three ways: Fixed height : The height can be in px , em , or rem . If no units are specified, px units are assumed (e.g. 100px , 5em , 250 ). Ratio : This ratio is column-width:row-height, and must be passed in with a colon, not a decimal (e.g. 4:3 ). Fit : Setting rowHeight to fit This mode automatically divides the available height by the number of rows. Please note the height of the grid-list or its container must be set. If rowHeight is not specified, it defaults to a 1:1 ratio of width:height. Setting the gutter size The gutter size can be set to any px , em , or rem value with the gutterSize property. If no units are specified, px units are assumed. By default the gutter size is 1px . Adding tiles that span multiple rows or columns It is possible to set the rowspan and colspan of each mat-grid-tile individually, using the rowspan and colspan properties. If not set, they both default to 1 . The colspan must not exceed the number of cols in the mat-grid-list . There is no such restriction on the rowspan however, more rows will simply be added for it the tile to fill. Tile headers and footers A header and footer can be added to an mat-grid-tile using the mat-grid-tile-header and mat-grid-tile-footer elements respectively. Accessibility By default, the grid-list assumes that it will be used in a purely decorative fashion and thus sets no roles, ARIA attributes, or keyboard shortcuts. This is equivalent to having a sequence of div elements on the page. Any interactive content within the grid-list should be given an appropriate accessibility treatment based on the specific workflow of your application. If the grid-list is used to present a list of non-interactive content items, then the grid-list element should be given role=\"list\" and each tile should be given role=\"listitem\" .","title":"52-grid-list"},{"location":"site-files/source/52-grid-list/#setting-the-number-of-columns","text":"An mat-grid-list must specify a cols attribute which sets the number of columns in the grid. The number of rows will be automatically determined based on the number of columns and the number of items.","title":"Setting the number of columns"},{"location":"site-files/source/52-grid-list/#setting-the-row-height","text":"The height of the rows in a grid list can be set via the rowHeight attribute. Row height for the list can be calculated in three ways: Fixed height : The height can be in px , em , or rem . If no units are specified, px units are assumed (e.g. 100px , 5em , 250 ). Ratio : This ratio is column-width:row-height, and must be passed in with a colon, not a decimal (e.g. 4:3 ). Fit : Setting rowHeight to fit This mode automatically divides the available height by the number of rows. Please note the height of the grid-list or its container must be set. If rowHeight is not specified, it defaults to a 1:1 ratio of width:height.","title":"Setting the row height"},{"location":"site-files/source/52-grid-list/#setting-the-gutter-size","text":"The gutter size can be set to any px , em , or rem value with the gutterSize property. If no units are specified, px units are assumed. By default the gutter size is 1px .","title":"Setting the gutter size"},{"location":"site-files/source/52-grid-list/#adding-tiles-that-span-multiple-rows-or-columns","text":"It is possible to set the rowspan and colspan of each mat-grid-tile individually, using the rowspan and colspan properties. If not set, they both default to 1 . The colspan must not exceed the number of cols in the mat-grid-list . There is no such restriction on the rowspan however, more rows will simply be added for it the tile to fill.","title":"Adding tiles that span multiple rows or columns"},{"location":"site-files/source/52-grid-list/#tile-headers-and-footers","text":"A header and footer can be added to an mat-grid-tile using the mat-grid-tile-header and mat-grid-tile-footer elements respectively.","title":"Tile headers and footers"},{"location":"site-files/source/52-grid-list/#accessibility","text":"By default, the grid-list assumes that it will be used in a purely decorative fashion and thus sets no roles, ARIA attributes, or keyboard shortcuts. This is equivalent to having a sequence of div elements on the page. Any interactive content within the grid-list should be given an appropriate accessibility treatment based on the specific workflow of your application. If the grid-list is used to present a list of non-interactive content items, then the grid-list element should be given role=\"list\" and each tile should be given role=\"listitem\" .","title":"Accessibility"},{"location":"site-files/source/53-README/","text":"Please see the official documentation at https://material.angular.io/components/component/grid-list","title":"53-README"},{"location":"site-files/source/54-README/","text":"Please see the official documentation at https://material.angular.io/components/component/bottom-sheet","title":"54-README"},{"location":"site-files/source/55-bottom-sheet/","text":"The MatBottomSheet service can be used to open Material Design panels to the bottom of the screen. These panels are intended primarily as an interaction on mobile devices where they can be used as an alternative to dialogs and menus. You can open a bottom sheet by calling the open method with a component to be loaded and an optional config object. The open method will return an instance of MatBottomSheetRef : const bottomSheetRef = bottomSheet.open(SocialShareComponent, { ariaLabel: 'Share on social media' }); The MatBottomSheetRef is a reference to the currently-opened bottom sheet and can be used to close it or to subscribe to events. Note that only one bottom sheet can be open at a time. Any component contained inside of a bottom sheet can inject the MatBottomSheetRef as well. bottomSheetRef.afterDismissed().subscribe(() = { console.log('Bottom sheet has been dismissed.'); }); bottomSheetRef.dismiss(); Sharing data with the bottom sheet component. If you want to pass in some data to the bottom sheet, you can do so using the data property: const bottomSheetRef = bottomSheet.open(HobbitSheet, { data: { names: ['Frodo', 'Bilbo'] }, }); Afterwards you can access the injected data using the MAT_BOTTOM_SHEET_DATA injection token: import {Component, Inject} from '@angular/core'; import {MAT_BOTTOM_SHEET_DATA} from '@angular/material'; @Component({ selector: 'hobbit-sheet', template: 'passed in {{ data.names }}', }) export class HobbitSheet { constructor(@Inject(MAT_BOTTOM_SHEET_DATA) public data: any) { } } Configuring bottom sheet content via entryComponents Similarly to MatDialog , MatBottomSheet instantiates components at run-time. In order for it to work, the Angular compiler needs extra information to create the necessary ComponentFactory for your bottom sheet content component. Any components that are include inside of a bottom sheet have to be added to the entryComponents inside your NgModule . @NgModule({ imports: [ // ... MatBottomSheetModule ], declarations: [ AppComponent, ExampleBottomSheetComponent ], entryComponents: [ ExampleBottomSheetComponent ], providers: [], bootstrap: [AppComponent] }) export class AppModule {} Specifying global configuration defaults Default bottom sheet options can be specified by providing an instance of MatBottomSheetConfig for MAT_BOTTOM_SHEET_DEFAULT_OPTIONS in your application's root module. @NgModule({ providers: [ {provide: MAT_BOTTOM_SHEET_DEFAULT_OPTIONS, useValue: {hasBackdrop: false}} ] }) Accessibility By default, the bottom sheet has role=\"dialog\" on the root element and can be labelled using the ariaLabel property on the MatBottomSheetConfig . When a bottom sheet is opened, it will move focus to the first focusable element that it can find. In order to prevent users from tabbing into elements in the background, the Material bottom sheet uses a focus trap to contain focus within itself. Once a bottom sheet is closed, it will return focus to the element that was focused before it was opened. Focus management By default, the first tabbable element within the bottom sheet will receive focus upon open. This can be configured by setting the cdkFocusInitial attribute on another focusable element. Keyboard interaction By default pressing the escape key will close the bottom sheet. While this behavior can be turned off via the disableClose option, users should generally avoid doing so as it breaks the expected interaction pattern for screen-reader users.","title":"55-bottom-sheet"},{"location":"site-files/source/55-bottom-sheet/#sharing-data-with-the-bottom-sheet-component","text":"If you want to pass in some data to the bottom sheet, you can do so using the data property: const bottomSheetRef = bottomSheet.open(HobbitSheet, { data: { names: ['Frodo', 'Bilbo'] }, }); Afterwards you can access the injected data using the MAT_BOTTOM_SHEET_DATA injection token: import {Component, Inject} from '@angular/core'; import {MAT_BOTTOM_SHEET_DATA} from '@angular/material'; @Component({ selector: 'hobbit-sheet', template: 'passed in {{ data.names }}', }) export class HobbitSheet { constructor(@Inject(MAT_BOTTOM_SHEET_DATA) public data: any) { } }","title":"Sharing data with the bottom sheet component."},{"location":"site-files/source/55-bottom-sheet/#configuring-bottom-sheet-content-via-entrycomponents","text":"Similarly to MatDialog , MatBottomSheet instantiates components at run-time. In order for it to work, the Angular compiler needs extra information to create the necessary ComponentFactory for your bottom sheet content component. Any components that are include inside of a bottom sheet have to be added to the entryComponents inside your NgModule . @NgModule({ imports: [ // ... MatBottomSheetModule ], declarations: [ AppComponent, ExampleBottomSheetComponent ], entryComponents: [ ExampleBottomSheetComponent ], providers: [], bootstrap: [AppComponent] }) export class AppModule {}","title":"Configuring bottom sheet content via entryComponents"},{"location":"site-files/source/55-bottom-sheet/#specifying-global-configuration-defaults","text":"Default bottom sheet options can be specified by providing an instance of MatBottomSheetConfig for MAT_BOTTOM_SHEET_DEFAULT_OPTIONS in your application's root module. @NgModule({ providers: [ {provide: MAT_BOTTOM_SHEET_DEFAULT_OPTIONS, useValue: {hasBackdrop: false}} ] })","title":"Specifying global configuration defaults"},{"location":"site-files/source/55-bottom-sheet/#accessibility","text":"By default, the bottom sheet has role=\"dialog\" on the root element and can be labelled using the ariaLabel property on the MatBottomSheetConfig . When a bottom sheet is opened, it will move focus to the first focusable element that it can find. In order to prevent users from tabbing into elements in the background, the Material bottom sheet uses a focus trap to contain focus within itself. Once a bottom sheet is closed, it will return focus to the element that was focused before it was opened.","title":"Accessibility"},{"location":"site-files/source/55-bottom-sheet/#focus-management","text":"By default, the first tabbable element within the bottom sheet will receive focus upon open. This can be configured by setting the cdkFocusInitial attribute on another focusable element.","title":"Focus management"},{"location":"site-files/source/55-bottom-sheet/#keyboard-interaction","text":"By default pressing the escape key will close the bottom sheet. While this behavior can be turned off via the disableClose option, users should generally avoid doing so as it breaks the expected interaction pattern for screen-reader users.","title":"Keyboard interaction"},{"location":"site-files/source/56-select/","text":"mat-select is a form control for selecting a value from a set of options, similar to the native select element. You can read more about selects in the Material Design spec . It is designed to work inside of a mat-form-field element. To add options to the select, add mat-option elements to the mat-select . Each mat-option has a value property that can be used to set the value that will be selected if the user chooses this option. The content of the mat-option is what will be shown to the user. Angular Material also supports use of the native select element inside of mat-form-field . The native control has several performance, accessibility, and usability advantages. See the documentation for form-field for more information. To use a native select inside mat-form-field , add the matNativeControl attribute to the select element. Getting and setting the select value The mat-select supports 2-way binding to the value property without the need for Angular forms. Both mat-select and select support all of the form directives from the core FormsModule ( NgModel ) and ReactiveFormsModule ( FormControl , FormGroup , etc.) As with native select , mat-select also supports a compareWith function. (Additional information about using a custom compareWith function can be found in the Angular forms documentation ). Form field features There are a number of mat-form-field features that can be used with both select and mat-select . These include error messages, hint text, prefix suffix, and theming. For additional information about these features, see the form field documentation . Setting a static placeholder The placeholder is text shown when the mat-form-field label is floating but the mat-select is empty. It is used to give the user an additional hint about the value they should select. The placeholder can be specified by setting the placeholder attribute on the mat-select element. In some cases that mat-form-field may use the placeholder as the label (see the form field label documentation ). Disabling the select or individual options It is possible to disable the entire select or individual options in the select by using the disabled property on the select or mat-select and the option or ` elements respectively. Resetting the select value If you want one of your options to reset the select's value, you can omit specifying its value. Creating groups of options The mat-optgroup element can be used to group common options under a subheading. The name of the group can be set using the label property of mat-optgroup . Like individual mat-option elements, an entire mat-optgroup can be disabled or enabled by setting the disabled property on the group. Multiple selection mat-select defaults to single-selection mode, but can be configured to allow multiple selection by setting the multiple property. This will allow the user to select multiple values at once. When using the mat-select in multiple selection mode, its value will be a sorted list of all selected values rather than a single value. Using multiple selection with a native select element ( select multiple ) is discouraged inside mat-form-field , as the inline listbox appearance is inconsistent with other Material Design components. Customizing the trigger label If you want to display a custom trigger label inside a mat-select , you can use the mat-select-trigger element. Disabling the ripple effect By default, when a user clicks on a mat-option , a ripple animation is shown. This can be disabled by setting the disableRipple property on mat-select . Adding custom styles to the dropdown panel In order to facilitate easily styling the dropdown panel, mat-select has a panelClass property which can be used to apply additional CSS classes to the dropdown panel. Changing when error messages are shown The mat-form-field allows you to associate error messages with your select or mat-select . By default, these error messages are shown when the control is invalid and either the user has interacted with (touched) the element or the parent form has been submitted. If you wish to override this behavior (e.g. to show the error as soon as the invalid control is dirty or when a parent form group is invalid), you can use the errorStateMatcher property of the mat-select . The property takes an instance of an ErrorStateMatcher object. An ErrorStateMatcher must implement a single method isErrorState which takes the FormControl for this mat-select as well as the parent form and returns a boolean indicating whether errors should be shown. ( true indicating that they should be shown, and false indicating that they should not.) A global error state matcher can be specified by setting the ErrorStateMatcher provider. This applies to all inputs. For convenience, ShowOnDirtyErrorStateMatcher is available in order to globally cause input errors to show when the input is dirty and invalid. @NgModule({ providers: [ {provide: ErrorStateMatcher, useClass: ShowOnDirtyErrorStateMatcher} ] }) Keyboard interaction DOWN_ARROW : Focus next option UP_ARROW : Focus previous option ENTER or SPACE : Select focused item Accessibility The mat-select component without text or label should be given a meaningful label via aria-label or aria-labelledby . The mat-select component has role=\"listbox\" and options inside select have role=\"option\" . The native select offers the best accessibility because it is supported directly by screen-readers. Troubleshooting Error: Cannot change multiple mode of select after initialization This error is thrown if you attempt to bind the multiple property on mat-select to a dynamic value. (e.g. [multiple]=\"isMultiple\" where the value of isMultiple changes over the course of the component's lifetime). If you need to change this dynamically, use ngIf or ngSwitch instead: mat-select *ngIf= isMultiple multiple ... /mat-select mat-select *ngIf= !isMultiple ... /mat-select Error: Value must be an array in multiple-selection mode This error is thrown if you attempt to assign a value other than null , undefined , or an array to a mat-select multiple . For example, something like mySelect.value = 'option1' . What you likely meant to do was mySelect.value = ['option1'] . Error: compareWith must be a function This error occurs if you attempt to assign something other than a function to the compareWith property. For more information on proper usage of compareWith see the Angular forms documentation ).","title":"56-select"},{"location":"site-files/source/56-select/#getting-and-setting-the-select-value","text":"The mat-select supports 2-way binding to the value property without the need for Angular forms. Both mat-select and select support all of the form directives from the core FormsModule ( NgModel ) and ReactiveFormsModule ( FormControl , FormGroup , etc.) As with native select , mat-select also supports a compareWith function. (Additional information about using a custom compareWith function can be found in the Angular forms documentation ).","title":"Getting and setting the select value"},{"location":"site-files/source/56-select/#form-field-features","text":"There are a number of mat-form-field features that can be used with both select and mat-select . These include error messages, hint text, prefix suffix, and theming. For additional information about these features, see the form field documentation .","title":"Form field features"},{"location":"site-files/source/56-select/#setting-a-static-placeholder","text":"The placeholder is text shown when the mat-form-field label is floating but the mat-select is empty. It is used to give the user an additional hint about the value they should select. The placeholder can be specified by setting the placeholder attribute on the mat-select element. In some cases that mat-form-field may use the placeholder as the label (see the form field label documentation ).","title":"Setting a static placeholder"},{"location":"site-files/source/56-select/#disabling-the-select-or-individual-options","text":"It is possible to disable the entire select or individual options in the select by using the disabled property on the select or mat-select and the option or ` elements respectively.","title":"Disabling the select or individual options"},{"location":"site-files/source/56-select/#resetting-the-select-value","text":"If you want one of your options to reset the select's value, you can omit specifying its value.","title":"Resetting the select value"},{"location":"site-files/source/56-select/#creating-groups-of-options","text":"The mat-optgroup element can be used to group common options under a subheading. The name of the group can be set using the label property of mat-optgroup . Like individual mat-option elements, an entire mat-optgroup can be disabled or enabled by setting the disabled property on the group.","title":"Creating groups of options"},{"location":"site-files/source/56-select/#multiple-selection","text":"mat-select defaults to single-selection mode, but can be configured to allow multiple selection by setting the multiple property. This will allow the user to select multiple values at once. When using the mat-select in multiple selection mode, its value will be a sorted list of all selected values rather than a single value. Using multiple selection with a native select element ( select multiple ) is discouraged inside mat-form-field , as the inline listbox appearance is inconsistent with other Material Design components.","title":"Multiple selection"},{"location":"site-files/source/56-select/#customizing-the-trigger-label","text":"If you want to display a custom trigger label inside a mat-select , you can use the mat-select-trigger element.","title":"Customizing the trigger label"},{"location":"site-files/source/56-select/#disabling-the-ripple-effect","text":"By default, when a user clicks on a mat-option , a ripple animation is shown. This can be disabled by setting the disableRipple property on mat-select .","title":"Disabling the ripple effect"},{"location":"site-files/source/56-select/#adding-custom-styles-to-the-dropdown-panel","text":"In order to facilitate easily styling the dropdown panel, mat-select has a panelClass property which can be used to apply additional CSS classes to the dropdown panel.","title":"Adding custom styles to the dropdown panel"},{"location":"site-files/source/56-select/#changing-when-error-messages-are-shown","text":"The mat-form-field allows you to associate error messages with your select or mat-select . By default, these error messages are shown when the control is invalid and either the user has interacted with (touched) the element or the parent form has been submitted. If you wish to override this behavior (e.g. to show the error as soon as the invalid control is dirty or when a parent form group is invalid), you can use the errorStateMatcher property of the mat-select . The property takes an instance of an ErrorStateMatcher object. An ErrorStateMatcher must implement a single method isErrorState which takes the FormControl for this mat-select as well as the parent form and returns a boolean indicating whether errors should be shown. ( true indicating that they should be shown, and false indicating that they should not.) A global error state matcher can be specified by setting the ErrorStateMatcher provider. This applies to all inputs. For convenience, ShowOnDirtyErrorStateMatcher is available in order to globally cause input errors to show when the input is dirty and invalid. @NgModule({ providers: [ {provide: ErrorStateMatcher, useClass: ShowOnDirtyErrorStateMatcher} ] })","title":"Changing when error messages are shown"},{"location":"site-files/source/56-select/#keyboard-interaction","text":"DOWN_ARROW : Focus next option UP_ARROW : Focus previous option ENTER or SPACE : Select focused item","title":"Keyboard interaction"},{"location":"site-files/source/56-select/#accessibility","text":"The mat-select component without text or label should be given a meaningful label via aria-label or aria-labelledby . The mat-select component has role=\"listbox\" and options inside select have role=\"option\" . The native select offers the best accessibility because it is supported directly by screen-readers.","title":"Accessibility"},{"location":"site-files/source/56-select/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"site-files/source/56-select/#error-cannot-change-multiple-mode-of-select-after-initialization","text":"This error is thrown if you attempt to bind the multiple property on mat-select to a dynamic value. (e.g. [multiple]=\"isMultiple\" where the value of isMultiple changes over the course of the component's lifetime). If you need to change this dynamically, use ngIf or ngSwitch instead: mat-select *ngIf= isMultiple multiple ... /mat-select mat-select *ngIf= !isMultiple ... /mat-select","title":"Error: Cannot change multiple mode of select after initialization"},{"location":"site-files/source/56-select/#error-value-must-be-an-array-in-multiple-selection-mode","text":"This error is thrown if you attempt to assign a value other than null , undefined , or an array to a mat-select multiple . For example, something like mySelect.value = 'option1' . What you likely meant to do was mySelect.value = ['option1'] .","title":"Error: Value must be an array in multiple-selection mode"},{"location":"site-files/source/56-select/#error-comparewith-must-be-a-function","text":"This error occurs if you attempt to assign something other than a function to the compareWith property. For more information on proper usage of compareWith see the Angular forms documentation ).","title":"Error: compareWith must be a function"},{"location":"site-files/source/57-README/","text":"Please see the official documentation at https://material.angular.io/components/component/select","title":"57-README"},{"location":"site-files/source/58-README/","text":"Please see the official documentation at https://material.angular.io/components/component/icon","title":"58-README"},{"location":"site-files/source/59-icon/","text":"mat-icon makes it easier to use vector-based icons in your app. This directive supports both icon fonts and SVG icons, but not bitmap-based formats (png, jpg, etc.). Registering icons MatIconRegistry is an injectable service that allows you to associate icon names with SVG URLs, HTML strings and to define aliases for CSS font classes. Its methods are discussed below and listed in the API summary. Font icons with ligatures Some fonts are designed to show icons by using ligatures , for example by rendering the text \"home\" as a home image. To use a ligature icon, put its text in the content of the mat-icon component. By default, mat-icon expects the Material icons font . (You will still need to include the HTML to load the font and its CSS, as described in the link). You can specify a different font by setting the fontSet input to either the CSS class to apply to use the desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias . Font icons with CSS Fonts can also display icons by defining a CSS class for each icon glyph, which typically uses a :before selector to cause the icon to appear. FontAwesome uses this approach to display its icons. To use such a font, set the fontSet input to the font's CSS class (either the class itself or an alias registered with MatIconRegistry.registerFontClassAlias ), and set the fontIcon input to the class for the specific icon to show. For both types of font icons, you can specify the default font class to use when fontSet is not explicitly set by calling MatIconRegistry.setDefaultFontSetClass . SVG icons When an mat-icon component displays an SVG icon, it does so by directly inlining the SVG content into the page as a child of the component. (Rather than using an tag or a div background image). This makes it easier to apply CSS styles to SVG icons. For example, the default color of the SVG content is the CSS currentColor value. This makes SVG icons by default have the same color as surrounding text, and allows you to change the color by setting the \"color\" style on the mat-icon element. In order to prevent XSS vulnerabilities, any SVG URLs and HTML strings passed to the MatIconRegistry must be marked as trusted by using Angular's DomSanitizer service. Also note that all SVG icons, registered by URL, are fetched via XmlHttpRequest, and due to the same-origin policy, their URLs must be on the same domain as the containing page, or their servers must be configured to allow cross-domain access. Named icons To associate a name with an icon URL, use the addSvgIcon , addSvgIconInNamespace , addSvgIconLiteral or addSvgIconLiteralInNamespace methods of MatIconRegistry . After registering an icon, it can be displayed by setting the svgIcon input. For an icon in the default namespace, use the name directly. For a non-default namespace, use the format [namespace]:[name] . Icon sets Icon sets allow grouping multiple icons into a single SVG file. This is done by creating a single root svg tag that contains multiple nested svg tags in its defs section. Each of these nested tags is identified with an id attribute. This id is used as the name of the icon. Icon sets are registered using the addSvgIconSet , addSvgIconSetInNamespace , addSvgIconSetLiteral or addSvgIconSetLiteralInNamespace methods of MatIconRegistry . After an icon set is registered, each of its embedded icons can be accessed by their id attributes. To display an icon from an icon set, use the svgIcon input in the same way as for individually registered icons. Multiple icon sets can be registered in the same namespace. Requesting an icon whose id appears in more than one icon set, the icon from the most recently registered set will be used. Theming By default, icons will use the current font color ( currentColor ). this color can be changed to match the current theme's colors using the color attribute. This can be changed to 'primary' , 'accent' , or 'warn' . Accessibility Similar to an img element, an icon alone does not convey any useful information for a screen-reader user. The user of mat-icon must provide additional information pertaining to how the icon is used. Based on the use-cases described below, mat-icon is marked as aria-hidden=\"true\" by default, but this can be overriden by adding aria-hidden=\"false\" to the element. In thinking about accessibility, it is useful to place icon use into one of three categories: 1. Decorative : the icon conveys no real semantic meaning and is purely cosmetic. 2. Interactive : a user will click or otherwise interact with the icon to perform some action. 3. Indicator : the icon is not interactive, but it conveys some information, such as a status. This includes using the icon in place of text inside of a larger message. Decorative icons When the icon is purely cosmetic and conveys no real semantic meaning, the mat-icon element is marked with aria-hidden=\"true\" . Interactive icons Icons alone are not interactive elements for screen-reader users; when the user would interact with some icon on the page, a more appropriate element should \"own\" the interaction: The mat-icon element should be a child of a button or a element. The parent button or a should either have a meaningful label provided either through direct text content, aria-label , or aria-labelledby . Indicator icons When the presence of an icon communicates some information to the user whether as an indicator or by being inlined into a block of text, that information must also be made available to screen-readers. The most straightforward way to do this is to 1. Add a span as an adjacent sibling to the mat-icon element with text that conveys the same information as the icon. 2. Add the cdk-visually-hidden class to the span . This will make the message invisible on-screen but still available to screen-reader users. Bidirectionality By default icons in an RTL layout will look exactly the same as in LTR, however certain icons have to be mirrored for RTL users . If you want to mirror an icon only in an RTL layout, you can use the mat-icon-rtl-mirror CSS class. mat-icon class= mat-icon-rtl-mirror svgIcon= thumb-up /mat-icon","title":"59-icon"},{"location":"site-files/source/59-icon/#registering-icons","text":"MatIconRegistry is an injectable service that allows you to associate icon names with SVG URLs, HTML strings and to define aliases for CSS font classes. Its methods are discussed below and listed in the API summary.","title":"Registering icons"},{"location":"site-files/source/59-icon/#font-icons-with-ligatures","text":"Some fonts are designed to show icons by using ligatures , for example by rendering the text \"home\" as a home image. To use a ligature icon, put its text in the content of the mat-icon component. By default, mat-icon expects the Material icons font . (You will still need to include the HTML to load the font and its CSS, as described in the link). You can specify a different font by setting the fontSet input to either the CSS class to apply to use the desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias .","title":"Font icons with ligatures"},{"location":"site-files/source/59-icon/#font-icons-with-css","text":"Fonts can also display icons by defining a CSS class for each icon glyph, which typically uses a :before selector to cause the icon to appear. FontAwesome uses this approach to display its icons. To use such a font, set the fontSet input to the font's CSS class (either the class itself or an alias registered with MatIconRegistry.registerFontClassAlias ), and set the fontIcon input to the class for the specific icon to show. For both types of font icons, you can specify the default font class to use when fontSet is not explicitly set by calling MatIconRegistry.setDefaultFontSetClass .","title":"Font icons with CSS"},{"location":"site-files/source/59-icon/#svg-icons","text":"When an mat-icon component displays an SVG icon, it does so by directly inlining the SVG content into the page as a child of the component. (Rather than using an tag or a div background image). This makes it easier to apply CSS styles to SVG icons. For example, the default color of the SVG content is the CSS currentColor value. This makes SVG icons by default have the same color as surrounding text, and allows you to change the color by setting the \"color\" style on the mat-icon element. In order to prevent XSS vulnerabilities, any SVG URLs and HTML strings passed to the MatIconRegistry must be marked as trusted by using Angular's DomSanitizer service. Also note that all SVG icons, registered by URL, are fetched via XmlHttpRequest, and due to the same-origin policy, their URLs must be on the same domain as the containing page, or their servers must be configured to allow cross-domain access.","title":"SVG icons"},{"location":"site-files/source/59-icon/#named-icons","text":"To associate a name with an icon URL, use the addSvgIcon , addSvgIconInNamespace , addSvgIconLiteral or addSvgIconLiteralInNamespace methods of MatIconRegistry . After registering an icon, it can be displayed by setting the svgIcon input. For an icon in the default namespace, use the name directly. For a non-default namespace, use the format [namespace]:[name] .","title":"Named icons"},{"location":"site-files/source/59-icon/#icon-sets","text":"Icon sets allow grouping multiple icons into a single SVG file. This is done by creating a single root svg tag that contains multiple nested svg tags in its defs section. Each of these nested tags is identified with an id attribute. This id is used as the name of the icon. Icon sets are registered using the addSvgIconSet , addSvgIconSetInNamespace , addSvgIconSetLiteral or addSvgIconSetLiteralInNamespace methods of MatIconRegistry . After an icon set is registered, each of its embedded icons can be accessed by their id attributes. To display an icon from an icon set, use the svgIcon input in the same way as for individually registered icons. Multiple icon sets can be registered in the same namespace. Requesting an icon whose id appears in more than one icon set, the icon from the most recently registered set will be used.","title":"Icon sets"},{"location":"site-files/source/59-icon/#theming","text":"By default, icons will use the current font color ( currentColor ). this color can be changed to match the current theme's colors using the color attribute. This can be changed to 'primary' , 'accent' , or 'warn' .","title":"Theming"},{"location":"site-files/source/59-icon/#accessibility","text":"Similar to an img element, an icon alone does not convey any useful information for a screen-reader user. The user of mat-icon must provide additional information pertaining to how the icon is used. Based on the use-cases described below, mat-icon is marked as aria-hidden=\"true\" by default, but this can be overriden by adding aria-hidden=\"false\" to the element. In thinking about accessibility, it is useful to place icon use into one of three categories: 1. Decorative : the icon conveys no real semantic meaning and is purely cosmetic. 2. Interactive : a user will click or otherwise interact with the icon to perform some action. 3. Indicator : the icon is not interactive, but it conveys some information, such as a status. This includes using the icon in place of text inside of a larger message.","title":"Accessibility"},{"location":"site-files/source/59-icon/#decorative-icons","text":"When the icon is purely cosmetic and conveys no real semantic meaning, the mat-icon element is marked with aria-hidden=\"true\" .","title":"Decorative icons"},{"location":"site-files/source/59-icon/#interactive-icons","text":"Icons alone are not interactive elements for screen-reader users; when the user would interact with some icon on the page, a more appropriate element should \"own\" the interaction: The mat-icon element should be a child of a button or a element. The parent button or a should either have a meaningful label provided either through direct text content, aria-label , or aria-labelledby .","title":"Interactive icons"},{"location":"site-files/source/59-icon/#indicator-icons","text":"When the presence of an icon communicates some information to the user whether as an indicator or by being inlined into a block of text, that information must also be made available to screen-readers. The most straightforward way to do this is to 1. Add a span as an adjacent sibling to the mat-icon element with text that conveys the same information as the icon. 2. Add the cdk-visually-hidden class to the span . This will make the message invisible on-screen but still available to screen-reader users.","title":"Indicator icons"},{"location":"site-files/source/59-icon/#bidirectionality","text":"By default icons in an RTL layout will look exactly the same as in LTR, however certain icons have to be mirrored for RTL users . If you want to mirror an icon only in an RTL layout, you can use the mat-icon-rtl-mirror CSS class. mat-icon class= mat-icon-rtl-mirror svgIcon= thumb-up /mat-icon","title":"Bidirectionality"},{"location":"site-files/source/6-sidenav/","text":"Angular Material provides two sets of components designed to add collapsible side content (often navigation, though it can be any content) alongside some primary content. These are the sidenav and drawer components. The sidenav components are designed to add side content to a fullscreen app. To set up a sidenav we use three components: mat-sidenav-container which acts as a structural container for our content and sidenav, mat-sidenav-content which represents the main content, and mat-sidenav which represents the added side content. The drawer component is designed to add side content to a small section of your app. This is accomplished using the mat-drawer-container , mat-drawer-content , and mat-drawer components, which are analogous to their sidenav equivalents. Rather than adding side content to the app as a whole, these are designed to add side content to a small section of your app. They support almost all of the same features, but do not support fixed positioning. Specifying the main and side content Both the main and side content should be placed inside of the mat-sidenav-container , content that you don't want to be affected by the sidenav, such as a header or footer, can be placed outside of the container. The side content should be wrapped in a mat-sidenav element. The position property can be used to specify which end of the main content to place the side content on. position can be either start or end which places the side content on the left or right respectively in left-to-right languages. If the position is not set, the default value of start will be assumed. A mat-sidenav-container can have up to two mat-sidenav elements total, but only one for any given side. The mat-sidenav must be placed as an immediate child of the mat-sidenav-container . The main content should be wrapped in a mat-sidenav-content . If no mat-sidenav-content is specified for a mat-sidenav-container , one will be created implicitly and all of the content inside the mat-sidenav-container other than the mat-sidenav elements will be placed inside of it. The following are examples of valid sidenav layouts: !-- Creates a layout with a left-positioned sidenav and explicit content. -- mat-sidenav-container mat-sidenav Start /mat-sidenav mat-sidenav-content Main /mat-sidenav-content /mat-sidenav-container !-- Creates a layout with a left and right sidenav and implicit content. -- mat-sidenav-container mat-sidenav Start /mat-sidenav mat-sidenav position= end End /mat-sidenav section Main /section /mat-sidenav-container !-- Creates an empty sidenav container with no sidenavs and implicit empty content. -- mat-sidenav-container /mat-sidenav-container And these are examples of invalid sidenav layouts: !-- Invalid because there are two `start` position sidenavs. -- mat-sidenav-container mat-sidenav Start /mat-sidenav mat-sidenav position= start Start 2 /mat-sidenav /mat-sidenav-container !-- Invalid because there are multiple ` mat-sidenav-content ` elements. -- mat-sidenav-container mat-sidenav-content Main /mat-sidenav-content mat-sidenav-content Main 2 /mat-sidenav-content /mat-sidenav-container !-- Invalid because the ` mat-sidenav ` is outside of the ` mat-sidenav-container `. -- mat-sidenav-container /mat-sidenav-container mat-sidenav /mat-sidenav These same rules all apply to the drawer components as well. Opening and closing a sidenav A mat-sidenav can be opened or closed using the open() , close() and toggle() methods. Each of these methods returns a Promise boolean that will be resolved with true when the sidenav finishes opening or false when it finishes closing. The opened state can also be set via a property binding in the template using the opened property. The property supports 2-way binding. mat-sidenav also supports output properties for just open and just close events, The (opened) and (closed) properties respectively. All of these properties and methods work on mat-drawer as well. Changing the sidenav's behavior The mat-sidenav can render in one of three different ways based on the mode property. Mode Description over Sidenav floats over the primary content, which is covered by a backdrop push Sidenav pushes the primary content out of its way, also covering it with a backdrop side Sidenav appears side-by-side with the main content, shrinking the main content's width to make space for the sidenav. If no mode is specified, over is used by default. The over and push sidenav modes show a backdrop by default, while the side mode does not. This can be customized by setting the hasBackdrop property on mat-sidenav-container . Explicitly setting hasBackdrop to true or false will override the default backdrop visibility setting for all sidenavs regadless of mode. Leaving the property unset or setting it to null will use the default backdrop visibility for each mode. mat-drawer also supports all of these same modes and options. Disabling automatic close Clicking on the backdrop or pressing the Esc key will normally close an open sidenav. However, this automatic closing behavior can be disabled by setting the disableClose property on the mat-sidenav or mat-drawer that you want to disable the behavior for. Custom handling for Esc can be done by adding a keydown listener to the mat-sidenav . Custom handling for backdrop clicks can be done via the (backdropClick) output property on mat-sidenav-container . Resizing an open sidenav By default, Material will only measure and resize the drawer container in a few key moments (on open, on window resize, on mode change) in order to avoid layout thrashing, however there are cases where this can be problematic. If your app requires for a drawer to change its width while it is open, you can use the autosize option to tell Material to continue measuring it. Note that you should use this option at your own risk , because it could cause performance issues. Setting the sidenav's size The mat-sidenav and mat-drawer will, by default, fit the size of its content. The width can be explicitly set via CSS: mat-sidenav { width: 200px; } Try to avoid percent based width as resize events are not (yet) supported. Fixed position sidenavs For mat-sidenav only (not mat-drawer ) fixed positioning is supported. It can be enabled by setting the fixedInViewport property. Additionally, top and bottom space can be set via the fixedTopGap and fixedBottomGap . These properties accept a pixel value amount of space to add at the top or bottom. Creating a responsive layout for mobile desktop A sidenav often needs to behave differently on a mobile vs a desktop display. On a desktop, it may make sense to have just the content section scroll. However, on mobile you often want the body to be the element that scrolls; this allows the address bar to auto-hide. The sidenav can be styled with CSS to adjust to either type of device. Reacting to scroll events inside the sidenav container To react to scrolling inside the mat-sidenav-container , you can get a hold of the underlying CdkScrollable instance through the MatSidenavContainer . class YourComponent implements AfterViewInit { @ViewChild(MatSidenavContainer) sidenavContainer: MatSidenavContainer; ngAfterViewInit() { this.sidenavContainer.scrollable.elementScrolled().subscribe(() = /* react to scrolling */); } } Accessibility The mat-sidenav an mat-sidenav-content should each be given an appropriate role attribute depending on the context in which they are used. For example, a mat-sidenav that contains links to other pages might be marked role=\"navigation\" , whereas one that contains a table of contents about might be marked as role=\"directory\" . If there is no more specific role that describes your sidenav, role=\"region\" is recommended. Similarly, the mat-sidenav-content should be given a role based on what it contains. If it represents the primary content of the page, it may make sense to mark it role=\"main\" . If no more specific role makes sense, role=\"region\" is again a good fallback. Troubleshooting Error: A drawer was already declared for 'position=\"...\"' This error is thrown if you have more than one sidenav or drawer in a given container with the same position . The position property defaults to start , so the issue may just be that you forgot to mark the end sidenav with position=\"end\" .","title":"6-sidenav"},{"location":"site-files/source/6-sidenav/#specifying-the-main-and-side-content","text":"Both the main and side content should be placed inside of the mat-sidenav-container , content that you don't want to be affected by the sidenav, such as a header or footer, can be placed outside of the container. The side content should be wrapped in a mat-sidenav element. The position property can be used to specify which end of the main content to place the side content on. position can be either start or end which places the side content on the left or right respectively in left-to-right languages. If the position is not set, the default value of start will be assumed. A mat-sidenav-container can have up to two mat-sidenav elements total, but only one for any given side. The mat-sidenav must be placed as an immediate child of the mat-sidenav-container . The main content should be wrapped in a mat-sidenav-content . If no mat-sidenav-content is specified for a mat-sidenav-container , one will be created implicitly and all of the content inside the mat-sidenav-container other than the mat-sidenav elements will be placed inside of it. The following are examples of valid sidenav layouts: !-- Creates a layout with a left-positioned sidenav and explicit content. -- mat-sidenav-container mat-sidenav Start /mat-sidenav mat-sidenav-content Main /mat-sidenav-content /mat-sidenav-container !-- Creates a layout with a left and right sidenav and implicit content. -- mat-sidenav-container mat-sidenav Start /mat-sidenav mat-sidenav position= end End /mat-sidenav section Main /section /mat-sidenav-container !-- Creates an empty sidenav container with no sidenavs and implicit empty content. -- mat-sidenav-container /mat-sidenav-container And these are examples of invalid sidenav layouts: !-- Invalid because there are two `start` position sidenavs. -- mat-sidenav-container mat-sidenav Start /mat-sidenav mat-sidenav position= start Start 2 /mat-sidenav /mat-sidenav-container !-- Invalid because there are multiple ` mat-sidenav-content ` elements. -- mat-sidenav-container mat-sidenav-content Main /mat-sidenav-content mat-sidenav-content Main 2 /mat-sidenav-content /mat-sidenav-container !-- Invalid because the ` mat-sidenav ` is outside of the ` mat-sidenav-container `. -- mat-sidenav-container /mat-sidenav-container mat-sidenav /mat-sidenav These same rules all apply to the drawer components as well.","title":"Specifying the main and side content"},{"location":"site-files/source/6-sidenav/#opening-and-closing-a-sidenav","text":"A mat-sidenav can be opened or closed using the open() , close() and toggle() methods. Each of these methods returns a Promise boolean that will be resolved with true when the sidenav finishes opening or false when it finishes closing. The opened state can also be set via a property binding in the template using the opened property. The property supports 2-way binding. mat-sidenav also supports output properties for just open and just close events, The (opened) and (closed) properties respectively. All of these properties and methods work on mat-drawer as well.","title":"Opening and closing a sidenav"},{"location":"site-files/source/6-sidenav/#changing-the-sidenavs-behavior","text":"The mat-sidenav can render in one of three different ways based on the mode property. Mode Description over Sidenav floats over the primary content, which is covered by a backdrop push Sidenav pushes the primary content out of its way, also covering it with a backdrop side Sidenav appears side-by-side with the main content, shrinking the main content's width to make space for the sidenav. If no mode is specified, over is used by default. The over and push sidenav modes show a backdrop by default, while the side mode does not. This can be customized by setting the hasBackdrop property on mat-sidenav-container . Explicitly setting hasBackdrop to true or false will override the default backdrop visibility setting for all sidenavs regadless of mode. Leaving the property unset or setting it to null will use the default backdrop visibility for each mode. mat-drawer also supports all of these same modes and options.","title":"Changing the sidenav's behavior"},{"location":"site-files/source/6-sidenav/#disabling-automatic-close","text":"Clicking on the backdrop or pressing the Esc key will normally close an open sidenav. However, this automatic closing behavior can be disabled by setting the disableClose property on the mat-sidenav or mat-drawer that you want to disable the behavior for. Custom handling for Esc can be done by adding a keydown listener to the mat-sidenav . Custom handling for backdrop clicks can be done via the (backdropClick) output property on mat-sidenav-container .","title":"Disabling automatic close"},{"location":"site-files/source/6-sidenav/#resizing-an-open-sidenav","text":"By default, Material will only measure and resize the drawer container in a few key moments (on open, on window resize, on mode change) in order to avoid layout thrashing, however there are cases where this can be problematic. If your app requires for a drawer to change its width while it is open, you can use the autosize option to tell Material to continue measuring it. Note that you should use this option at your own risk , because it could cause performance issues.","title":"Resizing an open sidenav"},{"location":"site-files/source/6-sidenav/#setting-the-sidenavs-size","text":"The mat-sidenav and mat-drawer will, by default, fit the size of its content. The width can be explicitly set via CSS: mat-sidenav { width: 200px; } Try to avoid percent based width as resize events are not (yet) supported.","title":"Setting the sidenav's size"},{"location":"site-files/source/6-sidenav/#fixed-position-sidenavs","text":"For mat-sidenav only (not mat-drawer ) fixed positioning is supported. It can be enabled by setting the fixedInViewport property. Additionally, top and bottom space can be set via the fixedTopGap and fixedBottomGap . These properties accept a pixel value amount of space to add at the top or bottom.","title":"Fixed position sidenavs"},{"location":"site-files/source/6-sidenav/#creating-a-responsive-layout-for-mobile-desktop","text":"A sidenav often needs to behave differently on a mobile vs a desktop display. On a desktop, it may make sense to have just the content section scroll. However, on mobile you often want the body to be the element that scrolls; this allows the address bar to auto-hide. The sidenav can be styled with CSS to adjust to either type of device.","title":"Creating a responsive layout for mobile &amp; desktop"},{"location":"site-files/source/6-sidenav/#reacting-to-scroll-events-inside-the-sidenav-container","text":"To react to scrolling inside the mat-sidenav-container , you can get a hold of the underlying CdkScrollable instance through the MatSidenavContainer . class YourComponent implements AfterViewInit { @ViewChild(MatSidenavContainer) sidenavContainer: MatSidenavContainer; ngAfterViewInit() { this.sidenavContainer.scrollable.elementScrolled().subscribe(() = /* react to scrolling */); } }","title":"Reacting to scroll events inside the sidenav container"},{"location":"site-files/source/6-sidenav/#accessibility","text":"The mat-sidenav an mat-sidenav-content should each be given an appropriate role attribute depending on the context in which they are used. For example, a mat-sidenav that contains links to other pages might be marked role=\"navigation\" , whereas one that contains a table of contents about might be marked as role=\"directory\" . If there is no more specific role that describes your sidenav, role=\"region\" is recommended. Similarly, the mat-sidenav-content should be given a role based on what it contains. If it represents the primary content of the page, it may make sense to mark it role=\"main\" . If no more specific role makes sense, role=\"region\" is again a good fallback.","title":"Accessibility"},{"location":"site-files/source/6-sidenav/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"site-files/source/6-sidenav/#error-a-drawer-was-already-declared-for-position","text":"This error is thrown if you have more than one sidenav or drawer in a given container with the same position . The position property defaults to start , so the issue may just be that you forgot to mark the end sidenav with position=\"end\" .","title":"Error: A drawer was already declared for 'position=\"...\"'"},{"location":"site-files/source/60-snack-bar/","text":"MatSnackBar is a service for displaying snack-bar notifications. Opening a snack-bar A snack-bar can contain either a string message or a given component. // Simple message. let snackBarRef = snackBar.open('Message archived'); // Simple message with an action. let snackBarRef = snackBar.open('Message archived', 'Undo'); // Load the given component into the snack-bar. let snackBarRef = snackbar.openFromComponent(MessageArchivedComponent); In either case, a MatSnackBarRef is returned. This can be used to dismiss the snack-bar or to receive notification of when the snack-bar is dismissed. For simple messages with an action, the MatSnackBarRef exposes an observable for when the action is triggered. If you want to close a custom snack-bar that was opened via openFromComponent , from within the component itself, you can inject the MatSnackBarRef . snackBarRef.afterDismissed().subscribe(() = { console.log('The snack-bar was dismissed'); }); snackBarRef.onAction().subscribe(() = { console.log('The snack-bar action was triggered!'); }); snackBarRef.dismiss(); Dismissal A snack-bar can be dismissed manually by calling the dismiss method on the MatSnackBarRef returned from the call to open . Only one snack-bar can ever be opened at one time. If a new snackbar is opened while a previous message is still showing, the older message will be automatically dismissed. A snack-bar can also be given a duration via the optional configuration object: snackbar.open('Message archived', 'Undo', { duration: 3000 }); Sharing data with a custom snack-bar You can share data with the custom snack-bar, that you opened via the openFromComponent method, by passing it through the data property. snackbar.openFromComponent(MessageArchivedComponent, { data: 'some data' }); To access the data in your component, you have to use the MAT_SNACK_BAR_DATA injection token: import {Component, Inject} from '@angular/core'; import {MAT_SNACK_BAR_DATA} from '@angular/material'; @Component({ selector: 'your-snack-bar', template: 'passed in {{ data }}', }) export class MessageArchivedComponent { constructor(@Inject(MAT_SNACK_BAR_DATA) public data: any) { } } Setting the global configuration defaults If you want to override the default snack bar options, you can do so using the MAT_SNACK_BAR_DEFAULT_OPTIONS injection token. @NgModule({ providers: [ {provide: MAT_SNACK_BAR_DEFAULT_OPTIONS, useValue: {duration: 2500}} ] }) Accessibility Snack-bar messages are announced via an aria-live region. By default, the polite setting is used. While polite is recommended, this can be customized by setting the politeness property of the MatSnackBarConfig . Focus is not, and should not be, moved to the snack-bar element. Moving the focus would be disruptive to a user in the middle of a workflow. It is recommended that, for any action offered in the snack-bar, the application offer the user an alternative way to perform the action. Alternative interactions are typically keyboard shortcuts or menu options. When the action is performed in this way, the snack-bar should be dismissed. Snack-bars that have an action available should not be given a duration , as to accomodate screen-reader users that want to navigate to the snack-bar element to activate the action. If the user has manually moved their focus within the snackbar, focus should be placed somewhere sensible based on the application context when the snack-bar is dismissed. Don't use \"Dismiss\" as a snack-bar-action, instead preferring to use a duration when there is no additional action associated with the notification.","title":"60-snack-bar"},{"location":"site-files/source/60-snack-bar/#opening-a-snack-bar","text":"A snack-bar can contain either a string message or a given component. // Simple message. let snackBarRef = snackBar.open('Message archived'); // Simple message with an action. let snackBarRef = snackBar.open('Message archived', 'Undo'); // Load the given component into the snack-bar. let snackBarRef = snackbar.openFromComponent(MessageArchivedComponent); In either case, a MatSnackBarRef is returned. This can be used to dismiss the snack-bar or to receive notification of when the snack-bar is dismissed. For simple messages with an action, the MatSnackBarRef exposes an observable for when the action is triggered. If you want to close a custom snack-bar that was opened via openFromComponent , from within the component itself, you can inject the MatSnackBarRef . snackBarRef.afterDismissed().subscribe(() = { console.log('The snack-bar was dismissed'); }); snackBarRef.onAction().subscribe(() = { console.log('The snack-bar action was triggered!'); }); snackBarRef.dismiss();","title":"Opening a snack-bar"},{"location":"site-files/source/60-snack-bar/#dismissal","text":"A snack-bar can be dismissed manually by calling the dismiss method on the MatSnackBarRef returned from the call to open . Only one snack-bar can ever be opened at one time. If a new snackbar is opened while a previous message is still showing, the older message will be automatically dismissed. A snack-bar can also be given a duration via the optional configuration object: snackbar.open('Message archived', 'Undo', { duration: 3000 });","title":"Dismissal"},{"location":"site-files/source/60-snack-bar/#sharing-data-with-a-custom-snack-bar","text":"You can share data with the custom snack-bar, that you opened via the openFromComponent method, by passing it through the data property. snackbar.openFromComponent(MessageArchivedComponent, { data: 'some data' }); To access the data in your component, you have to use the MAT_SNACK_BAR_DATA injection token: import {Component, Inject} from '@angular/core'; import {MAT_SNACK_BAR_DATA} from '@angular/material'; @Component({ selector: 'your-snack-bar', template: 'passed in {{ data }}', }) export class MessageArchivedComponent { constructor(@Inject(MAT_SNACK_BAR_DATA) public data: any) { } }","title":"Sharing data with a custom snack-bar"},{"location":"site-files/source/60-snack-bar/#setting-the-global-configuration-defaults","text":"If you want to override the default snack bar options, you can do so using the MAT_SNACK_BAR_DEFAULT_OPTIONS injection token. @NgModule({ providers: [ {provide: MAT_SNACK_BAR_DEFAULT_OPTIONS, useValue: {duration: 2500}} ] })","title":"Setting the global configuration defaults"},{"location":"site-files/source/60-snack-bar/#accessibility","text":"Snack-bar messages are announced via an aria-live region. By default, the polite setting is used. While polite is recommended, this can be customized by setting the politeness property of the MatSnackBarConfig . Focus is not, and should not be, moved to the snack-bar element. Moving the focus would be disruptive to a user in the middle of a workflow. It is recommended that, for any action offered in the snack-bar, the application offer the user an alternative way to perform the action. Alternative interactions are typically keyboard shortcuts or menu options. When the action is performed in this way, the snack-bar should be dismissed. Snack-bars that have an action available should not be given a duration , as to accomodate screen-reader users that want to navigate to the snack-bar element to activate the action. If the user has manually moved their focus within the snackbar, focus should be placed somewhere sensible based on the application context when the snack-bar is dismissed. Don't use \"Dismiss\" as a snack-bar-action, instead preferring to use a duration when there is no additional action associated with the notification.","title":"Accessibility"},{"location":"site-files/source/61-README/","text":"Please see the official documentation at https://material.angular.io/components/component/snack-bar","title":"61-README"},{"location":"site-files/source/62-paginator/","text":"mat-paginator provides navigation for paged information, typically used with a table. Basic use Each paginator instance requires: The number of items per page (default set to 50) The total number of items being paged The current page index defaults to 0, but can be explicitly set via pageIndex. When the user interacts with the paginator, a PageEvent will be fired that can be used to update any associated data view. Page size options The paginator displays a dropdown of page sizes for the user to choose from. The options for this dropdown can be set via pageSizeOptions The current pageSize will always appear in the dropdown, even if it is not included in pageSizeOptions. Internationalization The labels for the paginator can be customized by providing your own instance of MatPaginatorIntl . This will allow you to change the following: 1. The label for the length of each page. 2. The range text displayed to the user. 3. The tooltip messages on the navigation buttons. Accessibility The aria-label s for next page, previous page, first page and last page buttons can be set in MatPaginatorIntl .","title":"62-paginator"},{"location":"site-files/source/62-paginator/#basic-use","text":"Each paginator instance requires: The number of items per page (default set to 50) The total number of items being paged The current page index defaults to 0, but can be explicitly set via pageIndex. When the user interacts with the paginator, a PageEvent will be fired that can be used to update any associated data view.","title":"Basic use"},{"location":"site-files/source/62-paginator/#page-size-options","text":"The paginator displays a dropdown of page sizes for the user to choose from. The options for this dropdown can be set via pageSizeOptions The current pageSize will always appear in the dropdown, even if it is not included in pageSizeOptions.","title":"Page size options"},{"location":"site-files/source/62-paginator/#internationalization","text":"The labels for the paginator can be customized by providing your own instance of MatPaginatorIntl . This will allow you to change the following: 1. The label for the length of each page. 2. The range text displayed to the user. 3. The tooltip messages on the navigation buttons.","title":"Internationalization"},{"location":"site-files/source/62-paginator/#accessibility","text":"The aria-label s for next page, previous page, first page and last page buttons can be set in MatPaginatorIntl .","title":"Accessibility"},{"location":"site-files/source/63-badge/","text":"Badges are small status descriptors for UI elements. A badge consists of a small circle, typically containing a number or other short set of characters, that appears in proximity to another object. Badge position By default, the badge will be placed above after . The direction can be changed by defining the attribute matBadgePosition follow by above|below and before|after . mat-icon matBadge= 22 matBadgePosition= above after home /mat-icon The overlap of the badge in relation to its inner contents can also be defined using the matBadgeOverlap tag. Typically, you want the badge to overlap an icon and not a text phrase. By default it will overlap. h1 matBadge= 11 matBadgeOverlap= false Email /h1 Badge sizing The badge has 3 sizes: small , medium and large . By default, the badge is set to medium . You can change the size by adding matBadgeSize to the host element. h1 matBadge= 11 matBadgeSize= large Email /h1 Badge visibility The badge visibility can be toggled programmatically by defining matBadgeHidden . h1 matBadge= 11 [matBadgeHidden]= !visible Email /h1 Theming Badges can be colored in terms of the current theme using the matBadgeColor property to set the background color to primary , accent , or warn . mat-icon matBadge= 22 matBadgeColor= accent home /mat-icon Accessibility Badges should be given a meaningful description via matBadgeDescription . This description will be applied, via aria-describedby to the element decorated by matBadge . When applying a badge to a mat-icon , it is important to know that the icon is marked as aria-hidden by default. If the combination of icon and badge communicates some meaningful information, that information should be surfaced in another way. See the guidance on indicator icons for more information .","title":"63-badge"},{"location":"site-files/source/63-badge/#badge-position","text":"By default, the badge will be placed above after . The direction can be changed by defining the attribute matBadgePosition follow by above|below and before|after . mat-icon matBadge= 22 matBadgePosition= above after home /mat-icon The overlap of the badge in relation to its inner contents can also be defined using the matBadgeOverlap tag. Typically, you want the badge to overlap an icon and not a text phrase. By default it will overlap. h1 matBadge= 11 matBadgeOverlap= false Email /h1","title":"Badge position"},{"location":"site-files/source/63-badge/#badge-sizing","text":"The badge has 3 sizes: small , medium and large . By default, the badge is set to medium . You can change the size by adding matBadgeSize to the host element. h1 matBadge= 11 matBadgeSize= large Email /h1","title":"Badge sizing"},{"location":"site-files/source/63-badge/#badge-visibility","text":"The badge visibility can be toggled programmatically by defining matBadgeHidden . h1 matBadge= 11 [matBadgeHidden]= !visible Email /h1","title":"Badge visibility"},{"location":"site-files/source/63-badge/#theming","text":"Badges can be colored in terms of the current theme using the matBadgeColor property to set the background color to primary , accent , or warn . mat-icon matBadge= 22 matBadgeColor= accent home /mat-icon","title":"Theming"},{"location":"site-files/source/63-badge/#accessibility","text":"Badges should be given a meaningful description via matBadgeDescription . This description will be applied, via aria-describedby to the element decorated by matBadge . When applying a badge to a mat-icon , it is important to know that the icon is marked as aria-hidden by default. If the combination of icon and badge communicates some meaningful information, that information should be surfaced in another way. See the guidance on indicator icons for more information .","title":"Accessibility"},{"location":"site-files/source/7-radio/","text":"mat-radio-button provides the same functionality as a native input type=\"radio\" enhanced with Material Design styling and animations. All radio-buttons with the same name comprise a set from which only one may be selected at a time. Radio-button label The radio-button label is provided as the content to the mat-radio-button element. The label can be positioned before or after the radio-button by setting the labelPosition property to 'before' or 'after' . If you don't want the label to appear next to the radio-button, you can use aria-label or aria-labelledby to specify an appropriate label. Radio groups Radio-buttons should typically be placed inside of an mat-radio-group unless the DOM structure would make that impossible (e.g., radio-buttons inside of table cells). The radio-group has a value property that reflects the currently selected radio-button inside of the group. Individual radio-buttons inside of a radio-group will inherit the name of the group. Use with @angular/forms mat-radio-group is compatible with @angular/forms and supports both FormsModule and ReactiveFormsModule . Accessibility The mat-radio-button uses an internal input type=\"radio\" to provide an accessible experience. This internal radio button receives focus and is automatically labelled by the text content of the mat-radio-button element. Radio button groups should be given a meaningful label via aria-label or aria-labelledby .","title":"7-radio"},{"location":"site-files/source/7-radio/#radio-button-label","text":"The radio-button label is provided as the content to the mat-radio-button element. The label can be positioned before or after the radio-button by setting the labelPosition property to 'before' or 'after' . If you don't want the label to appear next to the radio-button, you can use aria-label or aria-labelledby to specify an appropriate label.","title":"Radio-button label"},{"location":"site-files/source/7-radio/#radio-groups","text":"Radio-buttons should typically be placed inside of an mat-radio-group unless the DOM structure would make that impossible (e.g., radio-buttons inside of table cells). The radio-group has a value property that reflects the currently selected radio-button inside of the group. Individual radio-buttons inside of a radio-group will inherit the name of the group.","title":"Radio groups"},{"location":"site-files/source/7-radio/#use-with-angularforms","text":"mat-radio-group is compatible with @angular/forms and supports both FormsModule and ReactiveFormsModule .","title":"Use with @angular/forms"},{"location":"site-files/source/7-radio/#accessibility","text":"The mat-radio-button uses an internal input type=\"radio\" to provide an accessible experience. This internal radio button receives focus and is automatically labelled by the text content of the mat-radio-button element. Radio button groups should be given a meaningful label via aria-label or aria-labelledby .","title":"Accessibility"},{"location":"site-files/source/8-README/","text":"Please see the official documentation at https://material.angular.io/components/component/radio","title":"8-README"},{"location":"site-files/source/9-card/","text":"mat-card is a content container for text, photos, and actions in the context of a single subject. Basic card sections The most basic card needs only an mat-card element with some content. However, Angular Material provides a number of preset sections that you can use inside of an mat-card : Element Description mat-card-title Card title mat-card-subtitle Card subtitle mat-card-content Primary card content. Intended for blocks of text img mat-card-image Card image. Stretches the image to the container width mat-card-actions Container for buttons at the bottom of the card mat-card-footer Section anchored to the bottom of the card These elements primary serve as pre-styled content containers without any additional APIs. However, the align property on mat-card-actions can be used to position the actions at the 'start' or 'end' of the container. Card headers In addition to the aforementioned sections, mat-card-header gives the ability to add a rich header to a card. This header can contain: Element Description mat-card-title A title within the header mat-card-subtitle A subtitle within the header img mat-card-avatar An image used as an avatar within the header Title groups mat-card-title-group can be used to combine a title, subtitle, and image into a single section. This element can contain: mat-card-title mat-card-subtitle * One of: * img mat-card-sm-image * img mat-card-md-image * img mat-card-lg-image Accessibility Cards can be used in a wide variety of scenarios and can contain many different types of content. Due to this dynamic nature, the appropriate accessibility treatment depends on how mat-card is used. Group, region, and landmarks There are several ARIA roles that communicate that a portion of the UI represents some semantically meaningful whole. Depending on what the content of the card means to your application, role=\"group\" , role=\"region\" , or one of the landmark roles should typically be applied to the mat-card element. A role is not necessary when the card is used as a purely decorative container that does not convey a meaningful grouping of related content for a single subject. In these cases, the content of the card should follow standard practices for document content. Focus Depending on how cards are used, it may be appropriate to apply a tabindex to the mat-card element. If cards are a primary mechanism through which user interact with the application, tabindex=\"0\" is appropriate. If attention can be sent to the card, but it's not part of the document flow, tabindex=\"-1\" is appropriate. If the card acts as a purely decorative container, it does not need to be tabbable. In this case, the card content should follow normal best practices for tab order.","title":"9-card"},{"location":"site-files/source/9-card/#basic-card-sections","text":"The most basic card needs only an mat-card element with some content. However, Angular Material provides a number of preset sections that you can use inside of an mat-card : Element Description mat-card-title Card title mat-card-subtitle Card subtitle mat-card-content Primary card content. Intended for blocks of text img mat-card-image Card image. Stretches the image to the container width mat-card-actions Container for buttons at the bottom of the card mat-card-footer Section anchored to the bottom of the card These elements primary serve as pre-styled content containers without any additional APIs. However, the align property on mat-card-actions can be used to position the actions at the 'start' or 'end' of the container.","title":"Basic card sections"},{"location":"site-files/source/9-card/#card-headers","text":"In addition to the aforementioned sections, mat-card-header gives the ability to add a rich header to a card. This header can contain: Element Description mat-card-title A title within the header mat-card-subtitle A subtitle within the header img mat-card-avatar An image used as an avatar within the header","title":"Card headers"},{"location":"site-files/source/9-card/#title-groups","text":"mat-card-title-group can be used to combine a title, subtitle, and image into a single section. This element can contain: mat-card-title mat-card-subtitle * One of: * img mat-card-sm-image * img mat-card-md-image * img mat-card-lg-image","title":"Title groups"},{"location":"site-files/source/9-card/#accessibility","text":"Cards can be used in a wide variety of scenarios and can contain many different types of content. Due to this dynamic nature, the appropriate accessibility treatment depends on how mat-card is used.","title":"Accessibility"},{"location":"site-files/source/9-card/#group-region-and-landmarks","text":"There are several ARIA roles that communicate that a portion of the UI represents some semantically meaningful whole. Depending on what the content of the card means to your application, role=\"group\" , role=\"region\" , or one of the landmark roles should typically be applied to the mat-card element. A role is not necessary when the card is used as a purely decorative container that does not convey a meaningful grouping of related content for a single subject. In these cases, the content of the card should follow standard practices for document content.","title":"Group, region, and landmarks"},{"location":"site-files/source/9-card/#focus","text":"Depending on how cards are used, it may be appropriate to apply a tabindex to the mat-card element. If cards are a primary mechanism through which user interact with the application, tabindex=\"0\" is appropriate. If attention can be sent to the card, but it's not part of the document flow, tabindex=\"-1\" is appropriate. If the card acts as a purely decorative container, it does not need to be tabbable. In this case, the card content should follow normal best practices for tab order.","title":"Focus"}]}